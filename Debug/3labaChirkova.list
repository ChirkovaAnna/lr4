
3labaChirkova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800433c  0800433c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800433c  0800433c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800433c  0800433c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001058  20000010  08004354  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001068  08004354  00021068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013856  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d65  00000000  00000000  0003388f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  000365f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00037720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d81  00000000  00000000  00038740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118da  00000000  00000000  000514c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f21  00000000  00000000  00062d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5cbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004738  00000000  00000000  000f5d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004274 	.word	0x08004274

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004274 	.word	0x08004274

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000002c 	.word	0x2000002c
 800018c:	20000080 	.word	0x20000080

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b092      	sub	sp, #72	; 0x48
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb07 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f84b 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f901 	bl	80003a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001a2:	f000 f883 	bl	80002ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80001a6:	f000 f8d3 	bl	8000350 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 4, uint32_t);
 80001aa:	4b1c      	ldr	r3, [pc, #112]	; (800021c <main+0x8c>)
 80001ac:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80001b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80001b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 f8c3 	bl	8002348 <osMessageCreate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a16      	ldr	r2, [pc, #88]	; (8000220 <main+0x90>)
 80001c6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001c8:	4b16      	ldr	r3, [pc, #88]	; (8000224 <main+0x94>)
 80001ca:	f107 041c 	add.w	r4, r7, #28
 80001ce:	461d      	mov	r5, r3
 80001d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001dc:	f107 031c 	add.w	r3, r7, #28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f850 	bl	8002288 <osThreadCreate>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <main+0x98>)
 80001ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskReceive */
  osThreadDef(myTaskReceive, StartTaskReceive, osPriorityNormal, 0, 128);
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <main+0x9c>)
 80001f0:	463c      	mov	r4, r7
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskReceiveHandle = osThreadCreate(osThread(myTaskReceive), NULL);
 8000200:	463b      	mov	r3, r7
 8000202:	2100      	movs	r1, #0
 8000204:	4618      	mov	r0, r3
 8000206:	f002 f83f 	bl	8002288 <osThreadCreate>
 800020a:	4603      	mov	r3, r0
 800020c:	4a08      	ldr	r2, [pc, #32]	; (8000230 <main+0xa0>)
 800020e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  var10_task_create();
 8000210:	f000 faa8 	bl	8000764 <var10_task_create>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f002 f831 	bl	800227a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x88>
 800021a:	bf00      	nop
 800021c:	080042a8 	.word	0x080042a8
 8000220:	2000101c 	.word	0x2000101c
 8000224:	080042b8 	.word	0x080042b8
 8000228:	20000fcc 	.word	0x20000fcc
 800022c:	080042d4 	.word	0x080042d4
 8000230:	20000fd0 	.word	0x20000fd0

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 f80e 	bl	8004264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025e:	2310      	movs	r3, #16
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000262:	2300      	movs	r3, #0
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fdca 	bl	8000e04 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000276:	f000 f915 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f836 	bl	8001304 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f901 	bl	80004a4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3740      	adds	r7, #64	; 0x40
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002ca:	4a20      	ldr	r2, [pc, #128]	; (800034c <MX_TIM1_Init+0xa0>)
 80002cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4999;
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80002d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80002dc:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002de:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80002e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002f6:	4814      	ldr	r0, [pc, #80]	; (8000348 <MX_TIM1_Init+0x9c>)
 80002f8:	f001 f99e 	bl	8001638 <HAL_TIM_Base_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000302:	f000 f8cf 	bl	80004a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	4619      	mov	r1, r3
 8000312:	480d      	ldr	r0, [pc, #52]	; (8000348 <MX_TIM1_Init+0x9c>)
 8000314:	f001 fae7 	bl	80018e6 <HAL_TIM_ConfigClockSource>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800031e:	f000 f8c1 	bl	80004a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800032a:	463b      	mov	r3, r7
 800032c:	4619      	mov	r1, r3
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <MX_TIM1_Init+0x9c>)
 8000330:	f001 fcc2 	bl	8001cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800033a:	f000 f8b3 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000fd4 	.word	0x20000fd4
 800034c:	40012c00 	.word	0x40012c00

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_USART2_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800035c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000388:	f001 fd06 	bl	8001d98 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 f887 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20001020 	.word	0x20001020
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a27      	ldr	r2, [pc, #156]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_GPIO_Init+0xd0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80003e8:	2200      	movs	r2, #0
 80003ea:	21f3      	movs	r1, #243	; 0xf3
 80003ec:	4822      	ldr	r0, [pc, #136]	; (8000478 <MX_GPIO_Init+0xd4>)
 80003ee:	f000 fccf 	bl	8000d90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_GPIO_Init+0xd8>)
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	4619      	mov	r1, r3
 8000406:	481e      	ldr	r0, [pc, #120]	; (8000480 <MX_GPIO_Init+0xdc>)
 8000408:	f000 fb3e 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800040c:	23ff      	movs	r3, #255	; 0xff
 800040e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4619      	mov	r1, r3
 800041e:	4818      	ldr	r0, [pc, #96]	; (8000480 <MX_GPIO_Init+0xdc>)
 8000420:	f000 fb32 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000424:	23e3      	movs	r3, #227	; 0xe3
 8000426:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0308 	add.w	r3, r7, #8
 8000438:	4619      	mov	r1, r3
 800043a:	480f      	ldr	r0, [pc, #60]	; (8000478 <MX_GPIO_Init+0xd4>)
 800043c:	f000 fb24 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000440:	2310      	movs	r3, #16
 8000442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000448:	2302      	movs	r3, #2
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2302      	movs	r3, #2
 800044e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	4619      	mov	r1, r3
 8000456:	4808      	ldr	r0, [pc, #32]	; (8000478 <MX_GPIO_Init+0xd4>)
 8000458:	f000 fb16 	bl	8000a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800045c:	2200      	movs	r2, #0
 800045e:	2105      	movs	r1, #5
 8000460:	2028      	movs	r0, #40	; 0x28
 8000462:	f000 fada 	bl	8000a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000466:	2028      	movs	r0, #40	; 0x28
 8000468:	f000 faf3 	bl	8000a52 <HAL_NVIC_EnableIRQ>

}
 800046c:	bf00      	nop
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	10110000 	.word	0x10110000
 8000480:	40011000 	.word	0x40011000

08000484 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f001 ff47 	bl	8002320 <osDelay>
 8000492:	e7fb      	b.n	800048c <StartDefaultTask+0x8>

08000494 <StartTaskReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReceive */
void StartTaskReceive(void const * argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartTaskReceive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f001 ff3f 	bl	8002320 <osDelay>
 80004a2:	e7fb      	b.n	800049c <StartTaskReceive+0x8>

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <HAL_MspInit+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <HAL_MspInit+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_MspInit+0x68>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_MspInit+0x68>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <HAL_MspInit+0x68>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x68>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	210f      	movs	r1, #15
 80004ea:	f06f 0001 	mvn.w	r0, #1
 80004ee:	f000 fa94 	bl	8000a1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_MspInit+0x6c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_MspInit+0x6c>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_TIM_Base_MspInit+0x44>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d113      	bne.n	800055a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	2019      	movs	r0, #25
 8000550:	f000 fa63 	bl	8000a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000554:	2019      	movs	r0, #25
 8000556:	f000 fa7c 	bl	8000a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40012c00 	.word	0x40012c00
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <HAL_UART_MspInit+0x88>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d12f      	bne.n	80005ec <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a19      	ldr	r2, [pc, #100]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	61d3      	str	r3, [r2, #28]
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_UART_MspInit+0x8c>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005bc:	2304      	movs	r3, #4
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005d0:	f000 fa5a 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005d4:	2308      	movs	r3, #8
 80005d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_UART_MspInit+0x90>)
 80005e8:	f000 fa4e 	bl	8000a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40004400 	.word	0x40004400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062e:	f000 f901 	bl	8000834 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000632:	f003 f94f 	bl	80038d4 <xTaskGetSchedulerState>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d001      	beq.n	8000640 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800063c:	f003 fbc4 	bl	8003dc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM1_UP_IRQHandler+0x10>)
 800064a:	f001 f844 	bl	80016d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000fd4 	.word	0x20000fd4

08000658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800065c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000660:	f000 fbae 	bl	8000dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <Reset_Handler>:
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopFillZerobss+0x12>)
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopFillZerobss+0x16>)
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopFillZerobss+0x1a>)
 800067a:	2300      	movs	r3, #0
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:
 800067e:	58d4      	ldr	r4, [r2, r3]
 8000680:	50c4      	str	r4, [r0, r3]
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:
 8000684:	18c4      	adds	r4, r0, r3
 8000686:	428c      	cmp	r4, r1
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopFillZerobss+0x1e>)
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopFillZerobss+0x22>)
 800068e:	2300      	movs	r3, #0
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:
 8000696:	42a2      	cmp	r2, r4
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>
 800069a:	f7ff ffe5 	bl	8000668 <SystemInit>
 800069e:	f003 fdaf 	bl	8004200 <__libc_init_array>
 80006a2:	f7ff fd75 	bl	8000190 <main>
 80006a6:	4770      	bx	lr
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000010 	.word	0x20000010
 80006b0:	08004344 	.word	0x08004344
 80006b4:	20000010 	.word	0x20000010
 80006b8:	20001068 	.word	0x20001068

080006bc <ADC1_2_IRQHandler>:
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <var10_task>:
extern UART_HandleTypeDef huart2;
osMessageQId myQueue01Handle;

/* USER CODE END Header_StartDefaultTask */
void var10_task(void const * argument) 				//прием с юарт и передача на очередь
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char *data[20] = {0};								// бронируем в памяти 20 байт. Изначально они по 0
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2250      	movs	r2, #80	; 0x50
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fdc7 	bl	8004264 <memset>
  for(;;)											//бесконечный цикл
  {
	  HAL_UART_Receive(&huart2, data, 100, 50);		//прием с юарта 100-размер, 50-таймаут
 80006d6:	f107 0108 	add.w	r1, r7, #8
 80006da:	2332      	movs	r3, #50	; 0x32
 80006dc:	2264      	movs	r2, #100	; 0x64
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <var10_task+0x38>)
 80006e0:	f001 fc39 	bl	8001f56 <HAL_UART_Receive>
	  xQueueSendToBack(myQueue01Handle, data, 0);	//очередь.
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <var10_task+0x3c>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	f107 0108 	add.w	r1, r7, #8
 80006ec:	2300      	movs	r3, #0
 80006ee:	2200      	movs	r2, #0
 80006f0:	f002 f83e 	bl	8002770 <xQueueGenericSend>
	  HAL_UART_Receive(&huart2, data, 100, 50);		//прием с юарта 100-размер, 50-таймаут
 80006f4:	e7ef      	b.n	80006d6 <var10_task+0x16>
 80006f6:	bf00      	nop
 80006f8:	20001020 	.word	0x20001020
 80006fc:	2000101c 	.word	0x2000101c

08000700 <var10_task2>:
 }
}
  /* USER CODE END 5 */

void var10_task2(void const * argument) 			//читает с очереди и передает на консоль
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	char data1[20] = {0}; 							//буфер, который принимает значения с очереди
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
	uint8_t x; 										//переменная x
	  for(;;)
	  {
	   x = xQueueReceive(myQueue01Handle, &data1, 1000);		//определение состояние очереди. 1 если в очереди есть элементы. 0 если пустая очередь
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <var10_task2+0x5c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f107 0108 	add.w	r1, r7, #8
 8000722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000726:	4618      	mov	r0, r3
 8000728:	f002 f920 	bl	800296c <xQueueReceive>
 800072c:	4603      	mov	r3, r0
 800072e:	77fb      	strb	r3, [r7, #31]
	   if(x == pdPASS)											//pdPASS - вернется только тогда, когда данные успешно отправлены в очередь. Если верно, то переходит дальше
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d1f1      	bne.n	800071a <var10_task2+0x1a>
	  {
	   HAL_UART_Transmit(&huart2, data1, strlen(data1), 1000);	//передача на консоль
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd08 	bl	8000150 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	f107 0108 	add.w	r1, r7, #8
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <var10_task2+0x60>)
 800074e:	f001 fb70 	bl	8001e32 <HAL_UART_Transmit>
		   osDelay(100);										//задержка
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f001 fde4 	bl	8002320 <osDelay>
	   x = xQueueReceive(myQueue01Handle, &data1, 1000);		//определение состояние очереди. 1 если в очереди есть элементы. 0 если пустая очередь
 8000758:	e7df      	b.n	800071a <var10_task2+0x1a>
 800075a:	bf00      	nop
 800075c:	2000101c 	.word	0x2000101c
 8000760:	20001020 	.word	0x20001020

08000764 <var10_task_create>:
	  }
	  }
}

void var10_task_create(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af02      	add	r7, sp, #8
	xTaskCreate(		var10_task,       /* Function that implements the task. */
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2300      	movs	r3, #0
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2301      	movs	r3, #1
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <var10_task_create+0x34>)
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <var10_task_create+0x38>)
 800077a:	f002 fb43 	bl	8002e04 <xTaskCreate>
	                    128,      /* Stack size in words, not bytes. */
	                    ( void * ) 1,    /* Parameter passed into the task. */
						osPriorityNormal ,/* Priority at which the task is created. */
	                    NULL );      /* Used to pass out the created task's handle. */

	xTaskCreate(		var10_task2,       /* Function that implements the task. */
 800077e:	2300      	movs	r3, #0
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	4905      	ldr	r1, [pc, #20]	; (80007a0 <var10_task_create+0x3c>)
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <var10_task_create+0x40>)
 800078e:	f002 fb39 	bl	8002e04 <xTaskCreate>
	                    "anna's task2",          /* Text name for the task. */
	                    128,      /* Stack size in words, not bytes. */
	                    ( void * ) 1,    /* Parameter passed into the task. */
						osPriorityNormal ,/* Priority at which the task is created. */
	                    NULL );      /* Used to pass out the created task's handle. */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	080042f0 	.word	0x080042f0
 800079c:	080006c1 	.word	0x080006c1
 80007a0:	080042fc 	.word	0x080042fc
 80007a4:	08000701 	.word	0x08000701

080007a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f923 	bl	8000a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff fe74 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f93b 	bl	8000a6e <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f000 f903 	bl	8000a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_IncTick+0x1c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x20>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a03      	ldr	r2, [pc, #12]	; (8000854 <HAL_IncTick+0x20>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000008 	.word	0x20000008
 8000854:	20001064 	.word	0x20001064

08000858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HAL_GetTick+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20001064 	.word	0x20001064

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	db0b      	blt.n	80008fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 021f 	and.w	r2, r3, #31
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <__NVIC_EnableIRQ+0x34>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	2001      	movs	r0, #1
 80008f2:	fa00 f202 	lsl.w	r2, r0, r2
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d0:	d301      	bcc.n	80009d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d2:	2301      	movs	r3, #1
 80009d4:	e00f      	b.n	80009f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <SysTick_Config+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009de:	210f      	movs	r1, #15
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	f7ff ff90 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SysTick_Config+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <SysTick_Config+0x40>)
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	e000e010 	.word	0xe000e010

08000a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ff2d 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b086      	sub	sp, #24
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a2c:	f7ff ff42 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 8000a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff90 	bl	800095c <NVIC_EncodePriority>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff5f 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff35 	bl	80008d0 <__NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffa2 	bl	80009c0 <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b08b      	sub	sp, #44	; 0x2c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9a:	e169      	b.n	8000d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	f040 8158 	bne.w	8000d6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	4a9a      	ldr	r2, [pc, #616]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d05e      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ac4:	4a98      	ldr	r2, [pc, #608]	; (8000d28 <HAL_GPIO_Init+0x2a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d875      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aca:	4a98      	ldr	r2, [pc, #608]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d058      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ad0:	4a96      	ldr	r2, [pc, #600]	; (8000d2c <HAL_GPIO_Init+0x2a4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d86f      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ad6:	4a96      	ldr	r2, [pc, #600]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d052      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000adc:	4a94      	ldr	r2, [pc, #592]	; (8000d30 <HAL_GPIO_Init+0x2a8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d869      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000ae2:	4a94      	ldr	r2, [pc, #592]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d04c      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a92      	ldr	r2, [pc, #584]	; (8000d34 <HAL_GPIO_Init+0x2ac>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d863      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000aee:	4a92      	ldr	r2, [pc, #584]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d046      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
 8000af4:	4a90      	ldr	r2, [pc, #576]	; (8000d38 <HAL_GPIO_Init+0x2b0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d85d      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000afa:	2b12      	cmp	r3, #18
 8000afc:	d82a      	bhi.n	8000b54 <HAL_GPIO_Init+0xcc>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d859      	bhi.n	8000bb6 <HAL_GPIO_Init+0x12e>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <HAL_GPIO_Init+0x80>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000bb1 	.word	0x08000bb1
 8000b18:	08000bb7 	.word	0x08000bb7
 8000b1c:	08000bb7 	.word	0x08000bb7
 8000b20:	08000bb7 	.word	0x08000bb7
 8000b24:	08000bb7 	.word	0x08000bb7
 8000b28:	08000bb7 	.word	0x08000bb7
 8000b2c:	08000bb7 	.word	0x08000bb7
 8000b30:	08000bb7 	.word	0x08000bb7
 8000b34:	08000bb7 	.word	0x08000bb7
 8000b38:	08000bb7 	.word	0x08000bb7
 8000b3c:	08000bb7 	.word	0x08000bb7
 8000b40:	08000bb7 	.word	0x08000bb7
 8000b44:	08000bb7 	.word	0x08000bb7
 8000b48:	08000bb7 	.word	0x08000bb7
 8000b4c:	08000b65 	.word	0x08000b65
 8000b50:	08000b79 	.word	0x08000b79
 8000b54:	4a79      	ldr	r2, [pc, #484]	; (8000d3c <HAL_GPIO_Init+0x2b4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d013      	beq.n	8000b82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5a:	e02c      	b.n	8000bb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e029      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e024      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	623b      	str	r3, [r7, #32]
          break;
 8000b76:	e01f      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e01a      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e013      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d105      	bne.n	8000ba4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	611a      	str	r2, [r3, #16]
          break;
 8000ba2:	e009      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	615a      	str	r2, [r3, #20]
          break;
 8000bae:	e003      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
          break;
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x130>
          break;
 8000bb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d801      	bhi.n	8000bc2 <HAL_GPIO_Init+0x13a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	e001      	b.n	8000bc6 <HAL_GPIO_Init+0x13e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d802      	bhi.n	8000bd4 <HAL_GPIO_Init+0x14c>
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x152>
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	3b08      	subs	r3, #8
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	210f      	movs	r1, #15
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	401a      	ands	r2, r3
 8000bec:	6a39      	ldr	r1, [r7, #32]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80b1 	beq.w	8000d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <HAL_GPIO_Init+0x2b8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c20:	4a48      	ldr	r2, [pc, #288]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <HAL_GPIO_Init+0x2c0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d013      	beq.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3f      	ldr	r2, [pc, #252]	; (8000d4c <HAL_GPIO_Init+0x2c4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d00d      	beq.n	8000c70 <HAL_GPIO_Init+0x1e8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a3e      	ldr	r2, [pc, #248]	; (8000d50 <HAL_GPIO_Init+0x2c8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d007      	beq.n	8000c6c <HAL_GPIO_Init+0x1e4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e004      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <HAL_GPIO_Init+0x1ee>
 8000c74:	2300      	movs	r3, #0
 8000c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c86:	492f      	ldr	r1, [pc, #188]	; (8000d44 <HAL_GPIO_Init+0x2bc>)
 8000c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	492c      	ldr	r1, [pc, #176]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4928      	ldr	r1, [pc, #160]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4922      	ldr	r1, [pc, #136]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	491e      	ldr	r1, [pc, #120]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4918      	ldr	r1, [pc, #96]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d021      	beq.n	8000d5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
 8000d24:	e021      	b.n	8000d6a <HAL_GPIO_Init+0x2e2>
 8000d26:	bf00      	nop
 8000d28:	10320000 	.word	0x10320000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10220000 	.word	0x10220000
 8000d34:	10210000 	.word	0x10210000
 8000d38:	10120000 	.word	0x10120000
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40010c00 	.word	0x40010c00
 8000d50:	40011000 	.word	0x40011000
 8000d54:	40011400 	.word	0x40011400
 8000d58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4909      	ldr	r1, [pc, #36]	; (8000d8c <HAL_GPIO_Init+0x304>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f47f ae8e 	bne.w	8000a9c <HAL_GPIO_Init+0x14>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	; 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	787b      	ldrb	r3, [r7, #1]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	611a      	str	r2, [r3, #16]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dcc:	695a      	ldr	r2, [r3, #20]
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f806 	bl	8000df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e26c      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8087 	beq.w	8000f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e24:	4b92      	ldr	r3, [pc, #584]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d00c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e30:	4b8f      	ldr	r3, [pc, #572]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d112      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
 8000e3c:	4b8c      	ldr	r3, [pc, #560]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d10b      	bne.n	8000e62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4a:	4b89      	ldr	r3, [pc, #548]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d06c      	beq.n	8000f30 <HAL_RCC_OscConfig+0x12c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d168      	bne.n	8000f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e246      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6a:	d106      	bne.n	8000e7a <HAL_RCC_OscConfig+0x76>
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7f      	ldr	r2, [pc, #508]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e02e      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10c      	bne.n	8000e9c <HAL_RCC_OscConfig+0x98>
 8000e82:	4b7b      	ldr	r3, [pc, #492]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7a      	ldr	r2, [pc, #488]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b78      	ldr	r3, [pc, #480]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a77      	ldr	r2, [pc, #476]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e01d      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xbc>
 8000ea6:	4b72      	ldr	r3, [pc, #456]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a71      	ldr	r2, [pc, #452]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a6e      	ldr	r2, [pc, #440]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e00b      	b.n	8000ed8 <HAL_RCC_OscConfig+0xd4>
 8000ec0:	4b6b      	ldr	r3, [pc, #428]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a6a      	ldr	r2, [pc, #424]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b68      	ldr	r3, [pc, #416]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a67      	ldr	r2, [pc, #412]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d013      	beq.n	8000f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fcba 	bl	8000858 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fcb6 	bl	8000858 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1fa      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0xe4>
 8000f06:	e014      	b.n	8000f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fca6 	bl	8000858 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fca2 	bl	8000858 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e1e6      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	4b53      	ldr	r3, [pc, #332]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x10c>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d063      	beq.n	8001006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00b      	beq.n	8000f62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f4a:	4b49      	ldr	r3, [pc, #292]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d11c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x18c>
 8000f56:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d116      	bne.n	8000f90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <HAL_RCC_OscConfig+0x176>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d001      	beq.n	8000f7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e1ba      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7a:	4b3d      	ldr	r3, [pc, #244]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4939      	ldr	r1, [pc, #228]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	e03a      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d020      	beq.n	8000fda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fc5b 	bl	8000858 <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa6:	f7ff fc57 	bl	8000858 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e19b      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f0      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4927      	ldr	r1, [pc, #156]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e015      	b.n	8001006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fc3a 	bl	8000858 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fc36 	bl	8000858 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e17a      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	2b00      	cmp	r3, #0
 8001010:	d03a      	beq.n	8001088 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d019      	beq.n	800104e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_RCC_OscConfig+0x274>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001020:	f7ff fc1a 	bl	8000858 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001028:	f7ff fc16 	bl	8000858 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e15a      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_RCC_OscConfig+0x26c>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fad8 	bl	80015fc <RCC_Delay>
 800104c:	e01c      	b.n	8001088 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_RCC_OscConfig+0x274>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001054:	f7ff fc00 	bl	8000858 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105a:	e00f      	b.n	800107c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105c:	f7ff fbfc 	bl	8000858 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d908      	bls.n	800107c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e140      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	42420000 	.word	0x42420000
 8001078:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107c:	4b9e      	ldr	r3, [pc, #632]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e9      	bne.n	800105c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a6 	beq.w	80011e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	4b97      	ldr	r3, [pc, #604]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10d      	bne.n	80010c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a93      	ldr	r2, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b91      	ldr	r3, [pc, #580]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c2:	4b8e      	ldr	r3, [pc, #568]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ce:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a8a      	ldr	r2, [pc, #552]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010da:	f7ff fbbd 	bl	8000858 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f7ff fbb9 	bl	8000858 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b64      	cmp	r3, #100	; 0x64
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0fd      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	4b81      	ldr	r3, [pc, #516]	; (80012fc <HAL_RCC_OscConfig+0x4f8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x312>
 8001108:	4b7b      	ldr	r3, [pc, #492]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a7a      	ldr	r2, [pc, #488]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6213      	str	r3, [r2, #32]
 8001114:	e02d      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x334>
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a75      	ldr	r2, [pc, #468]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	4b73      	ldr	r3, [pc, #460]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4a72      	ldr	r2, [pc, #456]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6213      	str	r3, [r2, #32]
 8001136:	e01c      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x356>
 8001140:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6213      	str	r3, [r2, #32]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0x36e>
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	4b64      	ldr	r3, [pc, #400]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d015      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fb6d 	bl	8000858 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fb69 	bl	8000858 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0ab      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0ee      	beq.n	8001182 <HAL_RCC_OscConfig+0x37e>
 80011a4:	e014      	b.n	80011d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fb57 	bl	8000858 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb53 	bl	8000858 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e095      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ee      	bne.n	80011ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d0:	7dfb      	ldrb	r3, [r7, #23]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d105      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d6:	4b48      	ldr	r3, [pc, #288]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a47      	ldr	r2, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8081 	beq.w	80012ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d061      	beq.n	80012bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d146      	bne.n	800128e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fb27 	bl	8000858 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fb23 	bl	8000858 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e067      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d108      	bne.n	8001248 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	492d      	ldr	r1, [pc, #180]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a19      	ldr	r1, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	430b      	orrs	r3, r1
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff faf7 	bl	8000858 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126e:	f7ff faf3 	bl	8000858 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e037      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x46a>
 800128c:	e02f      	b.n	80012ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_RCC_OscConfig+0x4fc>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fae0 	bl	8000858 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fadc 	bl	8000858 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e020      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x498>
 80012ba:	e018      	b.n	80012ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e013      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	42420060 	.word	0x42420060

08001304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0d0      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d910      	bls.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4965      	ldr	r1, [pc, #404]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0b8      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800136a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001384:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	494d      	ldr	r1, [pc, #308]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d040      	beq.n	8001424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e07f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e073      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06b      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f023 0203 	bic.w	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f4:	f7ff fa30 	bl	8000858 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff fa2c 	bl	8000858 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e053      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 020c 	and.w	r2, r3, #12
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d1eb      	bne.n	80013fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d210      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 0207 	bic.w	r2, r3, #7
 800143a:	4922      	ldr	r1, [pc, #136]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e032      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4916      	ldr	r1, [pc, #88]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001492:	f000 f821 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 8001496:	4602      	mov	r2, r0
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	490a      	ldr	r1, [pc, #40]	; (80014cc <HAL_RCC_ClockConfig+0x1c8>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <HAL_RCC_ClockConfig+0x1cc>)
 80014ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_ClockConfig+0x1d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f98e 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08004324 	.word	0x08004324
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	b490      	push	{r4, r7}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014e0:	1d3c      	adds	r4, r7, #4
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e8:	f240 2301 	movw	r3, #513	; 0x201
 80014ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b04      	cmp	r3, #4
 8001510:	d002      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x40>
 8001512:	2b08      	cmp	r3, #8
 8001514:	d003      	beq.n	800151e <HAL_RCC_GetSysClockFreq+0x46>
 8001516:	e02d      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800151a:	623b      	str	r3, [r7, #32]
      break;
 800151c:	e02d      	b.n	800157a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	0c9b      	lsrs	r3, r3, #18
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800152a:	4413      	add	r3, r2
 800152c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001530:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_GetSysClockFreq+0xb4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	0c5b      	lsrs	r3, r3, #17
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800154a:	4413      	add	r3, r2
 800154c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001550:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001556:	fb02 f203 	mul.w	r2, r2, r3
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e004      	b.n	800156e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	623b      	str	r3, [r7, #32]
      break;
 8001572:	e002      	b.n	800157a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001576:	623b      	str	r3, [r7, #32]
      break;
 8001578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157a:	6a3b      	ldr	r3, [r7, #32]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bc90      	pop	{r4, r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	0800430c 	.word	0x0800430c
 800158c:	40021000 	.word	0x40021000
 8001590:	007a1200 	.word	0x007a1200
 8001594:	003d0900 	.word	0x003d0900

08001598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b0:	f7ff fff2 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08004334 	.word	0x08004334

080015d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d8:	f7ff ffde 	bl	8001598 <HAL_RCC_GetHCLKFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	0adb      	lsrs	r3, r3, #11
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	4903      	ldr	r1, [pc, #12]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08004334 	.word	0x08004334

080015fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <RCC_Delay+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <RCC_Delay+0x38>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0a5b      	lsrs	r3, r3, #9
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001618:	bf00      	nop
  }
  while (Delay --);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	60fa      	str	r2, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f9      	bne.n	8001618 <RCC_Delay+0x1c>
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000
 8001634:	10624dd3 	.word	0x10624dd3

08001638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e041      	b.n	80016ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7fe ff5e 	bl	8000520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f000 fa26 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d122      	bne.n	8001732 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d11b      	bne.n	8001732 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f06f 0202 	mvn.w	r2, #2
 8001702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f9ba 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800171e:	e005      	b.n	800172c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f9ad 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f9bc 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b04      	cmp	r3, #4
 800173e:	d122      	bne.n	8001786 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b04      	cmp	r3, #4
 800174c:	d11b      	bne.n	8001786 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f06f 0204 	mvn.w	r2, #4
 8001756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f990 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 8001772:	e005      	b.n	8001780 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f983 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f992 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b08      	cmp	r3, #8
 8001792:	d122      	bne.n	80017da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11b      	bne.n	80017da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0208 	mvn.w	r2, #8
 80017aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2204      	movs	r2, #4
 80017b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f966 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80017c6:	e005      	b.n	80017d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f959 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f968 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d122      	bne.n	800182e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d11b      	bne.n	800182e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0210 	mvn.w	r2, #16
 80017fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2208      	movs	r2, #8
 8001804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f93c 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800181a:	e005      	b.n	8001828 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f92f 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f93e 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d10e      	bne.n	800185a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0201 	mvn.w	r2, #1
 8001852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f90a 	bl	8001a6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001864:	2b80      	cmp	r3, #128	; 0x80
 8001866:	d10e      	bne.n	8001886 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b80      	cmp	r3, #128	; 0x80
 8001874:	d107      	bne.n	8001886 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800187e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fa80 	bl	8001d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d10e      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b40      	cmp	r3, #64	; 0x40
 80018a0:	d107      	bne.n	80018b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f902 	bl	8001ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d10e      	bne.n	80018de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b20      	cmp	r3, #32
 80018cc:	d107      	bne.n	80018de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f06f 0220 	mvn.w	r2, #32
 80018d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fa4b 	bl	8001d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_TIM_ConfigClockSource+0x18>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0b3      	b.n	8001a66 <HAL_TIM_ConfigClockSource+0x180>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800191c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001924:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001936:	d03e      	beq.n	80019b6 <HAL_TIM_ConfigClockSource+0xd0>
 8001938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193c:	f200 8087 	bhi.w	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 8001940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001944:	f000 8085 	beq.w	8001a52 <HAL_TIM_ConfigClockSource+0x16c>
 8001948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194c:	d87f      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 800194e:	2b70      	cmp	r3, #112	; 0x70
 8001950:	d01a      	beq.n	8001988 <HAL_TIM_ConfigClockSource+0xa2>
 8001952:	2b70      	cmp	r3, #112	; 0x70
 8001954:	d87b      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 8001956:	2b60      	cmp	r3, #96	; 0x60
 8001958:	d050      	beq.n	80019fc <HAL_TIM_ConfigClockSource+0x116>
 800195a:	2b60      	cmp	r3, #96	; 0x60
 800195c:	d877      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 800195e:	2b50      	cmp	r3, #80	; 0x50
 8001960:	d03c      	beq.n	80019dc <HAL_TIM_ConfigClockSource+0xf6>
 8001962:	2b50      	cmp	r3, #80	; 0x50
 8001964:	d873      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d058      	beq.n	8001a1c <HAL_TIM_ConfigClockSource+0x136>
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d86f      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 800196e:	2b30      	cmp	r3, #48	; 0x30
 8001970:	d064      	beq.n	8001a3c <HAL_TIM_ConfigClockSource+0x156>
 8001972:	2b30      	cmp	r3, #48	; 0x30
 8001974:	d86b      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 8001976:	2b20      	cmp	r3, #32
 8001978:	d060      	beq.n	8001a3c <HAL_TIM_ConfigClockSource+0x156>
 800197a:	2b20      	cmp	r3, #32
 800197c:	d867      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d05c      	beq.n	8001a3c <HAL_TIM_ConfigClockSource+0x156>
 8001982:	2b10      	cmp	r3, #16
 8001984:	d05a      	beq.n	8001a3c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001986:	e062      	b.n	8001a4e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f000 f96f 	bl	8001c7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	609a      	str	r2, [r3, #8]
      break;
 80019b4:	e04e      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f000 f958 	bl	8001c7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d8:	609a      	str	r2, [r3, #8]
      break;
 80019da:	e03b      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	461a      	mov	r2, r3
 80019ea:	f000 f8cf 	bl	8001b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2150      	movs	r1, #80	; 0x50
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f926 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 80019fa:	e02b      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f000 f8ed 	bl	8001be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2160      	movs	r1, #96	; 0x60
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f916 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 8001a1a:	e01b      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f000 f8af 	bl	8001b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2140      	movs	r1, #64	; 0x40
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f906 	bl	8001c46 <TIM_ITRx_SetConfig>
      break;
 8001a3a:	e00b      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 f8fd 	bl	8001c46 <TIM_ITRx_SetConfig>
        break;
 8001a4c:	e002      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a4e:	bf00      	nop
 8001a50:	e000      	b.n	8001a54 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00b      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae6:	d007      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d103      	bne.n	8001b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	615a      	str	r2, [r3, #20]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f023 0201 	bic.w	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f023 030a 	bic.w	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	621a      	str	r2, [r3, #32]
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 0210 	bic.w	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	031b      	lsls	r3, r3, #12
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	621a      	str	r2, [r3, #32]
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f043 0307 	orr.w	r3, r3, #7
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	021a      	lsls	r2, r3, #8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e046      	b.n	8001d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d009      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10c      	bne.n	8001d4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800

08001d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e03f      	b.n	8001e2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fbd4 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f9a7 	bl	8002130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b08a      	sub	sp, #40	; 0x28
 8001e36:	af02      	add	r7, sp, #8
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d17c      	bne.n	8001f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_UART_Transmit+0x2c>
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e075      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_UART_Transmit+0x3e>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e06e      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2221      	movs	r2, #33	; 0x21
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e86:	f7fe fce7 	bl	8000858 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_UART_Transmit+0x82>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	e003      	b.n	8001ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ec4:	e02a      	b.n	8001f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f8e2 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e036      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e007      	b.n	8001f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1cf      	bne.n	8001ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f8b2 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b08a      	sub	sp, #40	; 0x28
 8001f5a:	af02      	add	r7, sp, #8
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	f040 808c 	bne.w	8002090 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_UART_Receive+0x2e>
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e084      	b.n	8002092 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_UART_Receive+0x40>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e07d      	b.n	8002092 <HAL_UART_Receive+0x13c>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2222      	movs	r2, #34	; 0x22
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fc51 	bl	8000858 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Receive+0x8a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ff0:	e043      	b.n	800207a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f84c 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e042      	b.n	8002092 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	b29b      	uxth	r3, r3
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	b29a      	uxth	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3302      	adds	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e01f      	b.n	800206c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002034:	d007      	beq.n	8002046 <HAL_UART_Receive+0xf0>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <HAL_UART_Receive+0xfe>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e008      	b.n	8002066 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002060:	b2da      	uxtb	r2, r3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1b6      	bne.n	8001ff2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020aa:	e02c      	b.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d028      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x30>
 80020ba:	f7fe fbcd 	bl	8000858 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d21d      	bcs.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e00f      	b.n	8002126 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4013      	ands	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	429a      	cmp	r2, r3
 8002122:	d0c3      	beq.n	80020ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800216a:	f023 030c 	bic.w	r3, r3, #12
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	430b      	orrs	r3, r1
 8002176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <UART_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002198:	f7ff fa1c 	bl	80015d4 <HAL_RCC_GetPCLK2Freq>
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	e002      	b.n	80021a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021a0:	f7ff fa04 	bl	80015ac <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <UART_SetConfig+0x118>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	0119      	lsls	r1, r3, #4
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	009a      	lsls	r2, r3, #2
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <UART_SetConfig+0x118>)
 80021de:	fba3 0302 	umull	r0, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2064      	movs	r0, #100	; 0x64
 80021e6:	fb00 f303 	mul.w	r3, r0, r3
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	3332      	adds	r3, #50	; 0x32
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <UART_SetConfig+0x118>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	4419      	add	r1, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	009a      	lsls	r2, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fbb2 f2f3 	udiv	r2, r2, r3
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <UART_SetConfig+0x118>)
 8002216:	fba3 0302 	umull	r0, r3, r3, r2
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2064      	movs	r0, #100	; 0x64
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3332      	adds	r3, #50	; 0x32
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <UART_SetConfig+0x118>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	440a      	add	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013800 	.word	0x40013800
 8002248:	51eb851f 	.word	0x51eb851f

0800224c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800225a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225e:	2b84      	cmp	r3, #132	; 0x84
 8002260:	d005      	beq.n	800226e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4413      	add	r3, r2
 800226a:	3303      	adds	r3, #3
 800226c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800227e:	f000 ff23 	bl	80030c8 <vTaskStartScheduler>
  
  return osOK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}

08002288 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af04      	add	r7, sp, #16
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <osThreadCreate+0x54>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01c      	beq.n	80022dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685c      	ldr	r4, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681d      	ldr	r5, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691e      	ldr	r6, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ffc9 	bl	800224c <makeFreeRtosPriority>
 80022ba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022c4:	9202      	str	r2, [sp, #8]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9100      	str	r1, [sp, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4632      	mov	r2, r6
 80022ce:	4629      	mov	r1, r5
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 fd3b 	bl	8002d4c <xTaskCreateStatic>
 80022d6:	4603      	mov	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e01c      	b.n	8002316 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685c      	ldr	r4, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e8:	b29e      	uxth	r6, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ffab 	bl	800224c <makeFreeRtosPriority>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	9200      	str	r2, [sp, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4632      	mov	r2, r6
 8002304:	4629      	mov	r1, r5
 8002306:	4620      	mov	r0, r4
 8002308:	f000 fd7c 	bl	8002e04 <xTaskCreate>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002320 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <osDelay+0x16>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	e000      	b.n	8002338 <osDelay+0x18>
 8002336:	2301      	movs	r3, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fe91 	bl	8003060 <vTaskDelay>
  
  return osOK;
 800233e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b085      	sub	sp, #20
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d011      	beq.n	800237e <osMessageCreate+0x36>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2400      	movs	r4, #0
 8002374:	9400      	str	r4, [sp, #0]
 8002376:	f000 f927 	bl	80025c8 <xQueueGenericCreateStatic>
 800237a:	4603      	mov	r3, r0
 800237c:	e008      	b.n	8002390 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	f000 f994 	bl	80026b6 <xQueueGenericCreate>
 800238e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0208 	add.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 0208 	add.w	r2, r3, #8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0208 	add.w	r2, r3, #8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d103      	bne.n	8002454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e00c      	b.n	800246e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3308      	adds	r3, #8
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e002      	b.n	8002462 <vListInsert+0x2e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d2f6      	bcs.n	800245c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d103      	bne.n	80024d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002522:	f001 fbd3 	bl	8003ccc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	441a      	add	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	3b01      	subs	r3, #1
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	441a      	add	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d114      	bne.n	80025a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01a      	beq.n	80025b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3310      	adds	r3, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f000 ffe5 	bl	8003554 <xTaskRemoveFromEventList>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <xQueueGenericReset+0xcc>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	e009      	b.n	80025b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3310      	adds	r3, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fef6 	bl	8002398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3324      	adds	r3, #36	; 0x24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fef1 	bl	8002398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025b6:	f001 fbb9 	bl	8003d2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <xQueueGenericCreateStatic+0x52>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <xQueueGenericCreateStatic+0x56>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <xQueueGenericCreateStatic+0x58>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	623b      	str	r3, [r7, #32]
}
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <xQueueGenericCreateStatic+0x7e>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <xQueueGenericCreateStatic+0x82>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <xQueueGenericCreateStatic+0x84>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61fb      	str	r3, [r7, #28]
}
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002666:	2348      	movs	r3, #72	; 0x48
 8002668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b48      	cmp	r3, #72	; 0x48
 800266e:	d00a      	beq.n	8002686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002698:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f843 	bl	8002732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08a      	sub	sp, #40	; 0x28
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	613b      	str	r3, [r7, #16]
}
 80026dc:	bf00      	nop
 80026de:	e7fe      	b.n	80026de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e004      	b.n	80026f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3348      	adds	r3, #72	; 0x48
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fba8 	bl	8003e50 <pvPortMalloc>
 8002700:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00f      	beq.n	8002728 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3348      	adds	r3, #72	; 0x48
 800270c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002716:	79fa      	ldrb	r2, [r7, #7]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f805 	bl	8002732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002728:	69bb      	ldr	r3, [r7, #24]
	}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e002      	b.n	8002754 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002760:	2101      	movs	r1, #1
 8002762:	69b8      	ldr	r0, [r7, #24]
 8002764:	f7ff fec8 	bl	80024f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSend+0x32>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <xQueueGenericSend+0x40>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <xQueueGenericSend+0x44>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <xQueueGenericSend+0x46>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueGenericSend+0x60>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x6e>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <xQueueGenericSend+0x72>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueGenericSend+0x74>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericSend+0x8e>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fe:	f001 f869 	bl	80038d4 <xTaskGetSchedulerState>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <xQueueGenericSend+0x9e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <xQueueGenericSend+0xa2>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueGenericSend+0xa4>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSend+0xbe>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61fb      	str	r3, [r7, #28]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282e:	f001 fa4d 	bl	8003ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <xQueueGenericSend+0xd4>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d129      	bne.n	8002898 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 f96f 	bl	8002b2c <prvCopyDataToQueue>
 800284e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fe79 	bl	8003554 <xTaskRemoveFromEventList>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <xQueueGenericSend+0x1f8>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	e00a      	b.n	8002890 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002890:	f001 fa4c 	bl	8003d2c <vPortExitCritical>
				return pdPASS;
 8002894:	2301      	movs	r3, #1
 8002896:	e063      	b.n	8002960 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800289e:	f001 fa45 	bl	8003d2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e05c      	b.n	8002960 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 feb1 	bl	8003618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ba:	f001 fa37 	bl	8003d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028be:	f000 fc63 	bl	8003188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c2:	f001 fa03 	bl	8003ccc <vPortEnterCritical>
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d103      	bne.n	80028dc <xQueueGenericSend+0x16c>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSend+0x182>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f2:	f001 fa1b 	bl	8003d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f6:	1d3a      	adds	r2, r7, #4
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fea0 	bl	8003644 <xTaskCheckForTimeOut>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d124      	bne.n	8002954 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800290a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290c:	f000 fa06 	bl	8002d1c <prvIsQueueFull>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	3310      	adds	r3, #16
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fdf4 	bl	800350c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002926:	f000 f991 	bl	8002c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800292a:	f000 fc3b 	bl	80031a4 <xTaskResumeAll>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f af7c 	bne.w	800282e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	e772      	b.n	800282e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 f97f 	bl	8002c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294e:	f000 fc29 	bl	80031a4 <xTaskResumeAll>
 8002952:	e76c      	b.n	800282e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002956:	f000 f979 	bl	8002c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800295a:	f000 fc23 	bl	80031a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800295e:	2300      	movs	r3, #0
		}
	}
}
 8002960:	4618      	mov	r0, r3
 8002962:	3738      	adds	r7, #56	; 0x38
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <xQueueReceive+0x30>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	623b      	str	r3, [r7, #32]
}
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <xQueueReceive+0x3e>
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <xQueueReceive+0x42>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueReceive+0x44>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueReceive+0x5e>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61fb      	str	r3, [r7, #28]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ca:	f000 ff83 	bl	80038d4 <xTaskGetSchedulerState>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <xQueueReceive+0x6e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueReceive+0x72>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueReceive+0x74>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueReceive+0x8e>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61bb      	str	r3, [r7, #24]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80029fa:	f001 f967 	bl	8003ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01f      	beq.n	8002a4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f8f7 	bl	8002c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00f      	beq.n	8002a42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	3310      	adds	r3, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fd94 	bl	8003554 <xTaskRemoveFromEventList>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <xQueueReceive+0x1bc>)
 8002a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a42:	f001 f973 	bl	8003d2c <vPortExitCritical>
				return pdPASS;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e069      	b.n	8002b1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a50:	f001 f96c 	bl	8003d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e062      	b.n	8002b1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a5e:	f107 0310 	add.w	r3, r7, #16
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fdd8 	bl	8003618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a6c:	f001 f95e 	bl	8003d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a70:	f000 fb8a 	bl	8003188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a74:	f001 f92a 	bl	8003ccc <vPortEnterCritical>
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d103      	bne.n	8002a8e <xQueueReceive+0x122>
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d103      	bne.n	8002aa4 <xQueueReceive+0x138>
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aa4:	f001 f942 	bl	8003d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aa8:	1d3a      	adds	r2, r7, #4
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fdc7 	bl	8003644 <xTaskCheckForTimeOut>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d123      	bne.n	8002b04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002abe:	f000 f917 	bl	8002cf0 <prvIsQueueEmpty>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d017      	beq.n	8002af8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fd1b 	bl	800350c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad8:	f000 f8b8 	bl	8002c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002adc:	f000 fb62 	bl	80031a4 <xTaskResumeAll>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d189      	bne.n	80029fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <xQueueReceive+0x1bc>)
 8002ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	e780      	b.n	80029fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afa:	f000 f8a7 	bl	8002c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002afe:	f000 fb51 	bl	80031a4 <xTaskResumeAll>
 8002b02:	e77a      	b.n	80029fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b06:	f000 f8a1 	bl	8002c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b0a:	f000 fb4b 	bl	80031a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b10:	f000 f8ee 	bl	8002cf0 <prvIsQueueEmpty>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f43f af6f 	beq.w	80029fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d14d      	bne.n	8002bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 feda 	bl	8003910 <xTaskPriorityDisinherit>
 8002b5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	e043      	b.n	8002bee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d119      	bne.n	8002ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	461a      	mov	r2, r3
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	f001 fb66 	bl	8004248 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	441a      	add	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d32b      	bcc.n	8002bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	e026      	b.n	8002bee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68d8      	ldr	r0, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	f001 fb4c 	bl	8004248 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	425b      	negs	r3, r3
 8002bba:	441a      	add	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d207      	bcs.n	8002bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d105      	bne.n	8002bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d303      	bcc.n	8002c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	6838      	ldr	r0, [r7, #0]
 8002c40:	f001 fb02 	bl	8004248 <memcpy>
	}
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c54:	f001 f83a 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c60:	e011      	b.n	8002c86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3324      	adds	r3, #36	; 0x24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fc70 	bl	8003554 <xTaskRemoveFromEventList>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c7a:	f000 fd45 	bl	8003708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	dce9      	bgt.n	8002c62 <prvUnlockQueue+0x16>
 8002c8e:	e000      	b.n	8002c92 <prvUnlockQueue+0x46>
					break;
 8002c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c9a:	f001 f847 	bl	8003d2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c9e:	f001 f815 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002caa:	e011      	b.n	8002cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fc4b 	bl	8003554 <xTaskRemoveFromEventList>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002cc4:	f000 fd20 	bl	8003708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cc8:	7bbb      	ldrb	r3, [r7, #14]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	dce9      	bgt.n	8002cac <prvUnlockQueue+0x60>
 8002cd8:	e000      	b.n	8002cdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	22ff      	movs	r2, #255	; 0xff
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ce4:	f001 f822 	bl	8003d2c <vPortExitCritical>
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cf8:	f000 ffe8 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e001      	b.n	8002d0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d0e:	f001 f80d 	bl	8003d2c <vPortExitCritical>

	return xReturn;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d24:	f000 ffd2 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d102      	bne.n	8002d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e001      	b.n	8002d3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d3e:	f000 fff5 	bl	8003d2c <vPortExitCritical>

	return xReturn;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	; 0x38
 8002d50:	af04      	add	r7, sp, #16
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	623b      	str	r3, [r7, #32]
}
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61fb      	str	r3, [r7, #28]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d92:	2354      	movs	r3, #84	; 0x54
 8002d94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b54      	cmp	r3, #84	; 0x54
 8002d9a:	d00a      	beq.n	8002db2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	61bb      	str	r3, [r7, #24]
}
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01e      	beq.n	8002df6 <xTaskCreateStatic+0xaa>
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	9302      	str	r3, [sp, #8]
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f850 	bl	8002e8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002df0:	f000 f8cc 	bl	8002f8c <prvAddNewTaskToReadyList>
 8002df4:	e001      	b.n	8002dfa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dfa:	697b      	ldr	r3, [r7, #20]
	}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 f819 	bl	8003e50 <pvPortMalloc>
 8002e1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e26:	2054      	movs	r0, #84	; 0x54
 8002e28:	f001 f812 	bl	8003e50 <pvPortMalloc>
 8002e2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3a:	e005      	b.n	8002e48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e3c:	6978      	ldr	r0, [r7, #20]
 8002e3e:	f001 f8cb 	bl	8003fd8 <vPortFree>
 8002e42:	e001      	b.n	8002e48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9303      	str	r3, [sp, #12]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	9302      	str	r3, [sp, #8]
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f80e 	bl	8002e8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e72:	69f8      	ldr	r0, [r7, #28]
 8002e74:	f000 f88a 	bl	8002f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	e002      	b.n	8002e84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e84:	69bb      	ldr	r3, [r7, #24]
	}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f023 0307 	bic.w	r3, r3, #7
 8002eb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	617b      	str	r3, [r7, #20]
}
 8002ed2:	bf00      	nop
 8002ed4:	e7fe      	b.n	8002ed4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e012      	b.n	8002f02 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	7819      	ldrb	r1, [r3, #0]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3334      	adds	r3, #52	; 0x34
 8002eec:	460a      	mov	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d9e9      	bls.n	8002edc <prvInitialiseNewTask+0x4e>
 8002f08:	e000      	b.n	8002f0c <prvInitialiseNewTask+0x7e>
		{
			break;
 8002f0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d901      	bls.n	8002f1e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	3304      	adds	r3, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fa4e 	bl	80023d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	3318      	adds	r3, #24
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fa49 	bl	80023d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	f1c3 0207 	rsb	r2, r3, #7
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	69b8      	ldr	r0, [r7, #24]
 8002f6e:	f000 fdbb 	bl	8003ae8 <pxPortInitialiseStack>
 8002f72:	4602      	mov	r2, r0
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f94:	f000 fe9a 	bl	8003ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <prvAddNewTaskToReadyList+0xb8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a29      	ldr	r2, [pc, #164]	; (8003044 <prvAddNewTaskToReadyList+0xb8>)
 8002fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <prvAddNewTaskToReadyList+0xbc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002faa:	4a27      	ldr	r2, [pc, #156]	; (8003048 <prvAddNewTaskToReadyList+0xbc>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <prvAddNewTaskToReadyList+0xb8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d110      	bne.n	8002fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fb8:	f000 fbca 	bl	8003750 <prvInitialiseTaskLists>
 8002fbc:	e00d      	b.n	8002fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <prvAddNewTaskToReadyList+0xc0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <prvAddNewTaskToReadyList+0xbc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d802      	bhi.n	8002fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <prvAddNewTaskToReadyList+0xbc>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <prvAddNewTaskToReadyList+0xc4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <prvAddNewTaskToReadyList+0xc4>)
 8002fe2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <prvAddNewTaskToReadyList+0xc8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	4a18      	ldr	r2, [pc, #96]	; (8003054 <prvAddNewTaskToReadyList+0xc8>)
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <prvAddNewTaskToReadyList+0xcc>)
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f7ff f9ee 	bl	80023ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003012:	f000 fe8b 	bl	8003d2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <prvAddNewTaskToReadyList+0xc0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <prvAddNewTaskToReadyList+0xbc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <prvAddNewTaskToReadyList+0xd0>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000380 	.word	0x20000380
 8003048:	20000280 	.word	0x20000280
 800304c:	2000038c 	.word	0x2000038c
 8003050:	2000039c 	.word	0x2000039c
 8003054:	20000388 	.word	0x20000388
 8003058:	20000284 	.word	0x20000284
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d017      	beq.n	80030a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003072:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <vTaskDelay+0x60>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <vTaskDelay+0x30>
	__asm volatile
 800307a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307e:	f383 8811 	msr	BASEPRI, r3
 8003082:	f3bf 8f6f 	isb	sy
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	60bb      	str	r3, [r7, #8]
}
 800308c:	bf00      	nop
 800308e:	e7fe      	b.n	800308e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003090:	f000 f87a 	bl	8003188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003094:	2100      	movs	r1, #0
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fcc0 	bl	8003a1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800309c:	f000 f882 	bl	80031a4 <xTaskResumeAll>
 80030a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <vTaskDelay+0x64>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200003a8 	.word	0x200003a8
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030d6:	463a      	mov	r2, r7
 80030d8:	1d39      	adds	r1, r7, #4
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f83e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	9202      	str	r2, [sp, #8]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2300      	movs	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	460a      	mov	r2, r1
 80030f6:	491e      	ldr	r1, [pc, #120]	; (8003170 <vTaskStartScheduler+0xa8>)
 80030f8:	481e      	ldr	r0, [pc, #120]	; (8003174 <vTaskStartScheduler+0xac>)
 80030fa:	f7ff fe27 	bl	8002d4c <xTaskCreateStatic>
 80030fe:	4603      	mov	r3, r0
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <vTaskStartScheduler+0xb0>)
 8003102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <vTaskStartScheduler+0xb0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e001      	b.n	8003116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d116      	bne.n	800314a <vTaskStartScheduler+0x82>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	613b      	str	r3, [r7, #16]
}
 800312e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <vTaskStartScheduler+0xb4>)
 8003132:	f04f 32ff 	mov.w	r2, #4294967295
 8003136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003138:	4b11      	ldr	r3, [pc, #68]	; (8003180 <vTaskStartScheduler+0xb8>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <vTaskStartScheduler+0xbc>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003144:	f000 fd50 	bl	8003be8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003148:	e00e      	b.n	8003168 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d10a      	bne.n	8003168 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60fb      	str	r3, [r7, #12]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <vTaskStartScheduler+0x9e>
}
 8003168:	bf00      	nop
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	0800431c 	.word	0x0800431c
 8003174:	08003721 	.word	0x08003721
 8003178:	200003a4 	.word	0x200003a4
 800317c:	200003a0 	.word	0x200003a0
 8003180:	2000038c 	.word	0x2000038c
 8003184:	20000384 	.word	0x20000384

08003188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <vTaskSuspendAll+0x18>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <vTaskSuspendAll+0x18>)
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	200003a8 	.word	0x200003a8

080031a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <xTaskResumeAll+0x114>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	603b      	str	r3, [r7, #0]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031d0:	f000 fd7c 	bl	8003ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031d4:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <xTaskResumeAll+0x114>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <xTaskResumeAll+0x114>)
 80031dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <xTaskResumeAll+0x114>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d161      	bne.n	80032aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <xTaskResumeAll+0x118>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d05d      	beq.n	80032aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ee:	e02e      	b.n	800324e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <xTaskResumeAll+0x11c>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3318      	adds	r3, #24
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff f951 	bl	80024a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3304      	adds	r3, #4
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f94c 	bl	80024a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <xTaskResumeAll+0x120>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <xTaskResumeAll+0x120>)
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <xTaskResumeAll+0x124>)
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3304      	adds	r3, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f7ff f8da 	bl	80023ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4b23      	ldr	r3, [pc, #140]	; (80032cc <xTaskResumeAll+0x128>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <xTaskResumeAll+0x12c>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <xTaskResumeAll+0x11c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cc      	bne.n	80031f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800325c:	f000 fb16 	bl	800388c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003260:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <xTaskResumeAll+0x130>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800326c:	f000 f836 	bl	80032dc <xTaskIncrementTick>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <xTaskResumeAll+0x12c>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f1      	bne.n	800326c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <xTaskResumeAll+0x130>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <xTaskResumeAll+0x12c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003296:	2301      	movs	r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <xTaskResumeAll+0x134>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032aa:	f000 fd3f 	bl	8003d2c <vPortExitCritical>

	return xAlreadyYielded;
 80032ae:	68bb      	ldr	r3, [r7, #8]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200003a8 	.word	0x200003a8
 80032bc:	20000380 	.word	0x20000380
 80032c0:	20000340 	.word	0x20000340
 80032c4:	20000388 	.word	0x20000388
 80032c8:	20000284 	.word	0x20000284
 80032cc:	20000280 	.word	0x20000280
 80032d0:	20000394 	.word	0x20000394
 80032d4:	20000390 	.word	0x20000390
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <xTaskIncrementTick+0x150>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 808d 	bne.w	800340a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <xTaskIncrementTick+0x154>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3301      	adds	r3, #1
 80032f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <xTaskIncrementTick+0x154>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d120      	bne.n	8003346 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <xTaskIncrementTick+0x158>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <xTaskIncrementTick+0x48>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	603b      	str	r3, [r7, #0]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <xTaskIncrementTick+0x46>
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <xTaskIncrementTick+0x158>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <xTaskIncrementTick+0x15c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a41      	ldr	r2, [pc, #260]	; (8003434 <xTaskIncrementTick+0x158>)
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4a41      	ldr	r2, [pc, #260]	; (8003438 <xTaskIncrementTick+0x15c>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b40      	ldr	r3, [pc, #256]	; (800343c <xTaskIncrementTick+0x160>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a3f      	ldr	r2, [pc, #252]	; (800343c <xTaskIncrementTick+0x160>)
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	f000 faa3 	bl	800388c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <xTaskIncrementTick+0x164>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d34d      	bcc.n	80033ec <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003350:	4b38      	ldr	r3, [pc, #224]	; (8003434 <xTaskIncrementTick+0x158>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xTaskIncrementTick+0x82>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xTaskIncrementTick+0x84>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <xTaskIncrementTick+0x164>)
 8003366:	f04f 32ff 	mov.w	r2, #4294967295
 800336a:	601a      	str	r2, [r3, #0]
					break;
 800336c:	e03e      	b.n	80033ec <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <xTaskIncrementTick+0x158>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d203      	bcs.n	800338e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003386:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <xTaskIncrementTick+0x164>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6013      	str	r3, [r2, #0]
						break;
 800338c:	e02e      	b.n	80033ec <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3304      	adds	r3, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f886 	bl	80024a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3318      	adds	r3, #24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f87d 	bl	80024a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	2201      	movs	r2, #1
 80033b0:	409a      	lsls	r2, r3
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <xTaskIncrementTick+0x168>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	4a22      	ldr	r2, [pc, #136]	; (8003444 <xTaskIncrementTick+0x168>)
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4a1f      	ldr	r2, [pc, #124]	; (8003448 <xTaskIncrementTick+0x16c>)
 80033ca:	441a      	add	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7ff f80b 	bl	80023ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4b1b      	ldr	r3, [pc, #108]	; (800344c <xTaskIncrementTick+0x170>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3b4      	bcc.n	8003350 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033e6:	2301      	movs	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ea:	e7b1      	b.n	8003350 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <xTaskIncrementTick+0x170>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4915      	ldr	r1, [pc, #84]	; (8003448 <xTaskIncrementTick+0x16c>)
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d907      	bls.n	8003414 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
 8003408:	e004      	b.n	8003414 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <xTaskIncrementTick+0x174>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <xTaskIncrementTick+0x174>)
 8003412:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <xTaskIncrementTick+0x178>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200003a8 	.word	0x200003a8
 8003430:	20000384 	.word	0x20000384
 8003434:	20000338 	.word	0x20000338
 8003438:	2000033c 	.word	0x2000033c
 800343c:	20000398 	.word	0x20000398
 8003440:	200003a0 	.word	0x200003a0
 8003444:	20000388 	.word	0x20000388
 8003448:	20000284 	.word	0x20000284
 800344c:	20000280 	.word	0x20000280
 8003450:	20000390 	.word	0x20000390
 8003454:	20000394 	.word	0x20000394

08003458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <vTaskSwitchContext+0xa0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <vTaskSwitchContext+0xa4>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800346c:	e03f      	b.n	80034ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <vTaskSwitchContext+0xa4>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <vTaskSwitchContext+0xa8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	f1c3 031f 	rsb	r3, r3, #31
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	491e      	ldr	r1, [pc, #120]	; (8003504 <vTaskSwitchContext+0xac>)
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10a      	bne.n	80034b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	607b      	str	r3, [r7, #4]
}
 80034b0:	bf00      	nop
 80034b2:	e7fe      	b.n	80034b2 <vTaskSwitchContext+0x5a>
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <vTaskSwitchContext+0xac>)
 80034c0:	4413      	add	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	3308      	adds	r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d104      	bne.n	80034e4 <vTaskSwitchContext+0x8c>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <vTaskSwitchContext+0xb0>)
 80034ec:	6013      	str	r3, [r2, #0]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	200003a8 	.word	0x200003a8
 80034fc:	20000394 	.word	0x20000394
 8003500:	20000388 	.word	0x20000388
 8003504:	20000284 	.word	0x20000284
 8003508:	20000280 	.word	0x20000280

0800350c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60fb      	str	r3, [r7, #12]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <vTaskPlaceOnEventList+0x44>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3318      	adds	r3, #24
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe ff7a 	bl	8002434 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003540:	2101      	movs	r1, #1
 8003542:	6838      	ldr	r0, [r7, #0]
 8003544:	f000 fa6a 	bl	8003a1c <prvAddCurrentTaskToDelayedList>
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000280 	.word	0x20000280

08003554 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60fb      	str	r3, [r7, #12]
}
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	3318      	adds	r3, #24
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe ff8d 	bl	80024a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <xTaskRemoveFromEventList+0xac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11c      	bne.n	80035cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe ff84 	bl	80024a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <xTaskRemoveFromEventList+0xb0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <xTaskRemoveFromEventList+0xb0>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <xTaskRemoveFromEventList+0xb4>)
 80035bc:	441a      	add	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fe ff12 	bl	80023ee <vListInsertEnd>
 80035ca:	e005      	b.n	80035d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4619      	mov	r1, r3
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <xTaskRemoveFromEventList+0xb8>)
 80035d4:	f7fe ff0b 	bl	80023ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <xTaskRemoveFromEventList+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d905      	bls.n	80035f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <xTaskRemoveFromEventList+0xc0>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e001      	b.n	80035f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80035f6:	697b      	ldr	r3, [r7, #20]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	200003a8 	.word	0x200003a8
 8003604:	20000388 	.word	0x20000388
 8003608:	20000284 	.word	0x20000284
 800360c:	20000340 	.word	0x20000340
 8003610:	20000280 	.word	0x20000280
 8003614:	20000394 	.word	0x20000394

08003618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <vTaskInternalSetTimeOutState+0x24>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <vTaskInternalSetTimeOutState+0x28>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000398 	.word	0x20000398
 8003640:	20000384 	.word	0x20000384

08003644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003686:	f000 fb21 	bl	8003ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <xTaskCheckForTimeOut+0xbc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d102      	bne.n	80036aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e023      	b.n	80036f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <xTaskCheckForTimeOut+0xc0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d007      	beq.n	80036c6 <xTaskCheckForTimeOut+0x82>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	e015      	b.n	80036f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d20b      	bcs.n	80036e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff9b 	bl	8003618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e004      	b.n	80036f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036f2:	f000 fb1b 	bl	8003d2c <vPortExitCritical>

	return xReturn;
 80036f6:	69fb      	ldr	r3, [r7, #28]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000384 	.word	0x20000384
 8003704:	20000398 	.word	0x20000398

08003708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <vTaskMissedYield+0x14>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000394 	.word	0x20000394

08003720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003728:	f000 f852 	bl	80037d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <prvIdleTask+0x28>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d9f9      	bls.n	8003728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <prvIdleTask+0x2c>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003744:	e7f0      	b.n	8003728 <prvIdleTask+0x8>
 8003746:	bf00      	nop
 8003748:	20000284 	.word	0x20000284
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	e00c      	b.n	8003776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <prvInitialiseTaskLists+0x60>)
 8003768:	4413      	add	r3, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fe14 	bl	8002398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d9ef      	bls.n	800375c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <prvInitialiseTaskLists+0x64>)
 800377e:	f7fe fe0b 	bl	8002398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003782:	480d      	ldr	r0, [pc, #52]	; (80037b8 <prvInitialiseTaskLists+0x68>)
 8003784:	f7fe fe08 	bl	8002398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <prvInitialiseTaskLists+0x6c>)
 800378a:	f7fe fe05 	bl	8002398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800378e:	480c      	ldr	r0, [pc, #48]	; (80037c0 <prvInitialiseTaskLists+0x70>)
 8003790:	f7fe fe02 	bl	8002398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003794:	480b      	ldr	r0, [pc, #44]	; (80037c4 <prvInitialiseTaskLists+0x74>)
 8003796:	f7fe fdff 	bl	8002398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <prvInitialiseTaskLists+0x78>)
 800379c:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <prvInitialiseTaskLists+0x64>)
 800379e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <prvInitialiseTaskLists+0x7c>)
 80037a2:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <prvInitialiseTaskLists+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000284 	.word	0x20000284
 80037b4:	20000310 	.word	0x20000310
 80037b8:	20000324 	.word	0x20000324
 80037bc:	20000340 	.word	0x20000340
 80037c0:	20000354 	.word	0x20000354
 80037c4:	2000036c 	.word	0x2000036c
 80037c8:	20000338 	.word	0x20000338
 80037cc:	2000033c 	.word	0x2000033c

080037d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037d6:	e019      	b.n	800380c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037d8:	f000 fa78 	bl	8003ccc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <prvCheckTasksWaitingTermination+0x50>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fe5b 	bl	80024a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <prvCheckTasksWaitingTermination+0x54>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <prvCheckTasksWaitingTermination+0x54>)
 80037f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <prvCheckTasksWaitingTermination+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <prvCheckTasksWaitingTermination+0x58>)
 8003800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003802:	f000 fa93 	bl	8003d2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f810 	bl	800382c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <prvCheckTasksWaitingTermination+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e1      	bne.n	80037d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000354 	.word	0x20000354
 8003824:	20000380 	.word	0x20000380
 8003828:	20000368 	.word	0x20000368

0800382c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800383a:	2b00      	cmp	r3, #0
 800383c:	d108      	bne.n	8003850 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fbc8 	bl	8003fd8 <vPortFree>
				vPortFree( pxTCB );
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fbc5 	bl	8003fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800384e:	e018      	b.n	8003882 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003856:	2b01      	cmp	r3, #1
 8003858:	d103      	bne.n	8003862 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fbbc 	bl	8003fd8 <vPortFree>
	}
 8003860:	e00f      	b.n	8003882 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003868:	2b02      	cmp	r3, #2
 800386a:	d00a      	beq.n	8003882 <prvDeleteTCB+0x56>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <prvDeleteTCB+0x54>
	}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <prvResetNextTaskUnblockTime+0x40>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <prvResetNextTaskUnblockTime+0x14>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <prvResetNextTaskUnblockTime+0x16>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <prvResetNextTaskUnblockTime+0x44>)
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038ae:	e008      	b.n	80038c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <prvResetNextTaskUnblockTime+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <prvResetNextTaskUnblockTime+0x44>)
 80038c0:	6013      	str	r3, [r2, #0]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	20000338 	.word	0x20000338
 80038d0:	200003a0 	.word	0x200003a0

080038d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <xTaskGetSchedulerState+0x34>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038e2:	2301      	movs	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	e008      	b.n	80038fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <xTaskGetSchedulerState+0x38>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038f0:	2302      	movs	r3, #2
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e001      	b.n	80038fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038fa:	687b      	ldr	r3, [r7, #4]
	}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000038c 	.word	0x2000038c
 800390c:	200003a8 	.word	0x200003a8

08003910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06e      	beq.n	8003a04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <xTaskPriorityDisinherit+0x100>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d00a      	beq.n	8003946 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
}
 8003960:	bf00      	nop
 8003962:	e7fe      	b.n	8003962 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	429a      	cmp	r2, r3
 8003978:	d044      	beq.n	8003a04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d140      	bne.n	8003a04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fd8c 	bl	80024a4 <uxListRemove>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	491f      	ldr	r1, [pc, #124]	; (8003a14 <xTaskPriorityDisinherit+0x104>)
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTaskPriorityDisinherit+0xae>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	2201      	movs	r2, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43da      	mvns	r2, r3
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <xTaskPriorityDisinherit+0x108>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4013      	ands	r3, r2
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <xTaskPriorityDisinherit+0x108>)
 80039bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f1c3 0207 	rsb	r2, r3, #7
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <xTaskPriorityDisinherit+0x108>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <xTaskPriorityDisinherit+0x108>)
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <xTaskPriorityDisinherit+0x104>)
 80039f2:	441a      	add	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7fe fcf7 	bl	80023ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
	}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000280 	.word	0x20000280
 8003a14:	20000284 	.word	0x20000284
 8003a18:	20000388 	.word	0x20000388

08003a1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fd36 	bl	80024a4 <uxListRemove>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4013      	ands	r3, r2
 8003a52:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d10a      	bne.n	8003a74 <prvAddCurrentTaskToDelayedList+0x58>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a6e:	f7fe fcbe 	bl	80023ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a72:	e026      	b.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d209      	bcs.n	8003aa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7fe fccb 	bl	8002434 <vListInsert>
}
 8003a9e:	e010      	b.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fe fcc1 	bl	8002434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d202      	bcs.n	8003ac2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003abc:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000384 	.word	0x20000384
 8003ad0:	20000280 	.word	0x20000280
 8003ad4:	20000388 	.word	0x20000388
 8003ad8:	2000036c 	.word	0x2000036c
 8003adc:	2000033c 	.word	0x2000033c
 8003ae0:	20000338 	.word	0x20000338
 8003ae4:	200003a0 	.word	0x200003a0

08003ae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3b04      	subs	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3b04      	subs	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f023 0201 	bic.w	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3b04      	subs	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <pxPortInitialiseStack+0x54>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3b14      	subs	r3, #20
 8003b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3b20      	subs	r3, #32
 8003b2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	08003b41 	.word	0x08003b41

08003b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <prvTaskExitError+0x54>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d00a      	beq.n	8003b6a <prvTaskExitError+0x2a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <prvTaskExitError+0x28>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60bb      	str	r3, [r7, #8]
}
 8003b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b7e:	bf00      	nop
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0fc      	beq.n	8003b80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2000000c 	.word	0x2000000c
	...

08003ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <pxCurrentTCBConst2>)
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003baa:	f380 8809 	msr	PSP, r0
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8811 	msr	BASEPRI, r0
 8003bba:	f04e 0e0d 	orr.w	lr, lr, #13
 8003bbe:	4770      	bx	lr

08003bc0 <pxCurrentTCBConst2>:
 8003bc0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop

08003bc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003bc8:	4806      	ldr	r0, [pc, #24]	; (8003be4 <prvPortStartFirstTask+0x1c>)
 8003bca:	6800      	ldr	r0, [r0, #0]
 8003bcc:	6800      	ldr	r0, [r0, #0]
 8003bce:	f380 8808 	msr	MSP, r0
 8003bd2:	b662      	cpsie	i
 8003bd4:	b661      	cpsie	f
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	df00      	svc	0
 8003be0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003be2:	bf00      	nop
 8003be4:	e000ed08 	.word	0xe000ed08

08003be8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <xPortStartScheduler+0xd0>)
 8003bf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	22ff      	movs	r2, #255	; 0xff
 8003bfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <xPortStartScheduler+0xd4>)
 8003c14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c18:	2207      	movs	r2, #7
 8003c1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c1c:	e009      	b.n	8003c32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003c1e:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d0ef      	beq.n	8003c1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1c3 0307 	rsb	r3, r3, #7
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d00a      	beq.n	8003c60 <xPortStartScheduler+0x78>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60bb      	str	r3, [r7, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <xPortStartScheduler+0xd8>)
 8003c74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <xPortStartScheduler+0xdc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <xPortStartScheduler+0xdc>)
 8003c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <xPortStartScheduler+0xdc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <xPortStartScheduler+0xdc>)
 8003c90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c96:	f000 f8b9 	bl	8003e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <xPortStartScheduler+0xe0>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ca0:	f7ff ff92 	bl	8003bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ca4:	f7ff fbd8 	bl	8003458 <vTaskSwitchContext>
	prvTaskExitError();
 8003ca8:	f7ff ff4a 	bl	8003b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	e000e400 	.word	0xe000e400
 8003cbc:	200003ac 	.word	0x200003ac
 8003cc0:	200003b0 	.word	0x200003b0
 8003cc4:	e000ed20 	.word	0xe000ed20
 8003cc8:	2000000c 	.word	0x2000000c

08003ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <vPortEnterCritical+0x58>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <vPortEnterCritical+0x58>)
 8003cee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <vPortEnterCritical+0x58>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10f      	bne.n	8003d18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <vPortEnterCritical+0x5c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <vPortEnterCritical+0x4c>
	__asm volatile
 8003d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	603b      	str	r3, [r7, #0]
}
 8003d14:	bf00      	nop
 8003d16:	e7fe      	b.n	8003d16 <vPortEnterCritical+0x4a>
	}
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	2000000c 	.word	0x2000000c
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <vPortExitCritical+0x24>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	607b      	str	r3, [r7, #4]
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <vPortExitCritical+0x4c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <vPortExitCritical+0x42>
 8003d62:	2300      	movs	r3, #0
 8003d64:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	00000000 	.word	0x00000000

08003d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d90:	6010      	str	r0, [r2, #0]
 8003d92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d9a:	f380 8811 	msr	BASEPRI, r0
 8003d9e:	f7ff fb5b 	bl	8003458 <vTaskSwitchContext>
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8811 	msr	BASEPRI, r0
 8003daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003dae:	6819      	ldr	r1, [r3, #0]
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003db6:	f380 8809 	msr	PSP, r0
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	4770      	bx	lr

08003dc0 <pxCurrentTCBConst>:
 8003dc0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	607b      	str	r3, [r7, #4]
}
 8003de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003de2:	f7ff fa7b 	bl	80032dc <xTaskIncrementTick>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <xPortSysTickHandler+0x40>)
 8003dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f383 8811 	msr	BASEPRI, r3
}
 8003dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <vPortSetupTimerInterrupt+0x30>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <vPortSetupTimerInterrupt+0x34>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <vPortSetupTimerInterrupt+0x38>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <vPortSetupTimerInterrupt+0x3c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <vPortSetupTimerInterrupt+0x40>)
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e2e:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <vPortSetupTimerInterrupt+0x30>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	e000e010 	.word	0xe000e010
 8003e40:	e000e018 	.word	0xe000e018
 8003e44:	20000000 	.word	0x20000000
 8003e48:	10624dd3 	.word	0x10624dd3
 8003e4c:	e000e014 	.word	0xe000e014

08003e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e5c:	f7ff f994 	bl	8003188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e60:	4b58      	ldr	r3, [pc, #352]	; (8003fc4 <pvPortMalloc+0x174>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e68:	f000 f910 	bl	800408c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <pvPortMalloc+0x178>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f040 808e 	bne.w	8003f96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01d      	beq.n	8003ebc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e80:	2208      	movs	r2, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d014      	beq.n	8003ebc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	3308      	adds	r3, #8
 8003e9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <pvPortMalloc+0x6c>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	617b      	str	r3, [r7, #20]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d069      	beq.n	8003f96 <pvPortMalloc+0x146>
 8003ec2:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <pvPortMalloc+0x17c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d864      	bhi.n	8003f96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003ecc:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <pvPortMalloc+0x180>)
 8003ece:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ed0:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <pvPortMalloc+0x180>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ed6:	e004      	b.n	8003ee2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d903      	bls.n	8003ef4 <pvPortMalloc+0xa4>
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f1      	bne.n	8003ed8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <pvPortMalloc+0x174>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d04b      	beq.n	8003f96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	4413      	add	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	2308      	movs	r3, #8
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d91f      	bls.n	8003f60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <pvPortMalloc+0xf8>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	613b      	str	r3, [r7, #16]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f5a:	69b8      	ldr	r0, [r7, #24]
 8003f5c:	f000 f8f8 	bl	8004150 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <pvPortMalloc+0x17c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <pvPortMalloc+0x17c>)
 8003f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <pvPortMalloc+0x17c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <pvPortMalloc+0x184>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d203      	bcs.n	8003f82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <pvPortMalloc+0x17c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <pvPortMalloc+0x184>)
 8003f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <pvPortMalloc+0x178>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f96:	f7ff f905 	bl	80031a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <pvPortMalloc+0x16a>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <pvPortMalloc+0x168>
	return pvReturn;
 8003fba:	69fb      	ldr	r3, [r7, #28]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000fbc 	.word	0x20000fbc
 8003fc8:	20000fc8 	.word	0x20000fc8
 8003fcc:	20000fc0 	.word	0x20000fc0
 8003fd0:	20000fb4 	.word	0x20000fb4
 8003fd4:	20000fc4 	.word	0x20000fc4

08003fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d048      	beq.n	800407c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fea:	2308      	movs	r3, #8
 8003fec:	425b      	negs	r3, r3
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <vPortFree+0xac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <vPortFree+0x44>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60fb      	str	r3, [r7, #12]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <vPortFree+0x62>
	__asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	60bb      	str	r3, [r7, #8]
}
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <vPortFree+0xac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d019      	beq.n	800407c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d115      	bne.n	800407c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <vPortFree+0xac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004060:	f7ff f892 	bl	8003188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <vPortFree+0xb0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4413      	add	r3, r2
 800406e:	4a06      	ldr	r2, [pc, #24]	; (8004088 <vPortFree+0xb0>)
 8004070:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004072:	6938      	ldr	r0, [r7, #16]
 8004074:	f000 f86c 	bl	8004150 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004078:	f7ff f894 	bl	80031a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000fc8 	.word	0x20000fc8
 8004088:	20000fc0 	.word	0x20000fc0

0800408c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004092:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004096:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <prvHeapInit+0xac>)
 800409a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3307      	adds	r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <prvHeapInit+0xac>)
 80040bc:	4413      	add	r3, r2
 80040be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040c4:	4a1d      	ldr	r2, [pc, #116]	; (800413c <prvHeapInit+0xb0>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <prvHeapInit+0xb0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4413      	add	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040d8:	2208      	movs	r2, #8
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <prvHeapInit+0xb4>)
 80040ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <prvHeapInit+0xb4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <prvHeapInit+0xb4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	1ad2      	subs	r2, r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <prvHeapInit+0xb4>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <prvHeapInit+0xb8>)
 800411a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <prvHeapInit+0xbc>)
 8004122:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <prvHeapInit+0xc0>)
 8004126:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800412a:	601a      	str	r2, [r3, #0]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200003b4 	.word	0x200003b4
 800413c:	20000fb4 	.word	0x20000fb4
 8004140:	20000fbc 	.word	0x20000fbc
 8004144:	20000fc4 	.word	0x20000fc4
 8004148:	20000fc0 	.word	0x20000fc0
 800414c:	20000fc8 	.word	0x20000fc8

08004150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <prvInsertBlockIntoFreeList+0xa8>)
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e002      	b.n	8004164 <prvInsertBlockIntoFreeList+0x14>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d8f7      	bhi.n	800415e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d108      	bne.n	8004192 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	441a      	add	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d118      	bne.n	80041d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <prvInsertBlockIntoFreeList+0xac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d00d      	beq.n	80041ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e008      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <prvInsertBlockIntoFreeList+0xac>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e003      	b.n	80041e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d002      	beq.n	80041ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000fb4 	.word	0x20000fb4
 80041fc:	20000fbc 	.word	0x20000fbc

08004200 <__libc_init_array>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	2600      	movs	r6, #0
 8004204:	4d0c      	ldr	r5, [pc, #48]	; (8004238 <__libc_init_array+0x38>)
 8004206:	4c0d      	ldr	r4, [pc, #52]	; (800423c <__libc_init_array+0x3c>)
 8004208:	1b64      	subs	r4, r4, r5
 800420a:	10a4      	asrs	r4, r4, #2
 800420c:	42a6      	cmp	r6, r4
 800420e:	d109      	bne.n	8004224 <__libc_init_array+0x24>
 8004210:	f000 f830 	bl	8004274 <_init>
 8004214:	2600      	movs	r6, #0
 8004216:	4d0a      	ldr	r5, [pc, #40]	; (8004240 <__libc_init_array+0x40>)
 8004218:	4c0a      	ldr	r4, [pc, #40]	; (8004244 <__libc_init_array+0x44>)
 800421a:	1b64      	subs	r4, r4, r5
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	42a6      	cmp	r6, r4
 8004220:	d105      	bne.n	800422e <__libc_init_array+0x2e>
 8004222:	bd70      	pop	{r4, r5, r6, pc}
 8004224:	f855 3b04 	ldr.w	r3, [r5], #4
 8004228:	4798      	blx	r3
 800422a:	3601      	adds	r6, #1
 800422c:	e7ee      	b.n	800420c <__libc_init_array+0xc>
 800422e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004232:	4798      	blx	r3
 8004234:	3601      	adds	r6, #1
 8004236:	e7f2      	b.n	800421e <__libc_init_array+0x1e>
 8004238:	0800433c 	.word	0x0800433c
 800423c:	0800433c 	.word	0x0800433c
 8004240:	0800433c 	.word	0x0800433c
 8004244:	08004340 	.word	0x08004340

08004248 <memcpy>:
 8004248:	440a      	add	r2, r1
 800424a:	4291      	cmp	r1, r2
 800424c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004250:	d100      	bne.n	8004254 <memcpy+0xc>
 8004252:	4770      	bx	lr
 8004254:	b510      	push	{r4, lr}
 8004256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800425a:	4291      	cmp	r1, r2
 800425c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004260:	d1f9      	bne.n	8004256 <memcpy+0xe>
 8004262:	bd10      	pop	{r4, pc}

08004264 <memset>:
 8004264:	4603      	mov	r3, r0
 8004266:	4402      	add	r2, r0
 8004268:	4293      	cmp	r3, r2
 800426a:	d100      	bne.n	800426e <memset+0xa>
 800426c:	4770      	bx	lr
 800426e:	f803 1b01 	strb.w	r1, [r3], #1
 8004272:	e7f9      	b.n	8004268 <memset+0x4>

08004274 <_init>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr

08004280 <_fini>:
 8004280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004282:	bf00      	nop
 8004284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004286:	bc08      	pop	{r3}
 8004288:	469e      	mov	lr, r3
 800428a:	4770      	bx	lr
