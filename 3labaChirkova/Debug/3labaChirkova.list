
3labaChirkova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dbc  08002dbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002dbc  08002dbc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dbc  08002dbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001054  20000010  08002dd4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001064  08002dd4  00021064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018757  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003153  00000000  00000000  00038790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d81  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c86  00000000  00000000  000568b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fa0  00000000  00000000  0006d537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001004d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e2c  00000000  00000000  0010052c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000e1fc  00000000  00000000  00103358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002cdc 	.word	0x08002cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002cdc 	.word	0x08002cdc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000160:	4b03      	ldr	r3, [pc, #12]	; (8000170 <vApplicationGetIdleTaskMemory+0x10>)
 8000162:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000164:	4b03      	ldr	r3, [pc, #12]	; (8000174 <vApplicationGetIdleTaskMemory+0x14>)
 8000166:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	2380      	movs	r3, #128	; 0x80
 800016a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop
 8000170:	2000022c 	.word	0x2000022c
 8000174:	2000002c 	.word	0x2000002c

08000178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800017a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800017c:	2400      	movs	r4, #0
 800017e:	9402      	str	r4, [sp, #8]
 8000180:	9403      	str	r4, [sp, #12]
 8000182:	9404      	str	r4, [sp, #16]
 8000184:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000186:	4b25      	ldr	r3, [pc, #148]	; (800021c <MX_GPIO_Init+0xa4>)
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	f042 0210 	orr.w	r2, r2, #16
 800018e:	619a      	str	r2, [r3, #24]
 8000190:	699a      	ldr	r2, [r3, #24]
 8000192:	f002 0210 	and.w	r2, r2, #16
 8000196:	9200      	str	r2, [sp, #0]
 8000198:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800019a:	699a      	ldr	r2, [r3, #24]
 800019c:	f042 0204 	orr.w	r2, r2, #4
 80001a0:	619a      	str	r2, [r3, #24]
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	f003 0304 	and.w	r3, r3, #4
 80001a8:	9301      	str	r3, [sp, #4]
 80001aa:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80001ac:	4d1c      	ldr	r5, [pc, #112]	; (8000220 <MX_GPIO_Init+0xa8>)
 80001ae:	4622      	mov	r2, r4
 80001b0:	21f3      	movs	r1, #243	; 0xf3
 80001b2:	4628      	mov	r0, r5
 80001b4:	f000 fbfe 	bl	80009b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001be:	4b19      	ldr	r3, [pc, #100]	; (8000224 <MX_GPIO_Init+0xac>)
 80001c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001c4:	4e18      	ldr	r6, [pc, #96]	; (8000228 <MX_GPIO_Init+0xb0>)
 80001c6:	a902      	add	r1, sp, #8
 80001c8:	4630      	mov	r0, r6
 80001ca:	f000 fae3 	bl	8000794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001ce:	23ff      	movs	r3, #255	; 0xff
 80001d0:	9302      	str	r3, [sp, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d6:	a902      	add	r1, sp, #8
 80001d8:	4630      	mov	r0, r6
 80001da:	f000 fadb 	bl	8000794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 80001de:	23e3      	movs	r3, #227	; 0xe3
 80001e0:	9302      	str	r3, [sp, #8]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2701      	movs	r7, #1
 80001e4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e8:	2602      	movs	r6, #2
 80001ea:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ec:	a902      	add	r1, sp, #8
 80001ee:	4628      	mov	r0, r5
 80001f0:	f000 fad0 	bl	8000794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80001f4:	2310      	movs	r3, #16
 80001f6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80001fa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fe:	a902      	add	r1, sp, #8
 8000200:	4628      	mov	r0, r5
 8000202:	f000 fac7 	bl	8000794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000206:	4622      	mov	r2, r4
 8000208:	2105      	movs	r1, #5
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fa6a 	bl	80006e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000210:	2028      	movs	r0, #40	; 0x28
 8000212:	f000 fa9b 	bl	800074c <HAL_NVIC_EnableIRQ>

}
 8000216:	b007      	add	sp, #28
 8000218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40010800 	.word	0x40010800
 8000224:	10110000 	.word	0x10110000
 8000228:	40011000 	.word	0x40011000

0800022c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800022c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800022e:	2001      	movs	r0, #1
 8000230:	f001 fad3 	bl	80017da <osDelay>
  for(;;)
 8000234:	e7fb      	b.n	800022e <StartDefaultTask+0x2>

08000236 <StartTaskReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskReceive */
void StartTaskReceive(void const * argument)
{
 8000236:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartTaskReceive */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f001 face 	bl	80017da <osDelay>
  for(;;)
 800023e:	e7fb      	b.n	8000238 <StartTaskReceive+0x2>

08000240 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000240:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000242:	e7fe      	b.n	8000242 <Error_Handler+0x2>

08000244 <MX_TIM1_Init>:
{
 8000244:	b500      	push	{lr}
 8000246:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000248:	2300      	movs	r3, #0
 800024a:	9302      	str	r3, [sp, #8]
 800024c:	9303      	str	r3, [sp, #12]
 800024e:	9304      	str	r3, [sp, #16]
 8000250:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000252:	9300      	str	r3, [sp, #0]
 8000254:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8000256:	4814      	ldr	r0, [pc, #80]	; (80002a8 <MX_TIM1_Init+0x64>)
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <MX_TIM1_Init+0x68>)
 800025a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 4999;
 800025c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000260:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000262:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1999;
 8000264:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000268:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800026a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800026c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800026e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000270:	f001 f810 	bl	8001294 <HAL_TIM_Base_Init>
 8000274:	b990      	cbnz	r0, 800029c <MX_TIM1_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800027a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800027c:	a902      	add	r1, sp, #8
 800027e:	480a      	ldr	r0, [pc, #40]	; (80002a8 <MX_TIM1_Init+0x64>)
 8000280:	f001 f83f 	bl	8001302 <HAL_TIM_ConfigClockSource>
 8000284:	b960      	cbnz	r0, 80002a0 <MX_TIM1_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000286:	2300      	movs	r3, #0
 8000288:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800028a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800028c:	4669      	mov	r1, sp
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <MX_TIM1_Init+0x64>)
 8000290:	f001 f8a4 	bl	80013dc <HAL_TIMEx_MasterConfigSynchronization>
 8000294:	b930      	cbnz	r0, 80002a4 <MX_TIM1_Init+0x60>
}
 8000296:	b007      	add	sp, #28
 8000298:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800029c:	f7ff ffd0 	bl	8000240 <Error_Handler>
    Error_Handler();
 80002a0:	f7ff ffce 	bl	8000240 <Error_Handler>
    Error_Handler();
 80002a4:	f7ff ffcc 	bl	8000240 <Error_Handler>
 80002a8:	20000fd0 	.word	0x20000fd0
 80002ac:	40012c00 	.word	0x40012c00

080002b0 <MX_USART2_UART_Init>:
{
 80002b0:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80002b2:	480a      	ldr	r0, [pc, #40]	; (80002dc <MX_USART2_UART_Init+0x2c>)
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <MX_USART2_UART_Init+0x30>)
 80002b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80002b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002bc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	2300      	movs	r3, #0
 80002c0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002c4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c6:	220c      	movs	r2, #12
 80002c8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	f001 f937 	bl	8001540 <HAL_UART_Init>
 80002d2:	b900      	cbnz	r0, 80002d6 <MX_USART2_UART_Init+0x26>
}
 80002d4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80002d6:	f7ff ffb3 	bl	8000240 <Error_Handler>
 80002da:	bf00      	nop
 80002dc:	2000101c 	.word	0x2000101c
 80002e0:	40004400 	.word	0x40004400

080002e4 <SystemClock_Config>:
{
 80002e4:	b500      	push	{lr}
 80002e6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e8:	2224      	movs	r2, #36	; 0x24
 80002ea:	2100      	movs	r1, #0
 80002ec:	a807      	add	r0, sp, #28
 80002ee:	f002 fced 	bl	8002ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	2300      	movs	r3, #0
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	9303      	str	r3, [sp, #12]
 80002fa:	9304      	str	r3, [sp, #16]
 80002fc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fe:	2302      	movs	r3, #2
 8000300:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	2301      	movs	r3, #1
 8000304:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000306:	2310      	movs	r3, #16
 8000308:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	a806      	add	r0, sp, #24
 800030c:	f000 fb7e 	bl	8000a0c <HAL_RCC_OscConfig>
 8000310:	b968      	cbnz	r0, 800032e <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2100      	movs	r1, #0
 8000318:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000320:	a801      	add	r0, sp, #4
 8000322:	f000 fdb1 	bl	8000e88 <HAL_RCC_ClockConfig>
 8000326:	b920      	cbnz	r0, 8000332 <SystemClock_Config+0x4e>
}
 8000328:	b011      	add	sp, #68	; 0x44
 800032a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800032e:	f7ff ff87 	bl	8000240 <Error_Handler>
    Error_Handler();
 8000332:	f7ff ff85 	bl	8000240 <Error_Handler>
	...

08000338 <main>:
{
 8000338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033a:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 800033c:	f000 f99c 	bl	8000678 <HAL_Init>
  SystemClock_Config();
 8000340:	f7ff ffd0 	bl	80002e4 <SystemClock_Config>
  MX_GPIO_Init();
 8000344:	f7ff ff18 	bl	8000178 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000348:	f7ff ff7c 	bl	8000244 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800034c:	f7ff ffb0 	bl	80002b0 <MX_USART2_UART_Init>
  osMessageQDef(myQueue01, 4, uint32_t);
 8000350:	4c1a      	ldr	r4, [pc, #104]	; (80003bc <main+0x84>)
 8000352:	ad0e      	add	r5, sp, #56	; 0x38
 8000354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000358:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800035c:	2100      	movs	r1, #0
 800035e:	4628      	mov	r0, r5
 8000360:	f001 fa42 	bl	80017e8 <osMessageCreate>
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0x88>)
 8000366:	6018      	str	r0, [r3, #0]
  xUartQueue = xQueueCreate( 10, sizeof( char* ) ); //Создайте очередь, способную содержать 10 длинных значений без знака.
 8000368:	2200      	movs	r2, #0
 800036a:	2104      	movs	r1, #4
 800036c:	200a      	movs	r0, #10
 800036e:	f001 fbce 	bl	8001b0e <xQueueGenericCreate>
 8000372:	4607      	mov	r7, r0
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000374:	ad07      	add	r5, sp, #28
 8000376:	f104 0610 	add.w	r6, r4, #16
 800037a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800037c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800037e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000382:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), xUartQueue);
 8000386:	4639      	mov	r1, r7
 8000388:	a807      	add	r0, sp, #28
 800038a:	f001 f9f1 	bl	8001770 <osThreadCreate>
 800038e:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <main+0x8c>)
 8000390:	6018      	str	r0, [r3, #0]
  osThreadDef(myTaskReceive, StartTaskReceive, osPriorityNormal, 0, 128);
 8000392:	466d      	mov	r5, sp
 8000394:	342c      	adds	r4, #44	; 0x2c
 8000396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800039e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTaskReceiveHandle = osThreadCreate(osThread(myTaskReceive), xUartQueue);
 80003a2:	4639      	mov	r1, r7
 80003a4:	4668      	mov	r0, sp
 80003a6:	f001 f9e3 	bl	8001770 <osThreadCreate>
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <main+0x90>)
 80003ac:	6018      	str	r0, [r3, #0]
  var10_task_create(xUartQueue);
 80003ae:	4638      	mov	r0, r7
 80003b0:	f000 f91e 	bl	80005f0 <var10_task_create>
  osKernelStart();
 80003b4:	f001 f9d7 	bl	8001766 <osKernelStart>
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x80>
 80003ba:	bf00      	nop
 80003bc:	08002cf4 	.word	0x08002cf4
 80003c0:	20001018 	.word	0x20001018
 80003c4:	20000fc8 	.word	0x20000fc8
 80003c8:	20000fcc 	.word	0x20000fcc

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b500      	push	{lr}
 80003ce:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <HAL_MspInit+0x4c>)
 80003d2:	699a      	ldr	r2, [r3, #24]
 80003d4:	f042 0201 	orr.w	r2, r2, #1
 80003d8:	619a      	str	r2, [r3, #24]
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	f002 0201 	and.w	r2, r2, #1
 80003e0:	9200      	str	r2, [sp, #0]
 80003e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e4:	69da      	ldr	r2, [r3, #28]
 80003e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003ea:	61da      	str	r2, [r3, #28]
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	210f      	movs	r1, #15
 80003fa:	f06f 0001 	mvn.w	r0, #1
 80003fe:	f000 f971 	bl	80006e4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000402:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_MspInit+0x50>)
 8000404:	6853      	ldr	r3, [r2, #4]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800040e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000410:	b003      	add	sp, #12
 8000412:	f85d fb04 	ldr.w	pc, [sp], #4
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000420:	6802      	ldr	r2, [r0, #0]
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <HAL_TIM_Base_MspInit+0x3c>)
 8000424:	429a      	cmp	r2, r3
 8000426:	d000      	beq.n	800042a <HAL_TIM_Base_MspInit+0xa>
 8000428:	4770      	bx	lr
{
 800042a:	b500      	push	{lr}
 800042c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800042e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000432:	699a      	ldr	r2, [r3, #24]
 8000434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000438:	619a      	str	r2, [r3, #24]
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2105      	movs	r1, #5
 8000448:	2019      	movs	r0, #25
 800044a:	f000 f94b 	bl	80006e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800044e:	2019      	movs	r0, #25
 8000450:	f000 f97c 	bl	800074c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000454:	b003      	add	sp, #12
 8000456:	f85d fb04 	ldr.w	pc, [sp], #4
 800045a:	bf00      	nop
 800045c:	40012c00 	.word	0x40012c00

08000460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000460:	b510      	push	{r4, lr}
 8000462:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2300      	movs	r3, #0
 8000466:	9302      	str	r3, [sp, #8]
 8000468:	9303      	str	r3, [sp, #12]
 800046a:	9304      	str	r3, [sp, #16]
 800046c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART2)
 800046e:	6802      	ldr	r2, [r0, #0]
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <HAL_UART_MspInit+0x6c>)
 8000472:	429a      	cmp	r2, r3
 8000474:	d001      	beq.n	800047a <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000476:	b006      	add	sp, #24
 8000478:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800047a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800047e:	69da      	ldr	r2, [r3, #28]
 8000480:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000484:	61da      	str	r2, [r3, #28]
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800048c:	9200      	str	r2, [sp, #0]
 800048e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	699a      	ldr	r2, [r3, #24]
 8000492:	f042 0204 	orr.w	r2, r2, #4
 8000496:	619a      	str	r2, [r3, #24]
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004a2:	2304      	movs	r3, #4
 80004a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	2302      	movs	r3, #2
 80004a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004aa:	2303      	movs	r3, #3
 80004ac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	4c08      	ldr	r4, [pc, #32]	; (80004d0 <HAL_UART_MspInit+0x70>)
 80004b0:	a902      	add	r1, sp, #8
 80004b2:	4620      	mov	r0, r4
 80004b4:	f000 f96e 	bl	8000794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004b8:	2308      	movs	r3, #8
 80004ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	a902      	add	r1, sp, #8
 80004c4:	4620      	mov	r0, r4
 80004c6:	f000 f965 	bl	8000794 <HAL_GPIO_Init>
}
 80004ca:	e7d4      	b.n	8000476 <HAL_UART_MspInit+0x16>
 80004cc:	40004400 	.word	0x40004400
 80004d0:	40010800 	.word	0x40010800

080004d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <NMI_Handler>

080004d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler>

080004d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <MemManage_Handler>

080004da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler>

080004dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler>

080004de <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004de:	4770      	bx	lr

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f8db 	bl	800069c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004e6:	f002 f903 	bl	80026f0 <xTaskGetSchedulerState>
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d100      	bne.n	80004f0 <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ee:	bd08      	pop	{r3, pc}
  xPortSysTickHandler();
 80004f0:	f002 fa20 	bl	8002934 <xPortSysTickHandler>
}
 80004f4:	e7fb      	b.n	80004ee <SysTick_Handler+0xe>
	...

080004f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <TIM1_UP_IRQHandler+0xc>)
 80004fc:	f000 fdd2 	bl	80010a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000500:	bd08      	pop	{r3, pc}
 8000502:	bf00      	nop
 8000504:	20000fd0 	.word	0x20000fd0

08000508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800050a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800050e:	f000 fa59 	bl	80009c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000512:	bd08      	pop	{r3, pc}

08000514 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	4770      	bx	lr
	...

08000518 <Reset_Handler>:
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopFillZerobss+0x12>)
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopFillZerobss+0x16>)
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopFillZerobss+0x1a>)
 800051e:	2300      	movs	r3, #0
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:
 8000522:	58d4      	ldr	r4, [r2, r3]
 8000524:	50c4      	str	r4, [r0, r3]
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:
 8000528:	18c4      	adds	r4, r0, r3
 800052a:	428c      	cmp	r4, r1
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopFillZerobss+0x1e>)
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopFillZerobss+0x22>)
 8000532:	2300      	movs	r3, #0
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:
 800053a:	42a2      	cmp	r2, r4
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>
 800053e:	f7ff ffe9 	bl	8000514 <SystemInit>
 8000542:	f002 fb91 	bl	8002c68 <__libc_init_array>
 8000546:	f7ff fef7 	bl	8000338 <main>
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000
 8000550:	20000010 	.word	0x20000010
 8000554:	08002dc4 	.word	0x08002dc4
 8000558:	20000010 	.word	0x20000010
 800055c:	20001064 	.word	0x20001064

08000560 <ADC1_2_IRQHandler>:
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <var10_task>:
extern UART_HandleTypeDef huart2;
osMessageQId myQueue01Handle;

/* USER CODE END Header_StartDefaultTask */
void var10_task(void * argument) 				//прием с юарт и передача на очередь
{
 8000564:	b510      	push	{r4, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	4604      	mov	r4, r0
	QueueHandle_t tasks_queue = (QueueHandle_t*)argument;
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  char data[20] = {1,2,3,4,5,6,7,8,9,10};								// бронируем в памяти 20 байт. Изначально они по 0
 800056a:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <var10_task+0x44>)
 800056c:	ab01      	add	r3, sp, #4
 800056e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000570:	c303      	stmia	r3!, {r0, r1}
 8000572:	f823 2b02 	strh.w	r2, [r3], #2
 8000576:	0c12      	lsrs	r2, r2, #16
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	f8cd 300f 	str.w	r3, [sp, #15]
 8000580:	f8cd 3013 	str.w	r3, [sp, #19]
 8000584:	f88d 3017 	strb.w	r3, [sp, #23]
  char *pdata = data;
 8000588:	ab01      	add	r3, sp, #4
 800058a:	9300      	str	r3, [sp, #0]
  for(;;)											//бесконечный цикл
  {
	  HAL_UART_Receive(&huart2, data, 100, 50);		//прием с юарта 100-размер, 50-таймаут
 800058c:	2332      	movs	r3, #50	; 0x32
 800058e:	2264      	movs	r2, #100	; 0x64
 8000590:	a901      	add	r1, sp, #4
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <var10_task+0x48>)
 8000594:	f001 f86f 	bl	8001676 <HAL_UART_Receive>
	  xQueueSend(tasks_queue, &pdata, 100);	//очередь.
 8000598:	2300      	movs	r3, #0
 800059a:	2264      	movs	r2, #100	; 0x64
 800059c:	4669      	mov	r1, sp
 800059e:	4620      	mov	r0, r4
 80005a0:	f001 fadc 	bl	8001b5c <xQueueGenericSend>
  for(;;)											//бесконечный цикл
 80005a4:	e7f2      	b.n	800058c <var10_task+0x28>
 80005a6:	bf00      	nop
 80005a8:	08002d3c 	.word	0x08002d3c
 80005ac:	2000101c 	.word	0x2000101c

080005b0 <var10_task2>:
 }
}
  /* USER CODE END 5 */

void var10_task2(void * argument) 			//читает с очереди и передает на консоль
{
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	b083      	sub	sp, #12
 80005b4:	4604      	mov	r4, r0
	QueueHandle_t tasks_queue = (QueueHandle_t*)argument;
 80005b6:	e00d      	b.n	80005d4 <var10_task2+0x24>
	  for(;;)
	  {
		  data1 = NULL;
	   if(xQueueReceive(tasks_queue, &data1, portMAX_DELAY) == pdTRUE)											//pdPASS - вернется только тогда, когда данные успешно отправлены в очередь. Если верно, то переходит дальше
	  {
		   HAL_UART_Transmit(&huart2, data1, strlen(data1), 1000);	//передача на консоль
 80005b8:	9d01      	ldr	r5, [sp, #4]
 80005ba:	4628      	mov	r0, r5
 80005bc:	f7ff fdc8 	bl	8000150 <strlen>
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	b282      	uxth	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <var10_task2+0x3c>)
 80005ca:	f000 ffe8 	bl	800159e <HAL_UART_Transmit>
		   osDelay(100);										//задержка
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f001 f903 	bl	80017da <osDelay>
		  data1 = NULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
	   if(xQueueReceive(tasks_queue, &data1, portMAX_DELAY) == pdTRUE)											//pdPASS - вернется только тогда, когда данные успешно отправлены в очередь. Если верно, то переходит дальше
 80005d8:	f04f 32ff 	mov.w	r2, #4294967295
 80005dc:	a901      	add	r1, sp, #4
 80005de:	4620      	mov	r0, r4
 80005e0:	f001 fb7c 	bl	8001cdc <xQueueReceive>
 80005e4:	2801      	cmp	r0, #1
 80005e6:	d1f5      	bne.n	80005d4 <var10_task2+0x24>
 80005e8:	e7e6      	b.n	80005b8 <var10_task2+0x8>
 80005ea:	bf00      	nop
 80005ec:	2000101c 	.word	0x2000101c

080005f0 <var10_task_create>:
	  }
	  }
}

void var10_task_create(QueueHandle_t  queue)
{
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	4604      	mov	r4, r0
	xTaskCreate(		var10_task,       /* Function that implements the task. */
 80005f6:	2500      	movs	r5, #0
 80005f8:	9501      	str	r5, [sp, #4]
 80005fa:	9500      	str	r5, [sp, #0]
 80005fc:	4603      	mov	r3, r0
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	4906      	ldr	r1, [pc, #24]	; (800061c <var10_task_create+0x2c>)
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <var10_task_create+0x30>)
 8000604:	f001 fdd5 	bl	80021b2 <xTaskCreate>
	                    128,      /* Stack size in words, not bytes. */
						queue,    /* Parameter passed into the task. */
						osPriorityNormal ,/* Priority at which the task is created. */
						NULL );      /* Used to pass out the created task's handle. */

	xTaskCreate(		var10_task2,       /* Function that implements the task. */
 8000608:	9501      	str	r5, [sp, #4]
 800060a:	9500      	str	r5, [sp, #0]
 800060c:	4623      	mov	r3, r4
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <var10_task_create+0x34>)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <var10_task_create+0x38>)
 8000614:	f001 fdcd 	bl	80021b2 <xTaskCreate>
	                    "anna's task2",          /* Text name for the task. */
	                    128,      /* Stack size in words, not bytes. */
						queue,    /* Parameter passed into the task. */
						osPriorityNormal ,/* Priority at which the task is created. */
						NULL );      /* Used to pass out the created task's handle. */
}
 8000618:	b003      	add	sp, #12
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	08002d84 	.word	0x08002d84
 8000620:	08000565 	.word	0x08000565
 8000624:	08002d90 	.word	0x08002d90
 8000628:	080005b1 	.word	0x080005b1

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b510      	push	{r4, lr}
 800062e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HAL_InitTick+0x40>)
 8000632:	7818      	ldrb	r0, [r3, #0]
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	fbb3 f3f0 	udiv	r3, r3, r0
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <HAL_InitTick+0x44>)
 800063e:	6810      	ldr	r0, [r2, #0]
 8000640:	fbb0 f0f3 	udiv	r0, r0, r3
 8000644:	f000 f890 	bl	8000768 <HAL_SYSTICK_Config>
 8000648:	b968      	cbnz	r0, 8000666 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	2c0f      	cmp	r4, #15
 800064c:	d901      	bls.n	8000652 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800064e:	2001      	movs	r0, #1
 8000650:	e00a      	b.n	8000668 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000652:	2200      	movs	r2, #0
 8000654:	4621      	mov	r1, r4
 8000656:	f04f 30ff 	mov.w	r0, #4294967295
 800065a:	f000 f843 	bl	80006e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_InitTick+0x48>)
 8000660:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2000      	movs	r0, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000666:	2001      	movs	r0, #1
}
 8000668:	bd10      	pop	{r4, pc}
 800066a:	bf00      	nop
 800066c:	20000004 	.word	0x20000004
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008

08000678 <HAL_Init>:
{
 8000678:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_Init+0x20>)
 800067c:	6813      	ldr	r3, [r2, #0]
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f81b 	bl	80006c0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800068a:	200f      	movs	r0, #15
 800068c:	f7ff ffce 	bl	800062c <HAL_InitTick>
  HAL_MspInit();
 8000690:	f7ff fe9c 	bl	80003cc <HAL_MspInit>
}
 8000694:	2000      	movs	r0, #0
 8000696:	bd08      	pop	{r3, pc}
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <HAL_IncTick+0x10>)
 800069e:	6811      	ldr	r1, [r2, #0]
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <HAL_IncTick+0x14>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	440b      	add	r3, r1
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20001060 	.word	0x20001060
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <HAL_GetTick+0x8>)
 80006b6:	6818      	ldr	r0, [r3, #0]
}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20001060 	.word	0x20001060

080006c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006cc:	0200      	lsls	r0, r0, #8
 80006ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80006d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80006dc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_NVIC_SetPriority+0x60>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ee:	f1c3 0407 	rsb	r4, r3, #7
 80006f2:	2c04      	cmp	r4, #4
 80006f4:	bf28      	it	cs
 80006f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f8:	1d1d      	adds	r5, r3, #4
 80006fa:	2d06      	cmp	r5, #6
 80006fc:	d918      	bls.n	8000730 <HAL_NVIC_SetPriority+0x4c>
 80006fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 35ff 	mov.w	r5, #4294967295
 8000704:	fa05 f404 	lsl.w	r4, r5, r4
 8000708:	ea21 0104 	bic.w	r1, r1, r4
 800070c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070e:	fa05 f303 	lsl.w	r3, r5, r3
 8000712:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000716:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000718:	2800      	cmp	r0, #0
 800071a:	db0b      	blt.n	8000734 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000724:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000728:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800072c:	bc30      	pop	{r4, r5}
 800072e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000730:	2300      	movs	r3, #0
 8000732:	e7e5      	b.n	8000700 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	f000 000f 	and.w	r0, r0, #15
 8000738:	0109      	lsls	r1, r1, #4
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <HAL_NVIC_SetPriority+0x64>)
 800073e:	5419      	strb	r1, [r3, r0]
 8000740:	e7f4      	b.n	800072c <HAL_NVIC_SetPriority+0x48>
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	e000ed14 	.word	0xe000ed14

0800074c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800074c:	2800      	cmp	r0, #0
 800074e:	db07      	blt.n	8000760 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000750:	f000 021f 	and.w	r2, r0, #31
 8000754:	0940      	lsrs	r0, r0, #5
 8000756:	2301      	movs	r3, #1
 8000758:	4093      	lsls	r3, r2
 800075a:	4a02      	ldr	r2, [pc, #8]	; (8000764 <HAL_NVIC_EnableIRQ+0x18>)
 800075c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	3801      	subs	r0, #1
 800076a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800076e:	d20a      	bcs.n	8000786 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_SYSTICK_Config+0x24>)
 8000772:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_SYSTICK_Config+0x28>)
 8000776:	21f0      	movs	r1, #240	; 0xf0
 8000778:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	2000      	movs	r0, #0
 800077e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b4f0      	push	{r4, r5, r6, r7}
 8000796:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000798:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 800079a:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800079c:	e0a3      	b.n	80008e6 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800079e:	4f7f      	ldr	r7, [pc, #508]	; (800099c <HAL_GPIO_Init+0x208>)
 80007a0:	42bb      	cmp	r3, r7
 80007a2:	d010      	beq.n	80007c6 <HAL_GPIO_Init+0x32>
 80007a4:	d907      	bls.n	80007b6 <HAL_GPIO_Init+0x22>
 80007a6:	4f7e      	ldr	r7, [pc, #504]	; (80009a0 <HAL_GPIO_Init+0x20c>)
 80007a8:	42bb      	cmp	r3, r7
 80007aa:	d00c      	beq.n	80007c6 <HAL_GPIO_Init+0x32>
 80007ac:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80007b0:	42bb      	cmp	r3, r7
 80007b2:	d008      	beq.n	80007c6 <HAL_GPIO_Init+0x32>
 80007b4:	e013      	b.n	80007de <HAL_GPIO_Init+0x4a>
 80007b6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80007ba:	42bb      	cmp	r3, r7
 80007bc:	d003      	beq.n	80007c6 <HAL_GPIO_Init+0x32>
 80007be:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80007c2:	42bb      	cmp	r3, r7
 80007c4:	d107      	bne.n	80007d6 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007c6:	688b      	ldr	r3, [r1, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d058      	beq.n	800087e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d051      	beq.n	8000874 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80007d0:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d2:	2508      	movs	r5, #8
 80007d4:	e003      	b.n	80007de <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80007d6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80007da:	42bb      	cmp	r3, r7
 80007dc:	d0f3      	beq.n	80007c6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007de:	2eff      	cmp	r6, #255	; 0xff
 80007e0:	d84f      	bhi.n	8000882 <HAL_GPIO_Init+0xee>
 80007e2:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007e4:	2eff      	cmp	r6, #255	; 0xff
 80007e6:	d84f      	bhi.n	8000888 <HAL_GPIO_Init+0xf4>
 80007e8:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007ea:	f8dc 3000 	ldr.w	r3, [ip]
 80007ee:	270f      	movs	r7, #15
 80007f0:	4097      	lsls	r7, r2
 80007f2:	ea23 0307 	bic.w	r3, r3, r7
 80007f6:	fa05 f202 	lsl.w	r2, r5, r2
 80007fa:	4313      	orrs	r3, r2
 80007fc:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000800:	684b      	ldr	r3, [r1, #4]
 8000802:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000806:	d06d      	beq.n	80008e4 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000808:	4b66      	ldr	r3, [pc, #408]	; (80009a4 <HAL_GPIO_Init+0x210>)
 800080a:	699a      	ldr	r2, [r3, #24]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	619a      	str	r2, [r3, #24]
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800081c:	08a2      	lsrs	r2, r4, #2
 800081e:	1c97      	adds	r7, r2, #2
 8000820:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <HAL_GPIO_Init+0x214>)
 8000822:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000826:	f004 0703 	and.w	r7, r4, #3
 800082a:	00bf      	lsls	r7, r7, #2
 800082c:	f04f 0c0f 	mov.w	ip, #15
 8000830:	fa0c fc07 	lsl.w	ip, ip, r7
 8000834:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <HAL_GPIO_Init+0x218>)
 800083a:	4298      	cmp	r0, r3
 800083c:	d02a      	beq.n	8000894 <HAL_GPIO_Init+0x100>
 800083e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000842:	4298      	cmp	r0, r3
 8000844:	f000 808a 	beq.w	800095c <HAL_GPIO_Init+0x1c8>
 8000848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800084c:	4298      	cmp	r0, r3
 800084e:	f000 8087 	beq.w	8000960 <HAL_GPIO_Init+0x1cc>
 8000852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000856:	4298      	cmp	r0, r3
 8000858:	d01a      	beq.n	8000890 <HAL_GPIO_Init+0xfc>
 800085a:	2304      	movs	r3, #4
 800085c:	e01b      	b.n	8000896 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085e:	68cd      	ldr	r5, [r1, #12]
          break;
 8000860:	e7bd      	b.n	80007de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000862:	68cd      	ldr	r5, [r1, #12]
 8000864:	3504      	adds	r5, #4
          break;
 8000866:	e7ba      	b.n	80007de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000868:	68cd      	ldr	r5, [r1, #12]
 800086a:	3508      	adds	r5, #8
          break;
 800086c:	e7b7      	b.n	80007de <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800086e:	68cd      	ldr	r5, [r1, #12]
 8000870:	350c      	adds	r5, #12
          break;
 8000872:	e7b4      	b.n	80007de <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000874:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000876:	2508      	movs	r5, #8
 8000878:	e7b1      	b.n	80007de <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800087a:	2500      	movs	r5, #0
 800087c:	e7af      	b.n	80007de <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800087e:	2504      	movs	r5, #4
 8000880:	e7ad      	b.n	80007de <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000882:	f100 0c04 	add.w	ip, r0, #4
 8000886:	e7ad      	b.n	80007e4 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000888:	f1a4 0208 	sub.w	r2, r4, #8
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	e7ac      	b.n	80007ea <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000890:	2303      	movs	r3, #3
 8000892:	e000      	b.n	8000896 <HAL_GPIO_Init+0x102>
 8000894:	2300      	movs	r3, #0
 8000896:	40bb      	lsls	r3, r7
 8000898:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 800089c:	3202      	adds	r2, #2
 800089e:	4f42      	ldr	r7, [pc, #264]	; (80009a8 <HAL_GPIO_Init+0x214>)
 80008a0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a4:	684b      	ldr	r3, [r1, #4]
 80008a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008aa:	d05b      	beq.n	8000964 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ac:	4a40      	ldr	r2, [pc, #256]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	4333      	orrs	r3, r6
 80008b2:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b4:	684b      	ldr	r3, [r1, #4]
 80008b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008ba:	d059      	beq.n	8000970 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008bc:	4a3c      	ldr	r2, [pc, #240]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 80008be:	6853      	ldr	r3, [r2, #4]
 80008c0:	4333      	orrs	r3, r6
 80008c2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c4:	684b      	ldr	r3, [r1, #4]
 80008c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008ca:	d057      	beq.n	800097c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008cc:	4a38      	ldr	r2, [pc, #224]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 80008ce:	6893      	ldr	r3, [r2, #8]
 80008d0:	4333      	orrs	r3, r6
 80008d2:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d4:	684b      	ldr	r3, [r1, #4]
 80008d6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80008da:	d055      	beq.n	8000988 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008dc:	4a34      	ldr	r2, [pc, #208]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 80008de:	68d3      	ldr	r3, [r2, #12]
 80008e0:	431e      	orrs	r6, r3
 80008e2:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80008e4:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e6:	680b      	ldr	r3, [r1, #0]
 80008e8:	fa33 f204 	lsrs.w	r2, r3, r4
 80008ec:	d052      	beq.n	8000994 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80008ee:	2201      	movs	r2, #1
 80008f0:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f2:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 80008f6:	ea32 0303 	bics.w	r3, r2, r3
 80008fa:	d1f3      	bne.n	80008e4 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80008fc:	684b      	ldr	r3, [r1, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	f63f af4d 	bhi.w	800079e <HAL_GPIO_Init+0xa>
 8000904:	2b12      	cmp	r3, #18
 8000906:	f63f af6a 	bhi.w	80007de <HAL_GPIO_Init+0x4a>
 800090a:	a701      	add	r7, pc, #4	; (adr r7, 8000910 <HAL_GPIO_Init+0x17c>)
 800090c:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000910:	080007c7 	.word	0x080007c7
 8000914:	0800085f 	.word	0x0800085f
 8000918:	08000869 	.word	0x08000869
 800091c:	0800087b 	.word	0x0800087b
 8000920:	080007df 	.word	0x080007df
 8000924:	080007df 	.word	0x080007df
 8000928:	080007df 	.word	0x080007df
 800092c:	080007df 	.word	0x080007df
 8000930:	080007df 	.word	0x080007df
 8000934:	080007df 	.word	0x080007df
 8000938:	080007df 	.word	0x080007df
 800093c:	080007df 	.word	0x080007df
 8000940:	080007df 	.word	0x080007df
 8000944:	080007df 	.word	0x080007df
 8000948:	080007df 	.word	0x080007df
 800094c:	080007df 	.word	0x080007df
 8000950:	080007df 	.word	0x080007df
 8000954:	08000863 	.word	0x08000863
 8000958:	0800086f 	.word	0x0800086f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800095c:	2301      	movs	r3, #1
 800095e:	e79a      	b.n	8000896 <HAL_GPIO_Init+0x102>
 8000960:	2302      	movs	r3, #2
 8000962:	e798      	b.n	8000896 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	ea23 0306 	bic.w	r3, r3, r6
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e7a1      	b.n	80008b4 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 8000972:	6853      	ldr	r3, [r2, #4]
 8000974:	ea23 0306 	bic.w	r3, r3, r6
 8000978:	6053      	str	r3, [r2, #4]
 800097a:	e7a3      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 800097e:	6893      	ldr	r3, [r2, #8]
 8000980:	ea23 0306 	bic.w	r3, r3, r6
 8000984:	6093      	str	r3, [r2, #8]
 8000986:	e7a5      	b.n	80008d4 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <HAL_GPIO_Init+0x21c>)
 800098a:	68d3      	ldr	r3, [r2, #12]
 800098c:	ea23 0606 	bic.w	r6, r3, r6
 8000990:	60d6      	str	r6, [r2, #12]
 8000992:	e7a7      	b.n	80008e4 <HAL_GPIO_Init+0x150>
  }
}
 8000994:	b002      	add	sp, #8
 8000996:	bcf0      	pop	{r4, r5, r6, r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	10220000 	.word	0x10220000
 80009a0:	10310000 	.word	0x10310000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40010400 	.word	0x40010400

080009b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009b4:	b10a      	cbz	r2, 80009ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009b6:	6101      	str	r1, [r0, #16]
 80009b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009ba:	0409      	lsls	r1, r1, #16
 80009bc:	6101      	str	r1, [r0, #16]
  }
}
 80009be:	4770      	bx	lr

080009c0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009c0:	4770      	bx	lr
	...

080009c4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80009c4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4203      	tst	r3, r0
 80009cc:	d100      	bne.n	80009d0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80009ce:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80009d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009d4:	f7ff fff4 	bl	80009c0 <HAL_GPIO_EXTI_Callback>
}
 80009d8:	e7f9      	b.n	80009ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80009da:	bf00      	nop
 80009dc:	40010400 	.word	0x40010400

080009e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80009e0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <RCC_Delay+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <RCC_Delay+0x28>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0a5b      	lsrs	r3, r3, #9
 80009ee:	fb00 f303 	mul.w	r3, r0, r3
 80009f2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80009f4:	bf00      	nop
  }
  while (Delay --);
 80009f6:	9b01      	ldr	r3, [sp, #4]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f9      	bne.n	80009f4 <RCC_Delay+0x14>
}
 8000a00:	b002      	add	sp, #8
 8000a02:	4770      	bx	lr
 8000a04:	20000000 	.word	0x20000000
 8000a08:	10624dd3 	.word	0x10624dd3

08000a0c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	f000 81f1 	beq.w	8000df4 <HAL_RCC_OscConfig+0x3e8>
{
 8000a12:	b570      	push	{r4, r5, r6, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a18:	6803      	ldr	r3, [r0, #0]
 8000a1a:	f013 0f01 	tst.w	r3, #1
 8000a1e:	d02c      	beq.n	8000a7a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a20:	4baa      	ldr	r3, [pc, #680]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d01d      	beq.n	8000a68 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a2c:	4ba7      	ldr	r3, [pc, #668]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 030c 	and.w	r3, r3, #12
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d012      	beq.n	8000a5e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a38:	6863      	ldr	r3, [r4, #4]
 8000a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3e:	d041      	beq.n	8000ac4 <HAL_RCC_OscConfig+0xb8>
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d155      	bne.n	8000af0 <HAL_RCC_OscConfig+0xe4>
 8000a44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a48:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e037      	b.n	8000ace <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a5e:	4b9b      	ldr	r3, [pc, #620]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a66:	d0e7      	beq.n	8000a38 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a68:	4b98      	ldr	r3, [pc, #608]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a70:	d003      	beq.n	8000a7a <HAL_RCC_OscConfig+0x6e>
 8000a72:	6863      	ldr	r3, [r4, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 81bf 	beq.w	8000df8 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a7a:	6823      	ldr	r3, [r4, #0]
 8000a7c:	f013 0f02 	tst.w	r3, #2
 8000a80:	d075      	beq.n	8000b6e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a82:	4b92      	ldr	r3, [pc, #584]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f013 0f0c 	tst.w	r3, #12
 8000a8a:	d05f      	beq.n	8000b4c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a8c:	4b8f      	ldr	r3, [pc, #572]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 030c 	and.w	r3, r3, #12
 8000a94:	2b08      	cmp	r3, #8
 8000a96:	d054      	beq.n	8000b42 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a98:	6923      	ldr	r3, [r4, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8089 	beq.w	8000bb2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8000aa0:	4b8b      	ldr	r3, [pc, #556]	; (8000cd0 <HAL_RCC_OscConfig+0x2c4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fe05 	bl	80006b4 <HAL_GetTick>
 8000aaa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aac:	4b87      	ldr	r3, [pc, #540]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f013 0f02 	tst.w	r3, #2
 8000ab4:	d174      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ab6:	f7ff fdfd 	bl	80006b4 <HAL_GetTick>
 8000aba:	1b40      	subs	r0, r0, r5
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d9f5      	bls.n	8000aac <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	e19e      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac4:	4a81      	ldr	r2, [pc, #516]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000ac6:	6813      	ldr	r3, [r2, #0]
 8000ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000acc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	b343      	cbz	r3, 8000b24 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000ad2:	f7ff fdef 	bl	80006b4 <HAL_GetTick>
 8000ad6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad8:	4b7c      	ldr	r3, [pc, #496]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ae0:	d1cb      	bne.n	8000a7a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ae2:	f7ff fde7 	bl	80006b4 <HAL_GetTick>
 8000ae6:	1b40      	subs	r0, r0, r5
 8000ae8:	2864      	cmp	r0, #100	; 0x64
 8000aea:	d9f5      	bls.n	8000ad8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000aec:	2003      	movs	r0, #3
 8000aee:	e188      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000af4:	d009      	beq.n	8000b0a <HAL_RCC_OscConfig+0xfe>
 8000af6:	4b75      	ldr	r3, [pc, #468]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e7e1      	b.n	8000ace <HAL_RCC_OscConfig+0xc2>
 8000b0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b0e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	e7d4      	b.n	8000ace <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000b24:	f7ff fdc6 	bl	80006b4 <HAL_GetTick>
 8000b28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	4b68      	ldr	r3, [pc, #416]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b32:	d0a2      	beq.n	8000a7a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b34:	f7ff fdbe 	bl	80006b4 <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2864      	cmp	r0, #100	; 0x64
 8000b3c:	d9f5      	bls.n	8000b2a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000b3e:	2003      	movs	r0, #3
 8000b40:	e15f      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b42:	4b62      	ldr	r3, [pc, #392]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b4a:	d1a5      	bne.n	8000a98 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4c:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f013 0f02 	tst.w	r3, #2
 8000b54:	d003      	beq.n	8000b5e <HAL_RCC_OscConfig+0x152>
 8000b56:	6923      	ldr	r3, [r4, #16]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	f040 814f 	bne.w	8000dfc <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b5e:	4a5b      	ldr	r2, [pc, #364]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000b60:	6813      	ldr	r3, [r2, #0]
 8000b62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b66:	6961      	ldr	r1, [r4, #20]
 8000b68:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b6c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	f013 0f08 	tst.w	r3, #8
 8000b74:	d032      	beq.n	8000bdc <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b76:	69a3      	ldr	r3, [r4, #24]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d045      	beq.n	8000c08 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8000b7c:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <HAL_RCC_OscConfig+0x2c8>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b82:	f7ff fd97 	bl	80006b4 <HAL_GetTick>
 8000b86:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b88:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8c:	f013 0f02 	tst.w	r3, #2
 8000b90:	d121      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b92:	f7ff fd8f 	bl	80006b4 <HAL_GetTick>
 8000b96:	1b40      	subs	r0, r0, r5
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9f5      	bls.n	8000b88 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	e130      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba0:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000ba2:	6813      	ldr	r3, [r2, #0]
 8000ba4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ba8:	6961      	ldr	r1, [r4, #20]
 8000baa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e7dd      	b.n	8000b6e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <HAL_RCC_OscConfig+0x2c4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fd7c 	bl	80006b4 <HAL_GetTick>
 8000bbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f013 0f02 	tst.w	r3, #2
 8000bc6:	d0d2      	beq.n	8000b6e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc8:	f7ff fd74 	bl	80006b4 <HAL_GetTick>
 8000bcc:	1b40      	subs	r0, r0, r5
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9f5      	bls.n	8000bbe <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	e115      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff02 	bl	80009e0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	f013 0f04 	tst.w	r3, #4
 8000be2:	f000 8097 	beq.w	8000d14 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000bee:	d11d      	bne.n	8000c2c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000bf2:	69da      	ldr	r2, [r3, #28]
 8000bf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bf8:	61da      	str	r2, [r3, #28]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c04:	2501      	movs	r5, #1
 8000c06:	e012      	b.n	8000c2e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_RCC_OscConfig+0x2c8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fd51 	bl	80006b4 <HAL_GetTick>
 8000c12:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	f013 0f02 	tst.w	r3, #2
 8000c1c:	d0de      	beq.n	8000bdc <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c1e:	f7ff fd49 	bl	80006b4 <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	2802      	cmp	r0, #2
 8000c26:	d9f5      	bls.n	8000c14 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
 8000c2a:	e0ea      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000c2c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_RCC_OscConfig+0x2cc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c36:	d011      	beq.n	8000c5c <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c38:	68e3      	ldr	r3, [r4, #12]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d022      	beq.n	8000c84 <HAL_RCC_OscConfig+0x278>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d138      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x2a8>
 8000c42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c46:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c4a:	6a1a      	ldr	r2, [r3, #32]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	621a      	str	r2, [r3, #32]
 8000c52:	6a1a      	ldr	r2, [r3, #32]
 8000c54:	f022 0204 	bic.w	r2, r2, #4
 8000c58:	621a      	str	r2, [r3, #32]
 8000c5a:	e018      	b.n	8000c8e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_RCC_OscConfig+0x2cc>)
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c64:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c66:	f7ff fd25 	bl	80006b4 <HAL_GetTick>
 8000c6a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_RCC_OscConfig+0x2cc>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c74:	d1e0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c76:	f7ff fd1d 	bl	80006b4 <HAL_GetTick>
 8000c7a:	1b80      	subs	r0, r0, r6
 8000c7c:	2864      	cmp	r0, #100	; 0x64
 8000c7e:	d9f5      	bls.n	8000c6c <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8000c80:	2003      	movs	r0, #3
 8000c82:	e0be      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c84:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000c86:	6a13      	ldr	r3, [r2, #32]
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c8e:	68e3      	ldr	r3, [r4, #12]
 8000c90:	b373      	cbz	r3, 8000cf0 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000c92:	f7ff fd0f 	bl	80006b4 <HAL_GetTick>
 8000c96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	f013 0f02 	tst.w	r3, #2
 8000ca0:	d137      	bne.n	8000d12 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fd07 	bl	80006b4 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cac:	4298      	cmp	r0, r3
 8000cae:	d9f3      	bls.n	8000c98 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	e0a6      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb4:	2b05      	cmp	r3, #5
 8000cb6:	d011      	beq.n	8000cdc <HAL_RCC_OscConfig+0x2d0>
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_RCC_OscConfig+0x2c0>)
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	621a      	str	r2, [r3, #32]
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	f022 0204 	bic.w	r2, r2, #4
 8000cc8:	621a      	str	r2, [r3, #32]
 8000cca:	e7e0      	b.n	8000c8e <HAL_RCC_OscConfig+0x282>
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	42420000 	.word	0x42420000
 8000cd4:	42420480 	.word	0x42420480
 8000cd8:	40007000 	.word	0x40007000
 8000cdc:	4b4d      	ldr	r3, [pc, #308]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000cde:	6a1a      	ldr	r2, [r3, #32]
 8000ce0:	f042 0204 	orr.w	r2, r2, #4
 8000ce4:	621a      	str	r2, [r3, #32]
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	f042 0201 	orr.w	r2, r2, #1
 8000cec:	621a      	str	r2, [r3, #32]
 8000cee:	e7ce      	b.n	8000c8e <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fce0 	bl	80006b4 <HAL_GetTick>
 8000cf4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	f013 0f02 	tst.w	r3, #2
 8000cfe:	d008      	beq.n	8000d12 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d00:	f7ff fcd8 	bl	80006b4 <HAL_GetTick>
 8000d04:	1b80      	subs	r0, r0, r6
 8000d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d9f3      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000d0e:	2003      	movs	r0, #3
 8000d10:	e077      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000d12:	b9e5      	cbnz	r5, 8000d4e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d14:	69e3      	ldr	r3, [r4, #28]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d072      	beq.n	8000e00 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1a:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000d1c:	6852      	ldr	r2, [r2, #4]
 8000d1e:	f002 020c 	and.w	r2, r2, #12
 8000d22:	2a08      	cmp	r2, #8
 8000d24:	d056      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d017      	beq.n	8000d5a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_RCC_OscConfig+0x40c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d30:	f7ff fcc0 	bl	80006b4 <HAL_GetTick>
 8000d34:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d3e:	d047      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d40:	f7ff fcb8 	bl	80006b4 <HAL_GetTick>
 8000d44:	1b00      	subs	r0, r0, r4
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f5      	bls.n	8000d36 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	e059      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000d50:	69d3      	ldr	r3, [r2, #28]
 8000d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d56:	61d3      	str	r3, [r2, #28]
 8000d58:	e7dc      	b.n	8000d14 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_RCC_OscConfig+0x40c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d60:	f7ff fca8 	bl	80006b4 <HAL_GetTick>
 8000d64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d6e:	d006      	beq.n	8000d7e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d70:	f7ff fca0 	bl	80006b4 <HAL_GetTick>
 8000d74:	1b40      	subs	r0, r0, r5
 8000d76:	2802      	cmp	r0, #2
 8000d78:	d9f5      	bls.n	8000d66 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	e041      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d7e:	6a23      	ldr	r3, [r4, #32]
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d84:	d01a      	beq.n	8000dbc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d86:	4923      	ldr	r1, [pc, #140]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000d8e:	6a22      	ldr	r2, [r4, #32]
 8000d90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000d92:	4302      	orrs	r2, r0
 8000d94:	4313      	orrs	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_RCC_OscConfig+0x40c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fc89 	bl	80006b4 <HAL_GetTick>
 8000da2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dac:	d10e      	bne.n	8000dcc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dae:	f7ff fc81 	bl	80006b4 <HAL_GetTick>
 8000db2:	1b00      	subs	r0, r0, r4
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9f5      	bls.n	8000da4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000db8:	2003      	movs	r0, #3
 8000dba:	e022      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000dbe:	6853      	ldr	r3, [r2, #4]
 8000dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dc4:	68a1      	ldr	r1, [r4, #8]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6053      	str	r3, [r2, #4]
 8000dca:	e7dc      	b.n	8000d86 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000dcc:	2000      	movs	r0, #0
 8000dce:	e018      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	e016      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d016      	beq.n	8000e06 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_RCC_OscConfig+0x408>)
 8000dda:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ddc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000de0:	6a22      	ldr	r2, [r4, #32]
 8000de2:	4291      	cmp	r1, r2
 8000de4:	d111      	bne.n	8000e0a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000de6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000dea:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10e      	bne.n	8000e0e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8000df0:	2000      	movs	r0, #0
 8000df2:	e006      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8000df4:	2001      	movs	r0, #1
}
 8000df6:	4770      	bx	lr
        return HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
 8000dfa:	e002      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	b002      	add	sp, #8
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
 8000e08:	e7fb      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	e7f9      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	e7f7      	b.n	8000e02 <HAL_RCC_OscConfig+0x3f6>
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420060 	.word	0x42420060

08000e1c <HAL_RCC_GetSysClockFreq>:
{
 8000e1c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e22:	f10d 0c18 	add.w	ip, sp, #24
 8000e26:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e2a:	f240 2301 	movw	r3, #513	; 0x201
 8000e2e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e36:	f003 020c 	and.w	r2, r3, #12
 8000e3a:	2a08      	cmp	r2, #8
 8000e3c:	d002      	beq.n	8000e44 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000e3e:	4810      	ldr	r0, [pc, #64]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000e40:	b006      	add	sp, #24
 8000e42:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000e48:	4462      	add	r2, ip
 8000e4a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e52:	d00c      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x60>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000e5c:	4463      	add	r3, ip
 8000e5e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <HAL_RCC_GetSysClockFreq+0x64>)
 8000e64:	fb00 f002 	mul.w	r0, r0, r2
 8000e68:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e6c:	e7e8      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <HAL_RCC_GetSysClockFreq+0x68>)
 8000e70:	fb00 f002 	mul.w	r0, r0, r2
 8000e74:	e7e4      	b.n	8000e40 <HAL_RCC_GetSysClockFreq+0x24>
 8000e76:	bf00      	nop
 8000e78:	08002da0 	.word	0x08002da0
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	007a1200 	.word	0x007a1200
 8000e84:	003d0900 	.word	0x003d0900

08000e88 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f000 80a0 	beq.w	8000fce <HAL_RCC_ClockConfig+0x146>
{
 8000e8e:	b570      	push	{r4, r5, r6, lr}
 8000e90:	460d      	mov	r5, r1
 8000e92:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e94:	4b52      	ldr	r3, [pc, #328]	; (8000fe0 <HAL_RCC_ClockConfig+0x158>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d20b      	bcs.n	8000eb8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_RCC_ClockConfig+0x158>)
 8000ea2:	6813      	ldr	r3, [r2, #0]
 8000ea4:	f023 0307 	bic.w	r3, r3, #7
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eac:	6813      	ldr	r3, [r2, #0]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	f040 808d 	bne.w	8000fd2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f013 0f02 	tst.w	r3, #2
 8000ebe:	d017      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec0:	f013 0f04 	tst.w	r3, #4
 8000ec4:	d004      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ec6:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000ec8:	6853      	ldr	r3, [r2, #4]
 8000eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000ece:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	f013 0f08 	tst.w	r3, #8
 8000ed6:	d004      	beq.n	8000ee2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ed8:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000eda:	6853      	ldr	r3, [r2, #4]
 8000edc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ee0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee2:	4a40      	ldr	r2, [pc, #256]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000ee4:	6853      	ldr	r3, [r2, #4]
 8000ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000eea:	68a1      	ldr	r1, [r4, #8]
 8000eec:	430b      	orrs	r3, r1
 8000eee:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	f013 0f01 	tst.w	r3, #1
 8000ef6:	d031      	beq.n	8000f5c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d020      	beq.n	8000f40 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d025      	beq.n	8000f4e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f02:	4a38      	ldr	r2, [pc, #224]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	f012 0f02 	tst.w	r2, #2
 8000f0a:	d064      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f0e:	684a      	ldr	r2, [r1, #4]
 8000f10:	f022 0203 	bic.w	r2, r2, #3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000f18:	f7ff fbcc 	bl	80006b4 <HAL_GetTick>
 8000f1c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f1e:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	6862      	ldr	r2, [r4, #4]
 8000f28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f2c:	d016      	beq.n	8000f5c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2e:	f7ff fbc1 	bl	80006b4 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	d9f0      	bls.n	8000f1e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	e045      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f48:	d1e0      	bne.n	8000f0c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e03e      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4e:	4a25      	ldr	r2, [pc, #148]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f56:	d1d9      	bne.n	8000f0c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
 8000f5a:	e037      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_RCC_ClockConfig+0x158>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	42ab      	cmp	r3, r5
 8000f66:	d90a      	bls.n	8000f7e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <HAL_RCC_ClockConfig+0x158>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f023 0307 	bic.w	r3, r3, #7
 8000f70:	432b      	orrs	r3, r5
 8000f72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	42ab      	cmp	r3, r5
 8000f7c:	d12d      	bne.n	8000fda <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f013 0f04 	tst.w	r3, #4
 8000f84:	d006      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f86:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f88:	6853      	ldr	r3, [r2, #4]
 8000f8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f8e:	68e1      	ldr	r1, [r4, #12]
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	f013 0f08 	tst.w	r3, #8
 8000f9a:	d007      	beq.n	8000fac <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000f9e:	6853      	ldr	r3, [r2, #4]
 8000fa0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fa4:	6921      	ldr	r1, [r4, #16]
 8000fa6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000faa:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fac:	f7ff ff36 	bl	8000e1c <HAL_RCC_GetSysClockFreq>
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HAL_RCC_ClockConfig+0x15c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_RCC_ClockConfig+0x160>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	40d8      	lsrs	r0, r3
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_RCC_ClockConfig+0x164>)
 8000fc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_ClockConfig+0x168>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	f7ff fb31 	bl	800062c <HAL_InitTick>
  return HAL_OK;
 8000fca:	2000      	movs	r0, #0
}
 8000fcc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
}
 8000fd0:	4770      	bx	lr
    return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	e7fa      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	e7f8      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8000fda:	2001      	movs	r0, #1
 8000fdc:	e7f6      	b.n	8000fcc <HAL_RCC_ClockConfig+0x144>
 8000fde:	bf00      	nop
 8000fe0:	40022000 	.word	0x40022000
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	08002d6c 	.word	0x08002d6c
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_RCC_GetHCLKFreq>:
}
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_RCC_GetHCLKFreq+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_RCC_GetPCLK1Freq>:
{
 8001000:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001002:	f7ff fff7 	bl	8000ff4 <HAL_RCC_GetHCLKFreq>
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800100e:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
}
 8001012:	40d8      	lsrs	r0, r3
 8001014:	bd08      	pop	{r3, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	08002d7c 	.word	0x08002d7c

08001020 <HAL_RCC_GetPCLK2Freq>:
{
 8001020:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001022:	f7ff ffe7 	bl	8000ff4 <HAL_RCC_GetHCLKFreq>
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800102e:	4a03      	ldr	r2, [pc, #12]	; (800103c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001030:	5cd3      	ldrb	r3, [r2, r3]
}
 8001032:	40d8      	lsrs	r0, r3
 8001034:	bd08      	pop	{r3, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	08002d7c 	.word	0x08002d7c

08001040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001040:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001042:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001044:	6a05      	ldr	r5, [r0, #32]
 8001046:	f025 0501 	bic.w	r5, r5, #1
 800104a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800104c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800104e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001052:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001056:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800105a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800105c:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800105e:	6203      	str	r3, [r0, #32]
}
 8001060:	bc30      	pop	{r4, r5}
 8001062:	4770      	bx	lr

08001064 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001064:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001066:	6a05      	ldr	r5, [r0, #32]
 8001068:	f025 0510 	bic.w	r5, r5, #16
 800106c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800106e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001070:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001072:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001076:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800107a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800107e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001082:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001084:	6203      	str	r3, [r0, #32]
}
 8001086:	bc30      	pop	{r4, r5}
 8001088:	4770      	bx	lr

0800108a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800108a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800108c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001090:	430b      	orrs	r3, r1
 8001092:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001096:	6083      	str	r3, [r0, #8]
}
 8001098:	4770      	bx	lr

0800109a <HAL_TIM_PeriodElapsedCallback>:
}
 800109a:	4770      	bx	lr

0800109c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800109c:	4770      	bx	lr

0800109e <HAL_TIM_IC_CaptureCallback>:
}
 800109e:	4770      	bx	lr

080010a0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80010a0:	4770      	bx	lr

080010a2 <HAL_TIM_TriggerCallback>:
}
 80010a2:	4770      	bx	lr

080010a4 <HAL_TIM_IRQHandler>:
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	f012 0f02 	tst.w	r2, #2
 80010b0:	d011      	beq.n	80010d6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	f012 0f02 	tst.w	r2, #2
 80010b8:	d00d      	beq.n	80010d6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010ba:	f06f 0202 	mvn.w	r2, #2
 80010be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010c4:	6803      	ldr	r3, [r0, #0]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f013 0f03 	tst.w	r3, #3
 80010cc:	d070      	beq.n	80011b0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	f7ff ffe6 	bl	800109e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d2:	2300      	movs	r3, #0
 80010d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	f012 0f04 	tst.w	r2, #4
 80010de:	d012      	beq.n	8001106 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	f012 0f04 	tst.w	r2, #4
 80010e6:	d00e      	beq.n	8001106 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010e8:	f06f 0204 	mvn.w	r2, #4
 80010ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80010fa:	d05f      	beq.n	80011bc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff ffce 	bl	800109e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001102:	2300      	movs	r3, #0
 8001104:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	f012 0f08 	tst.w	r2, #8
 800110e:	d012      	beq.n	8001136 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	f012 0f08 	tst.w	r2, #8
 8001116:	d00e      	beq.n	8001136 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001118:	f06f 0208 	mvn.w	r2, #8
 800111c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800111e:	2304      	movs	r3, #4
 8001120:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f013 0f03 	tst.w	r3, #3
 800112a:	d04e      	beq.n	80011ca <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff ffb6 	bl	800109e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001132:	2300      	movs	r3, #0
 8001134:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	f012 0f10 	tst.w	r2, #16
 800113e:	d012      	beq.n	8001166 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	f012 0f10 	tst.w	r2, #16
 8001146:	d00e      	beq.n	8001166 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001148:	f06f 0210 	mvn.w	r2, #16
 800114c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800114e:	2308      	movs	r3, #8
 8001150:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f413 7f40 	tst.w	r3, #768	; 0x300
 800115a:	d03d      	beq.n	80011d8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800115c:	4620      	mov	r0, r4
 800115e:	f7ff ff9e 	bl	800109e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001162:	2300      	movs	r3, #0
 8001164:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	f012 0f01 	tst.w	r2, #1
 800116e:	d003      	beq.n	8001178 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	f012 0f01 	tst.w	r2, #1
 8001176:	d136      	bne.n	80011e6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001180:	d003      	beq.n	800118a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001188:	d134      	bne.n	80011f4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001192:	d003      	beq.n	800119c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	f012 0f40 	tst.w	r2, #64	; 0x40
 800119a:	d132      	bne.n	8001202 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	f012 0f20 	tst.w	r2, #32
 80011a4:	d003      	beq.n	80011ae <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	f012 0f20 	tst.w	r2, #32
 80011ac:	d130      	bne.n	8001210 <HAL_TIM_IRQHandler+0x16c>
}
 80011ae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011b0:	f7ff ff74 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff ff73 	bl	80010a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80011ba:	e78a      	b.n	80010d2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff ff6d 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c2:	4620      	mov	r0, r4
 80011c4:	f7ff ff6c 	bl	80010a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80011c8:	e79b      	b.n	8001102 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff ff66 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff ff65 	bl	80010a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80011d6:	e7ac      	b.n	8001132 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff5f 	bl	800109c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff ff5e 	bl	80010a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80011e4:	e7bd      	b.n	8001162 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011e6:	f06f 0201 	mvn.w	r2, #1
 80011ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff ff54 	bl	800109a <HAL_TIM_PeriodElapsedCallback>
 80011f2:	e7c1      	b.n	8001178 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f000 f923 	bl	8001446 <HAL_TIMEx_BreakCallback>
 8001200:	e7c3      	b.n	800118a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001206:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff ff4a 	bl	80010a2 <HAL_TIM_TriggerCallback>
 800120e:	e7c5      	b.n	800119c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001210:	f06f 0220 	mvn.w	r2, #32
 8001214:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001216:	4620      	mov	r0, r4
 8001218:	f000 f914 	bl	8001444 <HAL_TIMEx_CommutCallback>
}
 800121c:	e7c7      	b.n	80011ae <HAL_TIM_IRQHandler+0x10a>
	...

08001220 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001220:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <TIM_Base_SetConfig+0x70>)
 8001224:	4290      	cmp	r0, r2
 8001226:	d00a      	beq.n	800123e <TIM_Base_SetConfig+0x1e>
 8001228:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800122c:	d007      	beq.n	800123e <TIM_Base_SetConfig+0x1e>
 800122e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001232:	4290      	cmp	r0, r2
 8001234:	d003      	beq.n	800123e <TIM_Base_SetConfig+0x1e>
 8001236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800123a:	4290      	cmp	r0, r2
 800123c:	d103      	bne.n	8001246 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800123e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001242:	684a      	ldr	r2, [r1, #4]
 8001244:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <TIM_Base_SetConfig+0x70>)
 8001248:	4290      	cmp	r0, r2
 800124a:	d00a      	beq.n	8001262 <TIM_Base_SetConfig+0x42>
 800124c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001250:	d007      	beq.n	8001262 <TIM_Base_SetConfig+0x42>
 8001252:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001256:	4290      	cmp	r0, r2
 8001258:	d003      	beq.n	8001262 <TIM_Base_SetConfig+0x42>
 800125a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800125e:	4290      	cmp	r0, r2
 8001260:	d103      	bne.n	800126a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001266:	68ca      	ldr	r2, [r1, #12]
 8001268:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800126a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800126e:	694a      	ldr	r2, [r1, #20]
 8001270:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001272:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001274:	688b      	ldr	r3, [r1, #8]
 8001276:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001278:	680b      	ldr	r3, [r1, #0]
 800127a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <TIM_Base_SetConfig+0x70>)
 800127e:	4298      	cmp	r0, r3
 8001280:	d002      	beq.n	8001288 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001282:	2301      	movs	r3, #1
 8001284:	6143      	str	r3, [r0, #20]
}
 8001286:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001288:	690b      	ldr	r3, [r1, #16]
 800128a:	6303      	str	r3, [r0, #48]	; 0x30
 800128c:	e7f9      	b.n	8001282 <TIM_Base_SetConfig+0x62>
 800128e:	bf00      	nop
 8001290:	40012c00 	.word	0x40012c00

08001294 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001294:	b340      	cbz	r0, 80012e8 <HAL_TIM_Base_Init+0x54>
{
 8001296:	b510      	push	{r4, lr}
 8001298:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800129a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800129e:	b1f3      	cbz	r3, 80012de <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012a6:	4621      	mov	r1, r4
 80012a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80012ac:	f7ff ffb8 	bl	8001220 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80012ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80012be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80012d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80012d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012da:	2000      	movs	r0, #0
}
 80012dc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80012de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80012e2:	f7ff f89d 	bl	8000420 <HAL_TIM_Base_MspInit>
 80012e6:	e7db      	b.n	80012a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
}
 80012ea:	4770      	bx	lr

080012ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80012ec:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80012ee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012f0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80012f4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80012f8:	430a      	orrs	r2, r1
 80012fa:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012fc:	6082      	str	r2, [r0, #8]
}
 80012fe:	bc10      	pop	{r4}
 8001300:	4770      	bx	lr

08001302 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001302:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d066      	beq.n	80013d8 <HAL_TIM_ConfigClockSource+0xd6>
{
 800130a:	b510      	push	{r4, lr}
 800130c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800130e:	2301      	movs	r3, #1
 8001310:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001314:	2302      	movs	r3, #2
 8001316:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800131a:	6802      	ldr	r2, [r0, #0]
 800131c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800131e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001326:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001328:	680b      	ldr	r3, [r1, #0]
 800132a:	2b60      	cmp	r3, #96	; 0x60
 800132c:	d040      	beq.n	80013b0 <HAL_TIM_ConfigClockSource+0xae>
 800132e:	d822      	bhi.n	8001376 <HAL_TIM_ConfigClockSource+0x74>
 8001330:	2b40      	cmp	r3, #64	; 0x40
 8001332:	d047      	beq.n	80013c4 <HAL_TIM_ConfigClockSource+0xc2>
 8001334:	d90b      	bls.n	800134e <HAL_TIM_ConfigClockSource+0x4c>
 8001336:	2b50      	cmp	r3, #80	; 0x50
 8001338:	d10e      	bne.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800133a:	68ca      	ldr	r2, [r1, #12]
 800133c:	6849      	ldr	r1, [r1, #4]
 800133e:	6800      	ldr	r0, [r0, #0]
 8001340:	f7ff fe7e 	bl	8001040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001344:	2150      	movs	r1, #80	; 0x50
 8001346:	6820      	ldr	r0, [r4, #0]
 8001348:	f7ff fe9f 	bl	800108a <TIM_ITRx_SetConfig>
      break;
 800134c:	e004      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800134e:	2b20      	cmp	r3, #32
 8001350:	d00c      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x6a>
 8001352:	d908      	bls.n	8001366 <HAL_TIM_ConfigClockSource+0x64>
 8001354:	2b30      	cmp	r3, #48	; 0x30
 8001356:	d009      	beq.n	800136c <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8001358:	2301      	movs	r3, #1
 800135a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800135e:	2000      	movs	r0, #0
 8001360:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001364:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8001366:	b10b      	cbz	r3, 800136c <HAL_TIM_ConfigClockSource+0x6a>
 8001368:	2b10      	cmp	r3, #16
 800136a:	d1f5      	bne.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800136c:	4619      	mov	r1, r3
 800136e:	6820      	ldr	r0, [r4, #0]
 8001370:	f7ff fe8b 	bl	800108a <TIM_ITRx_SetConfig>
        break;
 8001374:	e7f0      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001376:	2b70      	cmp	r3, #112	; 0x70
 8001378:	d00e      	beq.n	8001398 <HAL_TIM_ConfigClockSource+0x96>
 800137a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800137e:	d1eb      	bne.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001380:	68cb      	ldr	r3, [r1, #12]
 8001382:	684a      	ldr	r2, [r1, #4]
 8001384:	6889      	ldr	r1, [r1, #8]
 8001386:	6800      	ldr	r0, [r0, #0]
 8001388:	f7ff ffb0 	bl	80012ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800138c:	6822      	ldr	r2, [r4, #0]
 800138e:	6893      	ldr	r3, [r2, #8]
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6093      	str	r3, [r2, #8]
      break;
 8001396:	e7df      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001398:	68cb      	ldr	r3, [r1, #12]
 800139a:	684a      	ldr	r2, [r1, #4]
 800139c:	6889      	ldr	r1, [r1, #8]
 800139e:	6800      	ldr	r0, [r0, #0]
 80013a0:	f7ff ffa4 	bl	80012ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80013a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80013ac:	6093      	str	r3, [r2, #8]
      break;
 80013ae:	e7d3      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80013b0:	68ca      	ldr	r2, [r1, #12]
 80013b2:	6849      	ldr	r1, [r1, #4]
 80013b4:	6800      	ldr	r0, [r0, #0]
 80013b6:	f7ff fe55 	bl	8001064 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80013ba:	2160      	movs	r1, #96	; 0x60
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	f7ff fe64 	bl	800108a <TIM_ITRx_SetConfig>
      break;
 80013c2:	e7c9      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80013c4:	68ca      	ldr	r2, [r1, #12]
 80013c6:	6849      	ldr	r1, [r1, #4]
 80013c8:	6800      	ldr	r0, [r0, #0]
 80013ca:	f7ff fe39 	bl	8001040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	f7ff fe5a 	bl	800108a <TIM_ITRx_SetConfig>
      break;
 80013d6:	e7bf      	b.n	8001358 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80013d8:	2002      	movs	r0, #2
}
 80013da:	4770      	bx	lr

080013dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80013dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d02b      	beq.n	800143c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80013e4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80013e6:	2301      	movs	r3, #1
 80013e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80013f2:	6803      	ldr	r3, [r0, #0]
 80013f4:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013f6:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80013f8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013fc:	680a      	ldr	r2, [r1, #0]
 80013fe:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d00a      	beq.n	8001420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800140a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140e:	d007      	beq.n	8001420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001410:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001414:	4293      	cmp	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800141c:	4293      	cmp	r3, r2
 800141e:	d104      	bne.n	800142a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001420:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001424:	684a      	ldr	r2, [r1, #4]
 8001426:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001428:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800142a:	2301      	movs	r3, #1
 800142c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001430:	2300      	movs	r3, #0
 8001432:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001436:	4618      	mov	r0, r3
}
 8001438:	bc30      	pop	{r4, r5}
 800143a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800143c:	2002      	movs	r0, #2
}
 800143e:	4770      	bx	lr
 8001440:	40012c00 	.word	0x40012c00

08001444 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001444:	4770      	bx	lr

08001446 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001446:	4770      	bx	lr

08001448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001448:	b510      	push	{r4, lr}
 800144a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800144c:	6802      	ldr	r2, [r0, #0]
 800144e:	6913      	ldr	r3, [r2, #16]
 8001450:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001454:	68c1      	ldr	r1, [r0, #12]
 8001456:	430b      	orrs	r3, r1
 8001458:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800145a:	6883      	ldr	r3, [r0, #8]
 800145c:	6902      	ldr	r2, [r0, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	6942      	ldr	r2, [r0, #20]
 8001462:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001464:	6801      	ldr	r1, [r0, #0]
 8001466:	68cb      	ldr	r3, [r1, #12]
 8001468:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800146c:	f023 030c 	bic.w	r3, r3, #12
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001474:	6802      	ldr	r2, [r0, #0]
 8001476:	6953      	ldr	r3, [r2, #20]
 8001478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800147c:	6981      	ldr	r1, [r0, #24]
 800147e:	430b      	orrs	r3, r1
 8001480:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <UART_SetConfig+0x88>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d01f      	beq.n	80014ca <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800148a:	f7ff fdb9 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800148e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001492:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001496:	6862      	ldr	r2, [r4, #4]
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	fbb3 f2f2 	udiv	r2, r3, r2
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <UART_SetConfig+0x8c>)
 80014a0:	fba0 3102 	umull	r3, r1, r0, r2
 80014a4:	0949      	lsrs	r1, r1, #5
 80014a6:	2364      	movs	r3, #100	; 0x64
 80014a8:	fb03 2311 	mls	r3, r3, r1, r2
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	3332      	adds	r3, #50	; 0x32
 80014b0:	fba0 2303 	umull	r2, r3, r0, r3
 80014b4:	095b      	lsrs	r3, r3, #5
 80014b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014ba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	6821      	ldr	r1, [r4, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80014c8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80014ca:	f7ff fda9 	bl	8001020 <HAL_RCC_GetPCLK2Freq>
 80014ce:	e7de      	b.n	800148e <UART_SetConfig+0x46>
 80014d0:	40013800 	.word	0x40013800
 80014d4:	51eb851f 	.word	0x51eb851f

080014d8 <UART_WaitOnFlagUntilTimeout>:
{
 80014d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014dc:	4605      	mov	r5, r0
 80014de:	460f      	mov	r7, r1
 80014e0:	4616      	mov	r6, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014e8:	682c      	ldr	r4, [r5, #0]
 80014ea:	6824      	ldr	r4, [r4, #0]
 80014ec:	ea37 0304 	bics.w	r3, r7, r4
 80014f0:	bf0c      	ite	eq
 80014f2:	2401      	moveq	r4, #1
 80014f4:	2400      	movne	r4, #0
 80014f6:	42b4      	cmp	r4, r6
 80014f8:	d11f      	bne.n	800153a <UART_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80014fa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80014fe:	d0f3      	beq.n	80014e8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001500:	f1b8 0f00 	cmp.w	r8, #0
 8001504:	d005      	beq.n	8001512 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001506:	f7ff f8d5 	bl	80006b4 <HAL_GetTick>
 800150a:	eba0 0009 	sub.w	r0, r0, r9
 800150e:	4540      	cmp	r0, r8
 8001510:	d9ea      	bls.n	80014e8 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001512:	682a      	ldr	r2, [r5, #0]
 8001514:	68d3      	ldr	r3, [r2, #12]
 8001516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800151a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151c:	682a      	ldr	r2, [r5, #0]
 800151e:	6953      	ldr	r3, [r2, #20]
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001526:	2320      	movs	r3, #32
 8001528:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800152c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001530:	2300      	movs	r3, #0
 8001532:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
 8001538:	e000      	b.n	800153c <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 800153a:	2000      	movs	r0, #0
}
 800153c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001540 <HAL_UART_Init>:
  if (huart == NULL)
 8001540:	b358      	cbz	r0, 800159a <HAL_UART_Init+0x5a>
{
 8001542:	b510      	push	{r4, lr}
 8001544:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001546:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800154a:	b30b      	cbz	r3, 8001590 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800154c:	2324      	movs	r3, #36	; 0x24
 800154e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001552:	6822      	ldr	r2, [r4, #0]
 8001554:	68d3      	ldr	r3, [r2, #12]
 8001556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800155a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff73 	bl	8001448 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001562:	6822      	ldr	r2, [r4, #0]
 8001564:	6913      	ldr	r3, [r2, #16]
 8001566:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800156a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800156c:	6822      	ldr	r2, [r4, #0]
 800156e:	6953      	ldr	r3, [r2, #20]
 8001570:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001574:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001576:	6822      	ldr	r2, [r4, #0]
 8001578:	68d3      	ldr	r3, [r2, #12]
 800157a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001580:	2000      	movs	r0, #0
 8001582:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001584:	2320      	movs	r3, #32
 8001586:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800158a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800158e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001590:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001594:	f7fe ff64 	bl	8000460 <HAL_UART_MspInit>
 8001598:	e7d8      	b.n	800154c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
}
 800159c:	4770      	bx	lr

0800159e <HAL_UART_Transmit>:
{
 800159e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d154      	bne.n	800165a <HAL_UART_Transmit+0xbc>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80015b6:	2900      	cmp	r1, #0
 80015b8:	d053      	beq.n	8001662 <HAL_UART_Transmit+0xc4>
 80015ba:	2a00      	cmp	r2, #0
 80015bc:	d053      	beq.n	8001666 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80015be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d051      	beq.n	800166a <HAL_UART_Transmit+0xcc>
 80015c6:	2301      	movs	r3, #1
 80015c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015d0:	2321      	movs	r3, #33	; 0x21
 80015d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80015d6:	f7ff f86d 	bl	80006b4 <HAL_GetTick>
 80015da:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80015dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80015e0:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e4:	68a3      	ldr	r3, [r4, #8]
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d005      	beq.n	80015f8 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 80015ec:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80015f0:	2300      	movs	r3, #0
 80015f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80015f6:	e012      	b.n	800161e <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015f8:	6923      	ldr	r3, [r4, #16]
 80015fa:	b113      	cbz	r3, 8001602 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80015fc:	f04f 0800 	mov.w	r8, #0
 8001600:	e7f6      	b.n	80015f0 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8001602:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001604:	2500      	movs	r5, #0
 8001606:	e7f3      	b.n	80015f0 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001608:	f838 3b02 	ldrh.w	r3, [r8], #2
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001612:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001614:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001616:	b292      	uxth	r2, r2
 8001618:	3a01      	subs	r2, #1
 800161a:	b292      	uxth	r2, r2
 800161c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800161e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001620:	b29b      	uxth	r3, r3
 8001622:	b173      	cbz	r3, 8001642 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001624:	9600      	str	r6, [sp, #0]
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4620      	mov	r0, r4
 800162e:	f7ff ff53 	bl	80014d8 <UART_WaitOnFlagUntilTimeout>
 8001632:	b9e0      	cbnz	r0, 800166e <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8001634:	2d00      	cmp	r5, #0
 8001636:	d0e7      	beq.n	8001608 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001638:	f815 2b01 	ldrb.w	r2, [r5], #1
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001640:	e7e8      	b.n	8001614 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001642:	9600      	str	r6, [sp, #0]
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff ff44 	bl	80014d8 <UART_WaitOnFlagUntilTimeout>
 8001650:	b978      	cbnz	r0, 8001672 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8001652:	2320      	movs	r3, #32
 8001654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001658:	e000      	b.n	800165c <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 800165a:	2002      	movs	r0, #2
}
 800165c:	b002      	add	sp, #8
 800165e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	e7fa      	b.n	800165c <HAL_UART_Transmit+0xbe>
 8001666:	2001      	movs	r0, #1
 8001668:	e7f8      	b.n	800165c <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 800166a:	2002      	movs	r0, #2
 800166c:	e7f6      	b.n	800165c <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 800166e:	2003      	movs	r0, #3
 8001670:	e7f4      	b.n	800165c <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001672:	2003      	movs	r0, #3
 8001674:	e7f2      	b.n	800165c <HAL_UART_Transmit+0xbe>

08001676 <HAL_UART_Receive>:
{
 8001676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800167e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b20      	cmp	r3, #32
 8001686:	d15c      	bne.n	8001742 <HAL_UART_Receive+0xcc>
 8001688:	4604      	mov	r4, r0
 800168a:	460d      	mov	r5, r1
 800168c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800168e:	2900      	cmp	r1, #0
 8001690:	d05b      	beq.n	800174a <HAL_UART_Receive+0xd4>
 8001692:	2a00      	cmp	r2, #0
 8001694:	d05b      	beq.n	800174e <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8001696:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800169a:	2b01      	cmp	r3, #1
 800169c:	d059      	beq.n	8001752 <HAL_UART_Receive+0xdc>
 800169e:	2301      	movs	r3, #1
 80016a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016a8:	2222      	movs	r2, #34	; 0x22
 80016aa:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016ae:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 80016b0:	f7ff f800 	bl	80006b4 <HAL_GetTick>
 80016b4:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80016b6:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016ba:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016be:	68a3      	ldr	r3, [r4, #8]
 80016c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c4:	d005      	beq.n	80016d2 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 80016c6:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 80016ca:	2300      	movs	r3, #0
 80016cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 80016d0:	e017      	b.n	8001702 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016d2:	6923      	ldr	r3, [r4, #16]
 80016d4:	b113      	cbz	r3, 80016dc <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 80016d6:	f04f 0800 	mov.w	r8, #0
 80016da:	e7f6      	b.n	80016ca <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 80016dc:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80016de:	2500      	movs	r5, #0
 80016e0:	e7f3      	b.n	80016ca <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ea:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 80016ee:	e003      	b.n	80016f8 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 80016f6:	3501      	adds	r5, #1
      huart->RxXferCount--;
 80016f8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80016fa:	b292      	uxth	r2, r2
 80016fc:	3a01      	subs	r2, #1
 80016fe:	b292      	uxth	r2, r2
 8001700:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001702:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001704:	b29b      	uxth	r3, r3
 8001706:	b1bb      	cbz	r3, 8001738 <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001708:	9600      	str	r6, [sp, #0]
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	2120      	movs	r1, #32
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fee1 	bl	80014d8 <UART_WaitOnFlagUntilTimeout>
 8001716:	b9f0      	cbnz	r0, 8001756 <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 8001718:	2d00      	cmp	r5, #0
 800171a:	d0e2      	beq.n	80016e2 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800171c:	68a3      	ldr	r3, [r4, #8]
 800171e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001722:	d0e5      	beq.n	80016f0 <HAL_UART_Receive+0x7a>
 8001724:	b913      	cbnz	r3, 800172c <HAL_UART_Receive+0xb6>
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e1      	beq.n	80016f0 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001734:	702b      	strb	r3, [r5, #0]
 8001736:	e7de      	b.n	80016f6 <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8001738:	2320      	movs	r3, #32
 800173a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800173e:	2000      	movs	r0, #0
 8001740:	e000      	b.n	8001744 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8001742:	2002      	movs	r0, #2
}
 8001744:	b002      	add	sp, #8
 8001746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800174a:	2001      	movs	r0, #1
 800174c:	e7fa      	b.n	8001744 <HAL_UART_Receive+0xce>
 800174e:	2001      	movs	r0, #1
 8001750:	e7f8      	b.n	8001744 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8001752:	2002      	movs	r0, #2
 8001754:	e7f6      	b.n	8001744 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
 8001758:	e7f4      	b.n	8001744 <HAL_UART_Receive+0xce>

0800175a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800175a:	2884      	cmp	r0, #132	; 0x84
 800175c:	d001      	beq.n	8001762 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800175e:	3003      	adds	r0, #3
 8001760:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001762:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001764:	4770      	bx	lr

08001766 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001766:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001768:	f000 fd58 	bl	800221c <vTaskStartScheduler>
  
  return osOK;
}
 800176c:	2000      	movs	r0, #0
 800176e:	bd08      	pop	{r3, pc}

08001770 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001774:	b087      	sub	sp, #28
 8001776:	4604      	mov	r4, r0
 8001778:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800177a:	6945      	ldr	r5, [r0, #20]
 800177c:	b1bd      	cbz	r5, 80017ae <osThreadCreate+0x3e>
 800177e:	6986      	ldr	r6, [r0, #24]
 8001780:	b1ae      	cbz	r6, 80017ae <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001782:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001786:	f8d0 9000 	ldr.w	r9, [r0]
 800178a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800178e:	f7ff ffe4 	bl	800175a <makeFreeRtosPriority>
 8001792:	9602      	str	r6, [sp, #8]
 8001794:	9501      	str	r5, [sp, #4]
 8001796:	9000      	str	r0, [sp, #0]
 8001798:	463b      	mov	r3, r7
 800179a:	6922      	ldr	r2, [r4, #16]
 800179c:	4649      	mov	r1, r9
 800179e:	4640      	mov	r0, r8
 80017a0:	f000 fcce 	bl	8002140 <xTaskCreateStatic>
 80017a4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80017a6:	9805      	ldr	r0, [sp, #20]
}
 80017a8:	b007      	add	sp, #28
 80017aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017ae:	6865      	ldr	r5, [r4, #4]
 80017b0:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017b2:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017b6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80017ba:	f7ff ffce 	bl	800175a <makeFreeRtosPriority>
 80017be:	ab05      	add	r3, sp, #20
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	9000      	str	r0, [sp, #0]
 80017c4:	463b      	mov	r3, r7
 80017c6:	fa1f f288 	uxth.w	r2, r8
 80017ca:	4631      	mov	r1, r6
 80017cc:	4628      	mov	r0, r5
 80017ce:	f000 fcf0 	bl	80021b2 <xTaskCreate>
 80017d2:	2801      	cmp	r0, #1
 80017d4:	d0e7      	beq.n	80017a6 <osThreadCreate+0x36>
      return NULL;
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7e6      	b.n	80017a8 <osThreadCreate+0x38>

080017da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80017da:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80017dc:	b900      	cbnz	r0, 80017e0 <osDelay+0x6>
 80017de:	2001      	movs	r0, #1
 80017e0:	f000 fe62 	bl	80024a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80017e4:	2000      	movs	r0, #0
 80017e6:	bd08      	pop	{r3, pc}

080017e8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80017e8:	b500      	push	{lr}
 80017ea:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80017ec:	6882      	ldr	r2, [r0, #8]
 80017ee:	b142      	cbz	r2, 8001802 <osMessageCreate+0x1a>
 80017f0:	68c3      	ldr	r3, [r0, #12]
 80017f2:	b133      	cbz	r3, 8001802 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80017f4:	2100      	movs	r1, #0
 80017f6:	9100      	str	r1, [sp, #0]
 80017f8:	6841      	ldr	r1, [r0, #4]
 80017fa:	6800      	ldr	r0, [r0, #0]
 80017fc:	f000 f93e 	bl	8001a7c <xQueueGenericCreateStatic>
 8001800:	e004      	b.n	800180c <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001802:	2200      	movs	r2, #0
 8001804:	6841      	ldr	r1, [r0, #4]
 8001806:	6800      	ldr	r0, [r0, #0]
 8001808:	f000 f981 	bl	8001b0e <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800180c:	b003      	add	sp, #12
 800180e:	f85d fb04 	ldr.w	pc, [sp], #4

08001812 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001812:	f100 0308 	add.w	r3, r0, #8
 8001816:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800181e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001820:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001826:	4770      	bx	lr

08001828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800182c:	4770      	bx	lr

0800182e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800182e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001830:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001836:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001838:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800183a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800183c:	6803      	ldr	r3, [r0, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	6003      	str	r3, [r0, #0]
}
 8001842:	4770      	bx	lr

08001844 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001844:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001846:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001848:	f1b5 3fff 	cmp.w	r5, #4294967295
 800184c:	d011      	beq.n	8001872 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800184e:	f100 0308 	add.w	r3, r0, #8
 8001852:	461c      	mov	r4, r3
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	42aa      	cmp	r2, r5
 800185a:	d9fa      	bls.n	8001852 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001860:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001862:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001864:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001866:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001868:	6803      	ldr	r3, [r0, #0]
 800186a:	3301      	adds	r3, #1
 800186c:	6003      	str	r3, [r0, #0]
}
 800186e:	bc30      	pop	{r4, r5}
 8001870:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001872:	6904      	ldr	r4, [r0, #16]
 8001874:	e7f2      	b.n	800185c <vListInsert+0x18>

08001876 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001876:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001878:	6841      	ldr	r1, [r0, #4]
 800187a:	6882      	ldr	r2, [r0, #8]
 800187c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800187e:	6841      	ldr	r1, [r0, #4]
 8001880:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4282      	cmp	r2, r0
 8001886:	d006      	beq.n	8001896 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001888:	2200      	movs	r2, #0
 800188a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	3a01      	subs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001892:	6818      	ldr	r0, [r3, #0]
}
 8001894:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001896:	6882      	ldr	r2, [r0, #8]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e7f5      	b.n	8001888 <uxListRemove+0x12>

0800189c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800189c:	b510      	push	{r4, lr}
 800189e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018a0:	f000 ffe8 	bl	8002874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d004      	beq.n	80018b6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80018ac:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80018ae:	f001 f803 	bl	80028b8 <vPortExitCritical>

	return xReturn;
}
 80018b2:	4620      	mov	r0, r4
 80018b4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80018b6:	2401      	movs	r4, #1
 80018b8:	e7f9      	b.n	80018ae <prvIsQueueFull+0x12>

080018ba <prvIsQueueEmpty>:
{
 80018ba:	b510      	push	{r4, lr}
 80018bc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80018be:	f000 ffd9 	bl	8002874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80018c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018c4:	b923      	cbnz	r3, 80018d0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80018c6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80018c8:	f000 fff6 	bl	80028b8 <vPortExitCritical>
}
 80018cc:	4620      	mov	r0, r4
 80018ce:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80018d0:	2400      	movs	r4, #0
 80018d2:	e7f9      	b.n	80018c8 <prvIsQueueEmpty+0xe>

080018d4 <prvCopyDataToQueue>:
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4604      	mov	r4, r0
 80018d8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018da:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80018de:	b95a      	cbnz	r2, 80018f8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018e0:	6803      	ldr	r3, [r0, #0]
 80018e2:	b11b      	cbz	r3, 80018ec <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80018e4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018e6:	3601      	adds	r6, #1
 80018e8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80018ec:	6840      	ldr	r0, [r0, #4]
 80018ee:	f000 ff0f 	bl	8002710 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	6063      	str	r3, [r4, #4]
 80018f6:	e7f6      	b.n	80018e6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80018f8:	b96d      	cbnz	r5, 8001916 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018fa:	6880      	ldr	r0, [r0, #8]
 80018fc:	f001 f9d8 	bl	8002cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001900:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001902:	68a3      	ldr	r3, [r4, #8]
 8001904:	4413      	add	r3, r2
 8001906:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	4293      	cmp	r3, r2
 800190c:	d319      	bcc.n	8001942 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001912:	4628      	mov	r0, r5
 8001914:	e7e7      	b.n	80018e6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001916:	68c0      	ldr	r0, [r0, #12]
 8001918:	f001 f9ca 	bl	8002cb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800191c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800191e:	4251      	negs	r1, r2
 8001920:	68e3      	ldr	r3, [r4, #12]
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	4293      	cmp	r3, r2
 800192a:	d202      	bcs.n	8001932 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800192c:	6863      	ldr	r3, [r4, #4]
 800192e:	440b      	add	r3, r1
 8001930:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001932:	2d02      	cmp	r5, #2
 8001934:	d001      	beq.n	800193a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8001936:	2000      	movs	r0, #0
 8001938:	e7d5      	b.n	80018e6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800193a:	b126      	cbz	r6, 8001946 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800193c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800193e:	2000      	movs	r0, #0
 8001940:	e7d1      	b.n	80018e6 <prvCopyDataToQueue+0x12>
 8001942:	4628      	mov	r0, r5
 8001944:	e7cf      	b.n	80018e6 <prvCopyDataToQueue+0x12>
 8001946:	2000      	movs	r0, #0
 8001948:	e7cd      	b.n	80018e6 <prvCopyDataToQueue+0x12>

0800194a <prvCopyDataFromQueue>:
{
 800194a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800194c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800194e:	b16a      	cbz	r2, 800196c <prvCopyDataFromQueue+0x22>
{
 8001950:	b510      	push	{r4, lr}
 8001952:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	4411      	add	r1, r2
 8001958:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800195a:	685c      	ldr	r4, [r3, #4]
 800195c:	42a1      	cmp	r1, r4
 800195e:	d301      	bcc.n	8001964 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001964:	68d9      	ldr	r1, [r3, #12]
 8001966:	f001 f9a3 	bl	8002cb0 <memcpy>
}
 800196a:	bd10      	pop	{r4, pc}
 800196c:	4770      	bx	lr

0800196e <prvUnlockQueue>:
{
 800196e:	b538      	push	{r3, r4, r5, lr}
 8001970:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8001972:	f000 ff7f 	bl	8002874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001976:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800197a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800197c:	e003      	b.n	8001986 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800197e:	f000 feb1 	bl	80026e4 <vTaskMissedYield>
			--cTxLock;
 8001982:	3c01      	subs	r4, #1
 8001984:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001986:	2c00      	cmp	r4, #0
 8001988:	dd08      	ble.n	800199c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800198a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800198c:	b133      	cbz	r3, 800199c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001992:	f000 fe13 	bl	80025bc <xTaskRemoveFromEventList>
 8001996:	2800      	cmp	r0, #0
 8001998:	d0f3      	beq.n	8001982 <prvUnlockQueue+0x14>
 800199a:	e7f0      	b.n	800197e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800199c:	23ff      	movs	r3, #255	; 0xff
 800199e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80019a2:	f000 ff89 	bl	80028b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80019a6:	f000 ff65 	bl	8002874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80019aa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80019ae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019b0:	e003      	b.n	80019ba <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80019b2:	f000 fe97 	bl	80026e4 <vTaskMissedYield>
				--cRxLock;
 80019b6:	3c01      	subs	r4, #1
 80019b8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	dd08      	ble.n	80019d0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019be:	692b      	ldr	r3, [r5, #16]
 80019c0:	b133      	cbz	r3, 80019d0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019c2:	f105 0010 	add.w	r0, r5, #16
 80019c6:	f000 fdf9 	bl	80025bc <xTaskRemoveFromEventList>
 80019ca:	2800      	cmp	r0, #0
 80019cc:	d0f3      	beq.n	80019b6 <prvUnlockQueue+0x48>
 80019ce:	e7f0      	b.n	80019b2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80019d0:	23ff      	movs	r3, #255	; 0xff
 80019d2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80019d6:	f000 ff6f 	bl	80028b8 <vPortExitCritical>
}
 80019da:	bd38      	pop	{r3, r4, r5, pc}

080019dc <xQueueGenericReset>:
{
 80019dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80019de:	b1e0      	cbz	r0, 8001a1a <xQueueGenericReset+0x3e>
 80019e0:	460d      	mov	r5, r1
 80019e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80019e4:	f000 ff46 	bl	8002874 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019e8:	6821      	ldr	r1, [r4, #0]
 80019ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80019ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ee:	fb03 1002 	mla	r0, r3, r2, r1
 80019f2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019f4:	2000      	movs	r0, #0
 80019f6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019f8:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80019fa:	3a01      	subs	r2, #1
 80019fc:	fb02 1303 	mla	r3, r2, r3, r1
 8001a00:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a02:	23ff      	movs	r3, #255	; 0xff
 8001a04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001a0c:	b9ed      	cbnz	r5, 8001a4a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a0e:	6923      	ldr	r3, [r4, #16]
 8001a10:	b963      	cbnz	r3, 8001a2c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8001a12:	f000 ff51 	bl	80028b8 <vPortExitCritical>
}
 8001a16:	2001      	movs	r0, #1
 8001a18:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001a2a:	e7fe      	b.n	8001a2a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a2c:	f104 0010 	add.w	r0, r4, #16
 8001a30:	f000 fdc4 	bl	80025bc <xTaskRemoveFromEventList>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d0ec      	beq.n	8001a12 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <xQueueGenericReset+0x80>)
 8001a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	f3bf 8f4f 	dsb	sy
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	e7e3      	b.n	8001a12 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a4a:	f104 0010 	add.w	r0, r4, #16
 8001a4e:	f7ff fee0 	bl	8001812 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a52:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a56:	f7ff fedc 	bl	8001812 <vListInitialise>
 8001a5a:	e7da      	b.n	8001a12 <xQueueGenericReset+0x36>
 8001a5c:	e000ed04 	.word	0xe000ed04

08001a60 <prvInitialiseNewQueue>:
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4603      	mov	r3, r0
 8001a64:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a66:	460c      	mov	r4, r1
 8001a68:	b931      	cbnz	r1, 8001a78 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a6a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a6e:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a70:	2101      	movs	r1, #1
 8001a72:	f7ff ffb3 	bl	80019dc <xQueueGenericReset>
}
 8001a76:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a78:	6002      	str	r2, [r0, #0]
 8001a7a:	e7f7      	b.n	8001a6c <prvInitialiseNewQueue+0xc>

08001a7c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a7c:	b940      	cbnz	r0, 8001a90 <xQueueGenericCreateStatic+0x14>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <xQueueGenericCreateStatic+0x12>
	{
 8001a90:	b530      	push	{r4, r5, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	461c      	mov	r4, r3
 8001a96:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8001a98:	b153      	cbz	r3, 8001ab0 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a9a:	b192      	cbz	r2, 8001ac2 <xQueueGenericCreateStatic+0x46>
 8001a9c:	b989      	cbnz	r1, 8001ac2 <xQueueGenericCreateStatic+0x46>
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	e7fe      	b.n	8001aae <xQueueGenericCreateStatic+0x32>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001ac0:	e7fe      	b.n	8001ac0 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ac2:	b16a      	cbz	r2, 8001ae0 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ac4:	2348      	movs	r3, #72	; 0x48
 8001ac6:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	2b48      	cmp	r3, #72	; 0x48
 8001acc:	d013      	beq.n	8001af6 <xQueueGenericCreateStatic+0x7a>
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	e7fe      	b.n	8001ade <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	d0ef      	beq.n	8001ac4 <xQueueGenericCreateStatic+0x48>
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	e7fe      	b.n	8001af4 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001afc:	9400      	str	r4, [sp, #0]
 8001afe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001b02:	4628      	mov	r0, r5
 8001b04:	f7ff ffac 	bl	8001a60 <prvInitialiseNewQueue>
	}
 8001b08:	4620      	mov	r0, r4
 8001b0a:	b005      	add	sp, #20
 8001b0c:	bd30      	pop	{r4, r5, pc}

08001b0e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b0e:	b940      	cbnz	r0, 8001b22 <xQueueGenericCreate+0x14>
 8001b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b14:	f383 8811 	msr	BASEPRI, r3
 8001b18:	f3bf 8f6f 	isb	sy
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	e7fe      	b.n	8001b20 <xQueueGenericCreate+0x12>
	{
 8001b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b24:	b083      	sub	sp, #12
 8001b26:	460c      	mov	r4, r1
 8001b28:	4616      	mov	r6, r2
 8001b2a:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8001b2c:	b1a1      	cbz	r1, 8001b58 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b2e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001b32:	3048      	adds	r0, #72	; 0x48
 8001b34:	f000 ffe8 	bl	8002b08 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001b38:	4605      	mov	r5, r0
 8001b3a:	b150      	cbz	r0, 8001b52 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b42:	9000      	str	r0, [sp, #0]
 8001b44:	4633      	mov	r3, r6
 8001b46:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	4638      	mov	r0, r7
 8001b4e:	f7ff ff87 	bl	8001a60 <prvInitialiseNewQueue>
	}
 8001b52:	4628      	mov	r0, r5
 8001b54:	b003      	add	sp, #12
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8001b58:	4608      	mov	r0, r1
 8001b5a:	e7ea      	b.n	8001b32 <xQueueGenericCreate+0x24>

08001b5c <xQueueGenericSend>:
{
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001b62:	b188      	cbz	r0, 8001b88 <xQueueGenericSend+0x2c>
 8001b64:	460e      	mov	r6, r1
 8001b66:	461d      	mov	r5, r3
 8001b68:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b6a:	b1b1      	cbz	r1, 8001b9a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b6c:	2d02      	cmp	r5, #2
 8001b6e:	d120      	bne.n	8001bb2 <xQueueGenericSend+0x56>
 8001b70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d01d      	beq.n	8001bb2 <xQueueGenericSend+0x56>
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	e7fe      	b.n	8001b86 <xQueueGenericSend+0x2a>
 8001b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001b98:	e7fe      	b.n	8001b98 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0e5      	beq.n	8001b6c <xQueueGenericSend+0x10>
 8001ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba4:	f383 8811 	msr	BASEPRI, r3
 8001ba8:	f3bf 8f6f 	isb	sy
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	e7fe      	b.n	8001bb0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bb2:	f000 fd9d 	bl	80026f0 <xTaskGetSchedulerState>
 8001bb6:	4607      	mov	r7, r0
 8001bb8:	b958      	cbnz	r0, 8001bd2 <xQueueGenericSend+0x76>
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d044      	beq.n	8001c4a <xQueueGenericSend+0xee>
 8001bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	e7fe      	b.n	8001bd0 <xQueueGenericSend+0x74>
 8001bd2:	2700      	movs	r7, #0
 8001bd4:	e039      	b.n	8001c4a <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	4631      	mov	r1, r6
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff fe7a 	bl	80018d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001be0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001be2:	b96a      	cbnz	r2, 8001c00 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8001be4:	b138      	cbz	r0, 8001bf6 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8001be6:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <xQueueGenericSend+0x17c>)
 8001be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001bf6:	f000 fe5f 	bl	80028b8 <vPortExitCritical>
				return pdPASS;
 8001bfa:	2001      	movs	r0, #1
}
 8001bfc:	b005      	add	sp, #20
 8001bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c04:	f000 fcda 	bl	80025bc <xTaskRemoveFromEventList>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d0f4      	beq.n	8001bf6 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <xQueueGenericSend+0x17c>)
 8001c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	e7eb      	b.n	8001bf6 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8001c1e:	f000 fe4b 	bl	80028b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001c22:	2000      	movs	r0, #0
 8001c24:	e7ea      	b.n	8001bfc <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c26:	a802      	add	r0, sp, #8
 8001c28:	f000 fd0e 	bl	8002648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	e019      	b.n	8001c64 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8001c30:	2300      	movs	r3, #0
 8001c32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001c36:	e021      	b.n	8001c7c <xQueueGenericSend+0x120>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c3e:	e023      	b.n	8001c88 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff fe94 	bl	800196e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c46:	f000 fbb3 	bl	80023b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001c4a:	f000 fe13 	bl	8002874 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3bf      	bcc.n	8001bd6 <xQueueGenericSend+0x7a>
 8001c56:	2d02      	cmp	r5, #2
 8001c58:	d0bd      	beq.n	8001bd6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0de      	beq.n	8001c1e <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 8001c60:	2f00      	cmp	r7, #0
 8001c62:	d0e0      	beq.n	8001c26 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 8001c64:	f000 fe28 	bl	80028b8 <vPortExitCritical>
		vTaskSuspendAll();
 8001c68:	f000 fb0e 	bl	8002288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c6c:	f000 fe02 	bl	8002874 <vPortEnterCritical>
 8001c70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7a:	d0d9      	beq.n	8001c30 <xQueueGenericSend+0xd4>
 8001c7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d0d7      	beq.n	8001c38 <xQueueGenericSend+0xdc>
 8001c88:	f000 fe16 	bl	80028b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c8c:	a901      	add	r1, sp, #4
 8001c8e:	a802      	add	r0, sp, #8
 8001c90:	f000 fce6 	bl	8002660 <xTaskCheckForTimeOut>
 8001c94:	b9c8      	cbnz	r0, 8001cca <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff fe00 	bl	800189c <prvIsQueueFull>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d0cf      	beq.n	8001c40 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ca0:	9901      	ldr	r1, [sp, #4]
 8001ca2:	f104 0010 	add.w	r0, r4, #16
 8001ca6:	f000 fc71 	bl	800258c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fe5f 	bl	800196e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001cb0:	f000 fb7e 	bl	80023b0 <xTaskResumeAll>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d1c8      	bne.n	8001c4a <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <xQueueGenericSend+0x17c>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	e7bf      	b.n	8001c4a <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fe4f 	bl	800196e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cd0:	f000 fb6e 	bl	80023b0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e791      	b.n	8001bfc <xQueueGenericSend+0xa0>
 8001cd8:	e000ed04 	.word	0xe000ed04

08001cdc <xQueueReceive>:
{
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001ce2:	b190      	cbz	r0, 8001d0a <xQueueReceive+0x2e>
 8001ce4:	460e      	mov	r6, r1
 8001ce6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ce8:	b1c1      	cbz	r1, 8001d1c <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cea:	f000 fd01 	bl	80026f0 <xTaskGetSchedulerState>
 8001cee:	4607      	mov	r7, r0
 8001cf0:	bb00      	cbnz	r0, 8001d34 <xQueueReceive+0x58>
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d05c      	beq.n	8001db2 <xQueueReceive+0xd6>
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	e7fe      	b.n	8001d08 <xQueueReceive+0x2c>
 8001d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8001d1a:	e7fe      	b.n	8001d1a <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d1c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0e3      	beq.n	8001cea <xQueueReceive+0xe>
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	e7fe      	b.n	8001d32 <xQueueReceive+0x56>
 8001d34:	2700      	movs	r7, #0
 8001d36:	e03c      	b.n	8001db2 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d38:	4631      	mov	r1, r6
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff fe05 	bl	800194a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d40:	3d01      	subs	r5, #1
 8001d42:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d44:	6923      	ldr	r3, [r4, #16]
 8001d46:	b923      	cbnz	r3, 8001d52 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8001d48:	f000 fdb6 	bl	80028b8 <vPortExitCritical>
				return pdPASS;
 8001d4c:	2001      	movs	r0, #1
}
 8001d4e:	b005      	add	sp, #20
 8001d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d52:	f104 0010 	add.w	r0, r4, #16
 8001d56:	f000 fc31 	bl	80025bc <xTaskRemoveFromEventList>
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d0f4      	beq.n	8001d48 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <xQueueReceive+0x158>)
 8001d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	e7eb      	b.n	8001d48 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8001d70:	f000 fda2 	bl	80028b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001d74:	2000      	movs	r0, #0
 8001d76:	e7ea      	b.n	8001d4e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d78:	a802      	add	r0, sp, #8
 8001d7a:	f000 fc65 	bl	8002648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d7e:	2701      	movs	r7, #1
 8001d80:	e021      	b.n	8001dc6 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 8001d82:	2300      	movs	r3, #0
 8001d84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001d88:	e029      	b.n	8001dde <xQueueReceive+0x102>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d90:	e02b      	b.n	8001dea <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff fdeb 	bl	800196e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d98:	f000 fb0a 	bl	80023b0 <xTaskResumeAll>
 8001d9c:	e009      	b.n	8001db2 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fde5 	bl	800196e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001da4:	f000 fb04 	bl	80023b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fd86 	bl	80018ba <prvIsQueueEmpty>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d13d      	bne.n	8001e2e <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 8001db2:	f000 fd5f 	bl	8002874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001db6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	d1bd      	bne.n	8001d38 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dbc:	9b01      	ldr	r3, [sp, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0d6      	beq.n	8001d70 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d0d8      	beq.n	8001d78 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 8001dc6:	f000 fd77 	bl	80028b8 <vPortExitCritical>
		vTaskSuspendAll();
 8001dca:	f000 fa5d 	bl	8002288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001dce:	f000 fd51 	bl	8002874 <vPortEnterCritical>
 8001dd2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d0d1      	beq.n	8001d82 <xQueueReceive+0xa6>
 8001dde:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001de2:	b25b      	sxtb	r3, r3
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d0cf      	beq.n	8001d8a <xQueueReceive+0xae>
 8001dea:	f000 fd65 	bl	80028b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dee:	a901      	add	r1, sp, #4
 8001df0:	a802      	add	r0, sp, #8
 8001df2:	f000 fc35 	bl	8002660 <xTaskCheckForTimeOut>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1d1      	bne.n	8001d9e <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7ff fd5d 	bl	80018ba <prvIsQueueEmpty>
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d0c6      	beq.n	8001d92 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e04:	9901      	ldr	r1, [sp, #4]
 8001e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e0a:	f000 fbbf 	bl	800258c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff fdad 	bl	800196e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e14:	f000 facc 	bl	80023b0 <xTaskResumeAll>
 8001e18:	2800      	cmp	r0, #0
 8001e1a:	d1ca      	bne.n	8001db2 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <xQueueReceive+0x158>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	e7c1      	b.n	8001db2 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	e78d      	b.n	8001d4e <xQueueReceive+0x72>
 8001e32:	bf00      	nop
 8001e34:	e000ed04 	.word	0xe000ed04

08001e38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <prvResetNextTaskUnblockTime+0x24>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b923      	cbnz	r3, 8001e4a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <prvResetNextTaskUnblockTime+0x28>)
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <prvResetNextTaskUnblockTime+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <prvResetNextTaskUnblockTime+0x28>)
 8001e56:	601a      	str	r2, [r3, #0]
	}
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000284 	.word	0x20000284
 8001e60:	20000358 	.word	0x20000358

08001e64 <prvInitialiseNewTask>:
{
 8001e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e68:	4607      	mov	r7, r0
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	9d08      	ldr	r5, [sp, #32]
 8001e6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e74:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001e76:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e80:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e84:	2200      	movs	r2, #0
 8001e86:	2a0f      	cmp	r2, #15
 8001e88:	d807      	bhi.n	8001e9a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e8a:	5c88      	ldrb	r0, [r1, r2]
 8001e8c:	18a3      	adds	r3, r4, r2
 8001e8e:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8001e92:	5c8b      	ldrb	r3, [r1, r2]
 8001e94:	b10b      	cbz	r3, 8001e9a <prvInitialiseNewTask+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e96:	3201      	adds	r2, #1
 8001e98:	e7f5      	b.n	8001e86 <prvInitialiseNewTask+0x22>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ea0:	2d06      	cmp	r5, #6
 8001ea2:	d900      	bls.n	8001ea6 <prvInitialiseNewTask+0x42>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ea4:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8001ea6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001ea8:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001eaa:	f04f 0a00 	mov.w	sl, #0
 8001eae:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001eb2:	1d20      	adds	r0, r4, #4
 8001eb4:	f7ff fcb8 	bl	8001828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001eb8:	f104 0018 	add.w	r0, r4, #24
 8001ebc:	f7ff fcb4 	bl	8001828 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ec0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ec2:	f1c5 0507 	rsb	r5, r5, #7
 8001ec6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ec8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001eca:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ece:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ed2:	4642      	mov	r2, r8
 8001ed4:	4639      	mov	r1, r7
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f000 fca4 	bl	8002824 <pxPortInitialiseStack>
 8001edc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001ede:	f1b9 0f00 	cmp.w	r9, #0
 8001ee2:	d001      	beq.n	8001ee8 <prvInitialiseNewTask+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ee4:	f8c9 4000 	str.w	r4, [r9]
}
 8001ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001eec <prvInitialiseTaskLists>:
{
 8001eec:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001eee:	2400      	movs	r4, #0
 8001ef0:	e007      	b.n	8001f02 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ef2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001ef6:	0093      	lsls	r3, r2, #2
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <prvInitialiseTaskLists+0x48>)
 8001efa:	4418      	add	r0, r3
 8001efc:	f7ff fc89 	bl	8001812 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f00:	3401      	adds	r4, #1
 8001f02:	2c06      	cmp	r4, #6
 8001f04:	d9f5      	bls.n	8001ef2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001f06:	4d0c      	ldr	r5, [pc, #48]	; (8001f38 <prvInitialiseTaskLists+0x4c>)
 8001f08:	4628      	mov	r0, r5
 8001f0a:	f7ff fc82 	bl	8001812 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f0e:	4c0b      	ldr	r4, [pc, #44]	; (8001f3c <prvInitialiseTaskLists+0x50>)
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff fc7e 	bl	8001812 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f16:	480a      	ldr	r0, [pc, #40]	; (8001f40 <prvInitialiseTaskLists+0x54>)
 8001f18:	f7ff fc7b 	bl	8001812 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <prvInitialiseTaskLists+0x58>)
 8001f1e:	f7ff fc78 	bl	8001812 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001f22:	4809      	ldr	r0, [pc, #36]	; (8001f48 <prvInitialiseTaskLists+0x5c>)
 8001f24:	f7ff fc75 	bl	8001812 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <prvInitialiseTaskLists+0x60>)
 8001f2a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <prvInitialiseTaskLists+0x64>)
 8001f2e:	601c      	str	r4, [r3, #0]
}
 8001f30:	bd38      	pop	{r3, r4, r5, pc}
 8001f32:	bf00      	nop
 8001f34:	2000028c 	.word	0x2000028c
 8001f38:	20000330 	.word	0x20000330
 8001f3c:	20000344 	.word	0x20000344
 8001f40:	20000360 	.word	0x20000360
 8001f44:	2000038c 	.word	0x2000038c
 8001f48:	20000378 	.word	0x20000378
 8001f4c:	20000284 	.word	0x20000284
 8001f50:	20000288 	.word	0x20000288

08001f54 <prvAddNewTaskToReadyList>:
{
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001f58:	f000 fc8c 	bl	8002874 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <prvAddNewTaskToReadyList+0x8c>)
 8001f5e:	6813      	ldr	r3, [r2, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <prvAddNewTaskToReadyList+0x90>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b15b      	cbz	r3, 8001f82 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <prvAddNewTaskToReadyList+0x94>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b96b      	cbnz	r3, 8001f8c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f70:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <prvAddNewTaskToReadyList+0x90>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d807      	bhi.n	8001f8c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <prvAddNewTaskToReadyList+0x90>)
 8001f7e:	601c      	str	r4, [r3, #0]
 8001f80:	e004      	b.n	8001f8c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <prvAddNewTaskToReadyList+0x90>)
 8001f84:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f86:	6813      	ldr	r3, [r2, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d026      	beq.n	8001fda <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8001f8c:	4a17      	ldr	r2, [pc, #92]	; (8001fec <prvAddNewTaskToReadyList+0x98>)
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001f94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001f96:	2301      	movs	r3, #1
 8001f98:	4083      	lsls	r3, r0
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <prvAddNewTaskToReadyList+0x9c>)
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001fa6:	1d21      	adds	r1, r4, #4
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <prvAddNewTaskToReadyList+0xa0>)
 8001faa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001fae:	f7ff fc3e 	bl	800182e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001fb2:	f000 fc81 	bl	80028b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <prvAddNewTaskToReadyList+0x94>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b16b      	cbz	r3, 8001fd8 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <prvAddNewTaskToReadyList+0x90>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <prvAddNewTaskToReadyList+0xa4>)
 8001fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	f3bf 8f6f 	isb	sy
}
 8001fd8:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8001fda:	f7ff ff87 	bl	8001eec <prvInitialiseTaskLists>
 8001fde:	e7d5      	b.n	8001f8c <prvAddNewTaskToReadyList+0x38>
 8001fe0:	20000318 	.word	0x20000318
 8001fe4:	20000280 	.word	0x20000280
 8001fe8:	20000374 	.word	0x20000374
 8001fec:	20000328 	.word	0x20000328
 8001ff0:	2000032c 	.word	0x2000032c
 8001ff4:	2000028c 	.word	0x2000028c
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <prvDeleteTCB>:
	{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002000:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002004:	b163      	cbz	r3, 8002020 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002006:	2b01      	cmp	r3, #1
 8002008:	d011      	beq.n	800202e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800200a:	2b02      	cmp	r3, #2
 800200c:	d00e      	beq.n	800202c <prvDeleteTCB+0x30>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	e7fe      	b.n	800201e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8002020:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002022:	f000 fde9 	bl	8002bf8 <vPortFree>
				vPortFree( pxTCB );
 8002026:	4620      	mov	r0, r4
 8002028:	f000 fde6 	bl	8002bf8 <vPortFree>
	}
 800202c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800202e:	f000 fde3 	bl	8002bf8 <vPortFree>
 8002032:	e7fb      	b.n	800202c <prvDeleteTCB+0x30>

08002034 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <prvCheckTasksWaitingTermination+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b1d3      	cbz	r3, 8002070 <prvCheckTasksWaitingTermination+0x3c>
{
 800203a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800203c:	f000 fc1a 	bl	8002874 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <prvCheckTasksWaitingTermination+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002046:	1d20      	adds	r0, r4, #4
 8002048:	f7ff fc15 	bl	8001876 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <prvCheckTasksWaitingTermination+0x48>)
 800204e:	6813      	ldr	r3, [r2, #0]
 8002050:	3b01      	subs	r3, #1
 8002052:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <prvCheckTasksWaitingTermination+0x40>)
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800205c:	f000 fc2c 	bl	80028b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ffcb 	bl	8001ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002066:	4b03      	ldr	r3, [pc, #12]	; (8002074 <prvCheckTasksWaitingTermination+0x40>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1e6      	bne.n	800203c <prvCheckTasksWaitingTermination+0x8>
}
 800206e:	bd10      	pop	{r4, pc}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000031c 	.word	0x2000031c
 8002078:	2000038c 	.word	0x2000038c
 800207c:	20000318 	.word	0x20000318

08002080 <prvIdleTask>:
{
 8002080:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002082:	f7ff ffd7 	bl	8002034 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <prvIdleTask+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d9f9      	bls.n	8002082 <prvIdleTask+0x2>
				taskYIELD();
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <prvIdleTask+0x24>)
 8002090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	e7f0      	b.n	8002082 <prvIdleTask+0x2>
 80020a0:	2000028c 	.word	0x2000028c
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	4604      	mov	r4, r0
 80020ac:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <prvAddCurrentTaskToDelayedList+0x7c>)
 80020b0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	3004      	adds	r0, #4
 80020b8:	f7ff fbdd 	bl	8001876 <uxListRemove>
 80020bc:	b950      	cbnz	r0, 80020d4 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	2301      	movs	r3, #1
 80020c6:	fa03 f202 	lsl.w	r2, r3, r2
 80020ca:	4918      	ldr	r1, [pc, #96]	; (800212c <prvAddCurrentTaskToDelayedList+0x84>)
 80020cc:	680b      	ldr	r3, [r1, #0]
 80020ce:	ea23 0302 	bic.w	r3, r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80020d8:	d00d      	beq.n	80020f6 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80020da:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d910      	bls.n	8002108 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <prvAddCurrentTaskToDelayedList+0x88>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	3104      	adds	r1, #4
 80020f0:	f7ff fba8 	bl	8001844 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	d0ef      	beq.n	80020da <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	3104      	adds	r1, #4
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002102:	f7ff fb94 	bl	800182e <vListInsertEnd>
 8002106:	e7f5      	b.n	80020f4 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <prvAddCurrentTaskToDelayedList+0x90>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <prvAddCurrentTaskToDelayedList+0x80>)
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	3104      	adds	r1, #4
 8002112:	f7ff fb97 	bl	8001844 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <prvAddCurrentTaskToDelayedList+0x94>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	42a3      	cmp	r3, r4
 800211c:	d9ea      	bls.n	80020f4 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <prvAddCurrentTaskToDelayedList+0x94>)
 8002120:	601c      	str	r4, [r3, #0]
}
 8002122:	e7e7      	b.n	80020f4 <prvAddCurrentTaskToDelayedList+0x4c>
 8002124:	200003a0 	.word	0x200003a0
 8002128:	20000280 	.word	0x20000280
 800212c:	2000032c 	.word	0x2000032c
 8002130:	20000288 	.word	0x20000288
 8002134:	20000378 	.word	0x20000378
 8002138:	20000284 	.word	0x20000284
 800213c:	20000358 	.word	0x20000358

08002140 <xTaskCreateStatic>:
	{
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002148:	b175      	cbz	r5, 8002168 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800214a:	b1b4      	cbz	r4, 800217a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800214c:	2654      	movs	r6, #84	; 0x54
 800214e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002150:	9e04      	ldr	r6, [sp, #16]
 8002152:	2e54      	cmp	r6, #84	; 0x54
 8002154:	d01a      	beq.n	800218c <xTaskCreateStatic+0x4c>
 8002156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	e7fe      	b.n	8002166 <xTaskCreateStatic+0x26>
 8002168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002178:	e7fe      	b.n	8002178 <xTaskCreateStatic+0x38>
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800218a:	e7fe      	b.n	800218a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800218c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800218e:	2502      	movs	r5, #2
 8002190:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002194:	2500      	movs	r5, #0
 8002196:	9503      	str	r5, [sp, #12]
 8002198:	9402      	str	r4, [sp, #8]
 800219a:	ad05      	add	r5, sp, #20
 800219c:	9501      	str	r5, [sp, #4]
 800219e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80021a0:	9500      	str	r5, [sp, #0]
 80021a2:	f7ff fe5f 	bl	8001e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021a6:	4620      	mov	r0, r4
 80021a8:	f7ff fed4 	bl	8001f54 <prvAddNewTaskToReadyList>
	}
 80021ac:	9805      	ldr	r0, [sp, #20]
 80021ae:	b006      	add	sp, #24
 80021b0:	bd70      	pop	{r4, r5, r6, pc}

080021b2 <xTaskCreate>:
	{
 80021b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	4607      	mov	r7, r0
 80021ba:	4688      	mov	r8, r1
 80021bc:	4614      	mov	r4, r2
 80021be:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c0:	0090      	lsls	r0, r2, #2
 80021c2:	f000 fca1 	bl	8002b08 <pvPortMalloc>
			if( pxStack != NULL )
 80021c6:	b300      	cbz	r0, 800220a <xTaskCreate+0x58>
 80021c8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021ca:	2054      	movs	r0, #84	; 0x54
 80021cc:	f000 fc9c 	bl	8002b08 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80021d0:	4605      	mov	r5, r0
 80021d2:	b1b0      	cbz	r0, 8002202 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80021d4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80021d8:	b1e5      	cbz	r5, 8002214 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021da:	2300      	movs	r3, #0
 80021dc:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021e0:	9303      	str	r3, [sp, #12]
 80021e2:	9502      	str	r5, [sp, #8]
 80021e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4633      	mov	r3, r6
 80021ee:	4622      	mov	r2, r4
 80021f0:	4641      	mov	r1, r8
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7ff fe36 	bl	8001e64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7ff feab 	bl	8001f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80021fe:	2001      	movs	r0, #1
 8002200:	e005      	b.n	800220e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8002202:	4648      	mov	r0, r9
 8002204:	f000 fcf8 	bl	8002bf8 <vPortFree>
 8002208:	e7e6      	b.n	80021d8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800220e:	b005      	add	sp, #20
 8002210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002218:	e7f9      	b.n	800220e <xTaskCreate+0x5c>
	...

0800221c <vTaskStartScheduler>:
{
 800221c:	b510      	push	{r4, lr}
 800221e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002220:	2400      	movs	r4, #0
 8002222:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002224:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002226:	aa07      	add	r2, sp, #28
 8002228:	a906      	add	r1, sp, #24
 800222a:	a805      	add	r0, sp, #20
 800222c:	f7fd ff98 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002230:	9b05      	ldr	r3, [sp, #20]
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	9b06      	ldr	r3, [sp, #24]
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	9400      	str	r4, [sp, #0]
 800223a:	4623      	mov	r3, r4
 800223c:	9a07      	ldr	r2, [sp, #28]
 800223e:	490d      	ldr	r1, [pc, #52]	; (8002274 <vTaskStartScheduler+0x58>)
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <vTaskStartScheduler+0x5c>)
 8002242:	f7ff ff7d 	bl	8002140 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002246:	b190      	cbz	r0, 800226e <vTaskStartScheduler+0x52>
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <vTaskStartScheduler+0x60>)
 800225a:	f04f 32ff 	mov.w	r2, #4294967295
 800225e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <vTaskStartScheduler+0x64>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <vTaskStartScheduler+0x68>)
 8002268:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800226a:	f000 fb95 	bl	8002998 <xPortStartScheduler>
}
 800226e:	b008      	add	sp, #32
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop
 8002274:	08002db4 	.word	0x08002db4
 8002278:	08002081 	.word	0x08002081
 800227c:	20000358 	.word	0x20000358
 8002280:	20000374 	.word	0x20000374
 8002284:	200003a0 	.word	0x200003a0

08002288 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002288:	4a02      	ldr	r2, [pc, #8]	; (8002294 <vTaskSuspendAll+0xc>)
 800228a:	6813      	ldr	r3, [r2, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000324 	.word	0x20000324

08002298 <xTaskIncrementTick>:
{
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <xTaskIncrementTick+0xec>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d164      	bne.n	800236c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <xTaskIncrementTick+0xf0>)
 80022a4:	681d      	ldr	r5, [r3, #0]
 80022a6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80022a8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80022aa:	b9c5      	cbnz	r5, 80022de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <xTaskIncrementTick+0xf4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b143      	cbz	r3, 80022c6 <xTaskIncrementTick+0x2e>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	e7fe      	b.n	80022c4 <xTaskIncrementTick+0x2c>
 80022c6:	4a31      	ldr	r2, [pc, #196]	; (800238c <xTaskIncrementTick+0xf4>)
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <xTaskIncrementTick+0xf8>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	6010      	str	r0, [r2, #0]
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	4a30      	ldr	r2, [pc, #192]	; (8002394 <xTaskIncrementTick+0xfc>)
 80022d4:	6813      	ldr	r3, [r2, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	f7ff fdad 	bl	8001e38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <xTaskIncrementTick+0x100>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	42ab      	cmp	r3, r5
 80022e4:	d938      	bls.n	8002358 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80022e6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022e8:	4b2c      	ldr	r3, [pc, #176]	; (800239c <xTaskIncrementTick+0x104>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022f2:	009a      	lsls	r2, r3, #2
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <xTaskIncrementTick+0x108>)
 80022f6:	589b      	ldr	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d93c      	bls.n	8002376 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80022fc:	2401      	movs	r4, #1
 80022fe:	e03a      	b.n	8002376 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8002300:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <xTaskIncrementTick+0xf4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b343      	cbz	r3, 800235c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <xTaskIncrementTick+0xf4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002312:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002314:	429d      	cmp	r5, r3
 8002316:	d326      	bcc.n	8002366 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002318:	1d37      	adds	r7, r6, #4
 800231a:	4638      	mov	r0, r7
 800231c:	f7ff faab 	bl	8001876 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002320:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002322:	b11b      	cbz	r3, 800232c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002324:	f106 0018 	add.w	r0, r6, #24
 8002328:	f7ff faa5 	bl	8001876 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800232c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800232e:	2201      	movs	r2, #1
 8002330:	409a      	lsls	r2, r3
 8002332:	491c      	ldr	r1, [pc, #112]	; (80023a4 <xTaskIncrementTick+0x10c>)
 8002334:	6808      	ldr	r0, [r1, #0]
 8002336:	4302      	orrs	r2, r0
 8002338:	600a      	str	r2, [r1, #0]
 800233a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800233e:	009a      	lsls	r2, r3, #2
 8002340:	4639      	mov	r1, r7
 8002342:	4817      	ldr	r0, [pc, #92]	; (80023a0 <xTaskIncrementTick+0x108>)
 8002344:	4410      	add	r0, r2
 8002346:	f7ff fa72 	bl	800182e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800234a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <xTaskIncrementTick+0x104>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	429a      	cmp	r2, r3
 8002354:	d2d4      	bcs.n	8002300 <xTaskIncrementTick+0x68>
 8002356:	e7d4      	b.n	8002302 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8002358:	2400      	movs	r4, #0
 800235a:	e7d2      	b.n	8002302 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <xTaskIncrementTick+0x100>)
 800235e:	f04f 32ff 	mov.w	r2, #4294967295
 8002362:	601a      	str	r2, [r3, #0]
					break;
 8002364:	e7c0      	b.n	80022e8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <xTaskIncrementTick+0x100>)
 8002368:	6013      	str	r3, [r2, #0]
						break;
 800236a:	e7bd      	b.n	80022e8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <xTaskIncrementTick+0x110>)
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002374:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <xTaskIncrementTick+0x114>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b103      	cbz	r3, 800237e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800237c:	2401      	movs	r4, #1
}
 800237e:	4620      	mov	r0, r4
 8002380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002382:	bf00      	nop
 8002384:	20000324 	.word	0x20000324
 8002388:	200003a0 	.word	0x200003a0
 800238c:	20000284 	.word	0x20000284
 8002390:	20000288 	.word	0x20000288
 8002394:	2000035c 	.word	0x2000035c
 8002398:	20000358 	.word	0x20000358
 800239c:	20000280 	.word	0x20000280
 80023a0:	2000028c 	.word	0x2000028c
 80023a4:	2000032c 	.word	0x2000032c
 80023a8:	20000320 	.word	0x20000320
 80023ac:	200003a4 	.word	0x200003a4

080023b0 <xTaskResumeAll>:
{
 80023b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <xTaskResumeAll+0xd4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b943      	cbnz	r3, 80023ca <xTaskResumeAll+0x1a>
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	e7fe      	b.n	80023c8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80023ca:	f000 fa53 	bl	8002874 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <xTaskResumeAll+0xd4>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	3a01      	subs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d14d      	bne.n	8002478 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023dc:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <xTaskResumeAll+0xd8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b90b      	cbnz	r3, 80023e6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80023e2:	2400      	movs	r4, #0
 80023e4:	e049      	b.n	800247a <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 80023e6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <xTaskResumeAll+0xdc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b31b      	cbz	r3, 8002436 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <xTaskResumeAll+0xdc>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023f4:	f104 0018 	add.w	r0, r4, #24
 80023f8:	f7ff fa3d 	bl	8001876 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023fc:	1d25      	adds	r5, r4, #4
 80023fe:	4628      	mov	r0, r5
 8002400:	f7ff fa39 	bl	8001876 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002404:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002406:	2301      	movs	r3, #1
 8002408:	4083      	lsls	r3, r0
 800240a:	4a21      	ldr	r2, [pc, #132]	; (8002490 <xTaskResumeAll+0xe0>)
 800240c:	6811      	ldr	r1, [r2, #0]
 800240e:	430b      	orrs	r3, r1
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002416:	4629      	mov	r1, r5
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <xTaskResumeAll+0xe4>)
 800241a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800241e:	f7ff fa06 	bl	800182e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002422:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <xTaskResumeAll+0xe8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	429a      	cmp	r2, r3
 800242c:	d3dc      	bcc.n	80023e8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <xTaskResumeAll+0xec>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e7d8      	b.n	80023e8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8002436:	b10c      	cbz	r4, 800243c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8002438:	f7ff fcfe 	bl	8001e38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <xTaskResumeAll+0xf0>)
 800243e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002440:	b974      	cbnz	r4, 8002460 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <xTaskResumeAll+0xec>)
 8002444:	681c      	ldr	r4, [r3, #0]
 8002446:	b1c4      	cbz	r4, 800247a <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <xTaskResumeAll+0xf4>)
 800244a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002458:	2401      	movs	r4, #1
 800245a:	e00e      	b.n	800247a <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800245c:	3c01      	subs	r4, #1
 800245e:	d007      	beq.n	8002470 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8002460:	f7ff ff1a 	bl	8002298 <xTaskIncrementTick>
 8002464:	2800      	cmp	r0, #0
 8002466:	d0f9      	beq.n	800245c <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <xTaskResumeAll+0xec>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e7f5      	b.n	800245c <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <xTaskResumeAll+0xf0>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	e7e4      	b.n	8002442 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8002478:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800247a:	f000 fa1d 	bl	80028b8 <vPortExitCritical>
}
 800247e:	4620      	mov	r0, r4
 8002480:	bd38      	pop	{r3, r4, r5, pc}
 8002482:	bf00      	nop
 8002484:	20000324 	.word	0x20000324
 8002488:	20000318 	.word	0x20000318
 800248c:	20000360 	.word	0x20000360
 8002490:	2000032c 	.word	0x2000032c
 8002494:	2000028c 	.word	0x2000028c
 8002498:	20000280 	.word	0x20000280
 800249c:	200003a4 	.word	0x200003a4
 80024a0:	20000320 	.word	0x20000320
 80024a4:	e000ed04 	.word	0xe000ed04

080024a8 <vTaskDelay>:
	{
 80024a8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024aa:	b1a8      	cbz	r0, 80024d8 <vTaskDelay+0x30>
 80024ac:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <vTaskDelay+0x44>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b143      	cbz	r3, 80024c6 <vTaskDelay+0x1e>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	e7fe      	b.n	80024c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80024c6:	f7ff fedf 	bl	8002288 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024ca:	2100      	movs	r1, #0
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff fdeb 	bl	80020a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80024d2:	f7ff ff6d 	bl	80023b0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80024d6:	b938      	cbnz	r0, 80024e8 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <vTaskDelay+0x48>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
	}
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	bf00      	nop
 80024ec:	20000324 	.word	0x20000324
 80024f0:	e000ed04 	.word	0xe000ed04

080024f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <vTaskSwitchContext+0x84>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b11b      	cbz	r3, 8002502 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <vTaskSwitchContext+0x88>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <vTaskSwitchContext+0x88>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <vTaskSwitchContext+0x8c>)
 800250a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f1c3 031f 	rsb	r3, r3, #31
 8002516:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800251a:	008a      	lsls	r2, r1, #2
 800251c:	4919      	ldr	r1, [pc, #100]	; (8002584 <vTaskSwitchContext+0x90>)
 800251e:	588a      	ldr	r2, [r1, r2]
 8002520:	b942      	cbnz	r2, 8002534 <vTaskSwitchContext+0x40>
	__asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	e7fe      	b.n	8002532 <vTaskSwitchContext+0x3e>
{
 8002534:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002536:	4913      	ldr	r1, [pc, #76]	; (8002584 <vTaskSwitchContext+0x90>)
 8002538:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800253c:	0082      	lsls	r2, r0, #2
 800253e:	440a      	add	r2, r1
 8002540:	6850      	ldr	r0, [r2, #4]
 8002542:	6840      	ldr	r0, [r0, #4]
 8002544:	6050      	str	r0, [r2, #4]
 8002546:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 800254a:	00a2      	lsls	r2, r4, #2
 800254c:	4614      	mov	r4, r2
 800254e:	3208      	adds	r2, #8
 8002550:	4411      	add	r1, r2
 8002552:	4288      	cmp	r0, r1
 8002554:	d00a      	beq.n	800256c <vTaskSwitchContext+0x78>
 8002556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800255a:	009a      	lsls	r2, r3, #2
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <vTaskSwitchContext+0x90>)
 800255e:	4413      	add	r3, r2
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <vTaskSwitchContext+0x94>)
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bc10      	pop	{r4}
 800256a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800256c:	6840      	ldr	r0, [r0, #4]
 800256e:	4a05      	ldr	r2, [pc, #20]	; (8002584 <vTaskSwitchContext+0x90>)
 8002570:	4422      	add	r2, r4
 8002572:	6050      	str	r0, [r2, #4]
 8002574:	e7ef      	b.n	8002556 <vTaskSwitchContext+0x62>
 8002576:	bf00      	nop
 8002578:	20000324 	.word	0x20000324
 800257c:	200003a4 	.word	0x200003a4
 8002580:	2000032c 	.word	0x2000032c
 8002584:	2000028c 	.word	0x2000028c
 8002588:	20000280 	.word	0x20000280

0800258c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800258c:	b158      	cbz	r0, 80025a6 <vTaskPlaceOnEventList+0x1a>
{
 800258e:	b510      	push	{r4, lr}
 8002590:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <vTaskPlaceOnEventList+0x2c>)
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	3118      	adds	r1, #24
 8002598:	f7ff f954 	bl	8001844 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800259c:	2101      	movs	r1, #1
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff fd82 	bl	80020a8 <prvAddCurrentTaskToDelayedList>
}
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80025b6:	e7fe      	b.n	80025b6 <vTaskPlaceOnEventList+0x2a>
 80025b8:	20000280 	.word	0x20000280

080025bc <xTaskRemoveFromEventList>:
{
 80025bc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80025be:	68c3      	ldr	r3, [r0, #12]
 80025c0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80025c2:	b324      	cbz	r4, 800260e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80025c4:	f104 0518 	add.w	r5, r4, #24
 80025c8:	4628      	mov	r0, r5
 80025ca:	f7ff f954 	bl	8001876 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <xTaskRemoveFromEventList+0x74>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	bb2b      	cbnz	r3, 8002620 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80025d4:	1d25      	adds	r5, r4, #4
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff f94d 	bl	8001876 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80025dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025de:	2301      	movs	r3, #1
 80025e0:	4083      	lsls	r3, r0
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <xTaskRemoveFromEventList+0x78>)
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ee:	4629      	mov	r1, r5
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <xTaskRemoveFromEventList+0x7c>)
 80025f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025f6:	f7ff f91a 	bl	800182e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80025fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <xTaskRemoveFromEventList+0x80>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	429a      	cmp	r2, r3
 8002604:	d911      	bls.n	800262a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8002606:	2001      	movs	r0, #1
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <xTaskRemoveFromEventList+0x84>)
 800260a:	6018      	str	r0, [r3, #0]
 800260c:	e00e      	b.n	800262c <xTaskRemoveFromEventList+0x70>
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800261e:	e7fe      	b.n	800261e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002620:	4629      	mov	r1, r5
 8002622:	4808      	ldr	r0, [pc, #32]	; (8002644 <xTaskRemoveFromEventList+0x88>)
 8002624:	f7ff f903 	bl	800182e <vListInsertEnd>
 8002628:	e7e7      	b.n	80025fa <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800262a:	2000      	movs	r0, #0
}
 800262c:	bd38      	pop	{r3, r4, r5, pc}
 800262e:	bf00      	nop
 8002630:	20000324 	.word	0x20000324
 8002634:	2000032c 	.word	0x2000032c
 8002638:	2000028c 	.word	0x2000028c
 800263c:	20000280 	.word	0x20000280
 8002640:	200003a4 	.word	0x200003a4
 8002644:	20000360 	.word	0x20000360

08002648 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <vTaskInternalSetTimeOutState+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <vTaskInternalSetTimeOutState+0x14>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6043      	str	r3, [r0, #4]
}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	2000035c 	.word	0x2000035c
 800265c:	200003a0 	.word	0x200003a0

08002660 <xTaskCheckForTimeOut>:
{
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8002662:	b1c8      	cbz	r0, 8002698 <xTaskCheckForTimeOut+0x38>
 8002664:	460c      	mov	r4, r1
 8002666:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8002668:	b1f9      	cbz	r1, 80026aa <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 800266a:	f000 f903 	bl	8002874 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <xTaskCheckForTimeOut+0x7c>)
 8002670:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002672:	686b      	ldr	r3, [r5, #4]
 8002674:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8002676:	6822      	ldr	r2, [r4, #0]
 8002678:	f1b2 3fff 	cmp.w	r2, #4294967295
 800267c:	d026      	beq.n	80026cc <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800267e:	682f      	ldr	r7, [r5, #0]
 8002680:	4e17      	ldr	r6, [pc, #92]	; (80026e0 <xTaskCheckForTimeOut+0x80>)
 8002682:	6836      	ldr	r6, [r6, #0]
 8002684:	42b7      	cmp	r7, r6
 8002686:	d001      	beq.n	800268c <xTaskCheckForTimeOut+0x2c>
 8002688:	428b      	cmp	r3, r1
 800268a:	d924      	bls.n	80026d6 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800268c:	4282      	cmp	r2, r0
 800268e:	d815      	bhi.n	80026bc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002694:	2401      	movs	r4, #1
 8002696:	e01a      	b.n	80026ce <xTaskCheckForTimeOut+0x6e>
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80026a8:	e7fe      	b.n	80026a8 <xTaskCheckForTimeOut+0x48>
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80026ba:	e7fe      	b.n	80026ba <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80026bc:	1a5b      	subs	r3, r3, r1
 80026be:	4413      	add	r3, r2
 80026c0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7ff ffc0 	bl	8002648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80026c8:	2400      	movs	r4, #0
 80026ca:	e000      	b.n	80026ce <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80026cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80026ce:	f000 f8f3 	bl	80028b8 <vPortExitCritical>
}
 80026d2:	4620      	mov	r0, r4
 80026d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 80026d6:	2401      	movs	r4, #1
 80026d8:	e7f9      	b.n	80026ce <xTaskCheckForTimeOut+0x6e>
 80026da:	bf00      	nop
 80026dc:	200003a0 	.word	0x200003a0
 80026e0:	2000035c 	.word	0x2000035c

080026e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <vTaskMissedYield+0x8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	4770      	bx	lr
 80026ec:	200003a4 	.word	0x200003a4

080026f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <xTaskGetSchedulerState+0x18>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b133      	cbz	r3, 8002704 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <xTaskGetSchedulerState+0x1c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b10b      	cbz	r3, 8002700 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80026fc:	2000      	movs	r0, #0
	}
 80026fe:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8002700:	2002      	movs	r0, #2
 8002702:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002704:	2001      	movs	r0, #1
 8002706:	4770      	bx	lr
 8002708:	20000374 	.word	0x20000374
 800270c:	20000324 	.word	0x20000324

08002710 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8002710:	2800      	cmp	r0, #0
 8002712:	d04c      	beq.n	80027ae <xTaskPriorityDisinherit+0x9e>
	{
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <xTaskPriorityDisinherit+0xa8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4283      	cmp	r3, r0
 800271e:	d008      	beq.n	8002732 <xTaskPriorityDisinherit+0x22>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	e7fe      	b.n	8002730 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8002732:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002734:	b943      	cbnz	r3, 8002748 <xTaskPriorityDisinherit+0x38>
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	e7fe      	b.n	8002746 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8002748:	3b01      	subs	r3, #1
 800274a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800274c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800274e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002750:	4291      	cmp	r1, r2
 8002752:	d02e      	beq.n	80027b2 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002754:	b10b      	cbz	r3, 800275a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8002756:	2000      	movs	r0, #0
	}
 8002758:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800275a:	1d05      	adds	r5, r0, #4
 800275c:	4628      	mov	r0, r5
 800275e:	f7ff f88a 	bl	8001876 <uxListRemove>
 8002762:	b970      	cbnz	r0, 8002782 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002766:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4913      	ldr	r1, [pc, #76]	; (80027bc <xTaskPriorityDisinherit+0xac>)
 800276e:	58cb      	ldr	r3, [r1, r3]
 8002770:	b93b      	cbnz	r3, 8002782 <xTaskPriorityDisinherit+0x72>
 8002772:	2301      	movs	r3, #1
 8002774:	fa03 f202 	lsl.w	r2, r3, r2
 8002778:	4911      	ldr	r1, [pc, #68]	; (80027c0 <xTaskPriorityDisinherit+0xb0>)
 800277a:	680b      	ldr	r3, [r1, #0]
 800277c:	ea23 0302 	bic.w	r3, r3, r2
 8002780:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002782:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002784:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002786:	f1c0 0307 	rsb	r3, r0, #7
 800278a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800278c:	2401      	movs	r4, #1
 800278e:	fa04 f300 	lsl.w	r3, r4, r0
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <xTaskPriorityDisinherit+0xb0>)
 8002794:	6811      	ldr	r1, [r2, #0]
 8002796:	430b      	orrs	r3, r1
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800279e:	4629      	mov	r1, r5
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <xTaskPriorityDisinherit+0xac>)
 80027a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80027a6:	f7ff f842 	bl	800182e <vListInsertEnd>
					xReturn = pdTRUE;
 80027aa:	4620      	mov	r0, r4
 80027ac:	e7d4      	b.n	8002758 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80027ae:	2000      	movs	r0, #0
	}
 80027b0:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80027b2:	2000      	movs	r0, #0
 80027b4:	e7d0      	b.n	8002758 <xTaskPriorityDisinherit+0x48>
 80027b6:	bf00      	nop
 80027b8:	20000280 	.word	0x20000280
 80027bc:	2000028c 	.word	0x2000028c
 80027c0:	2000032c 	.word	0x2000032c

080027c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <prvTaskExitError+0x3c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d008      	beq.n	80027e6 <prvTaskExitError+0x22>
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	e7fe      	b.n	80027e4 <prvTaskExitError+0x20>
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027f6:	9b01      	ldr	r3, [sp, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0fc      	beq.n	80027f6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027fc:	b002      	add	sp, #8
 80027fe:	4770      	bx	lr
 8002800:	2000000c 	.word	0x2000000c

08002804 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002804:	4806      	ldr	r0, [pc, #24]	; (8002820 <prvPortStartFirstTask+0x1c>)
 8002806:	6800      	ldr	r0, [r0, #0]
 8002808:	6800      	ldr	r0, [r0, #0]
 800280a:	f380 8808 	msr	MSP, r0
 800280e:	b662      	cpsie	i
 8002810:	b661      	cpsie	f
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	df00      	svc	0
 800281c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800281e:	0000      	.short	0x0000
 8002820:	e000ed08 	.word	0xe000ed08

08002824 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002828:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800282c:	f021 0101 	bic.w	r1, r1, #1
 8002830:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <pxPortInitialiseStack+0x20>)
 8002836:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800283a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800283e:	3840      	subs	r0, #64	; 0x40
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	080027c5 	.word	0x080027c5
	...

08002850 <SVC_Handler>:
	__asm volatile (
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <pxCurrentTCBConst2>)
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	6808      	ldr	r0, [r1, #0]
 8002856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800285a:	f380 8809 	msr	PSP, r0
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f04f 0000 	mov.w	r0, #0
 8002866:	f380 8811 	msr	BASEPRI, r0
 800286a:	f04e 0e0d 	orr.w	lr, lr, #13
 800286e:	4770      	bx	lr

08002870 <pxCurrentTCBConst2>:
 8002870:	20000280 	.word	0x20000280

08002874 <vPortEnterCritical>:
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <vPortEnterCritical+0x3c>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800288c:	2b01      	cmp	r3, #1
 800288e:	d000      	beq.n	8002892 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8002890:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <vPortEnterCritical+0x40>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f013 0fff 	tst.w	r3, #255	; 0xff
 800289a:	d0f9      	beq.n	8002890 <vPortEnterCritical+0x1c>
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	e7fe      	b.n	80028ac <vPortEnterCritical+0x38>
 80028ae:	bf00      	nop
 80028b0:	2000000c 	.word	0x2000000c
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <vPortExitCritical+0x28>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b943      	cbnz	r3, 80028d0 <vPortExitCritical+0x18>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <vPortExitCritical+0x28>)
 80028d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028d6:	b90b      	cbnz	r3, 80028dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028d8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	2000000c 	.word	0x2000000c
	...

080028f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028f0:	f3ef 8009 	mrs	r0, PSP
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <pxCurrentTCBConst>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002900:	6010      	str	r0, [r2, #0]
 8002902:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002906:	f04f 0050 	mov.w	r0, #80	; 0x50
 800290a:	f380 8811 	msr	BASEPRI, r0
 800290e:	f7ff fdf1 	bl	80024f4 <vTaskSwitchContext>
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f380 8811 	msr	BASEPRI, r0
 800291a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	6808      	ldr	r0, [r1, #0]
 8002922:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002926:	f380 8809 	msr	PSP, r0
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	4770      	bx	lr

08002930 <pxCurrentTCBConst>:
 8002930:	20000280 	.word	0x20000280

08002934 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002934:	b508      	push	{r3, lr}
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002946:	f7ff fca7 	bl	8002298 <xTaskIncrementTick>
 800294a:	b118      	cbz	r0, 8002954 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <xPortSysTickHandler+0x28>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002954:	2300      	movs	r3, #0
 8002956:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800295a:	bd08      	pop	{r3, pc}
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <vPortSetupTimerInterrupt+0x24>)
 8002962:	2300      	movs	r3, #0
 8002964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <vPortSetupTimerInterrupt+0x28>)
 8002968:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <vPortSetupTimerInterrupt+0x2c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4908      	ldr	r1, [pc, #32]	; (8002990 <vPortSetupTimerInterrupt+0x30>)
 8002970:	fba1 1303 	umull	r1, r3, r1, r3
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	3b01      	subs	r3, #1
 8002978:	4906      	ldr	r1, [pc, #24]	; (8002994 <vPortSetupTimerInterrupt+0x34>)
 800297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800297c:	2307      	movs	r3, #7
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010
 8002988:	e000e018 	.word	0xe000e018
 800298c:	20000000 	.word	0x20000000
 8002990:	10624dd3 	.word	0x10624dd3
 8002994:	e000e014 	.word	0xe000e014

08002998 <xPortStartScheduler>:
{
 8002998:	b510      	push	{r4, lr}
 800299a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <xPortStartScheduler+0xa4>)
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029a4:	22ff      	movs	r2, #255	; 0xff
 80029a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <xPortStartScheduler+0xa8>)
 80029ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <xPortStartScheduler+0xac>)
 80029be:	2207      	movs	r2, #7
 80029c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029ca:	d00a      	beq.n	80029e2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <xPortStartScheduler+0xac>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f88d 3003 	strb.w	r3, [sp, #3]
 80029e0:	e7ef      	b.n	80029c2 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <xPortStartScheduler+0xac>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d008      	beq.n	80029fc <xPortStartScheduler+0x64>
	__asm volatile
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	e7fe      	b.n	80029fa <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029fc:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <xPortStartScheduler+0xac>)
 8002a04:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a06:	9b01      	ldr	r3, [sp, #4]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <xPortStartScheduler+0xa4>)
 8002a0c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <xPortStartScheduler+0xb0>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a16:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a1e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a20:	f7ff ff9e 	bl	8002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a24:	2400      	movs	r4, #0
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <xPortStartScheduler+0xb4>)
 8002a28:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8002a2a:	f7ff feeb 	bl	8002804 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a2e:	f7ff fd61 	bl	80024f4 <vTaskSwitchContext>
	prvTaskExitError();
 8002a32:	f7ff fec7 	bl	80027c4 <prvTaskExitError>
}
 8002a36:	4620      	mov	r0, r4
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	e000e400 	.word	0xe000e400
 8002a40:	200003a8 	.word	0x200003a8
 8002a44:	200003ac 	.word	0x200003ac
 8002a48:	e000ed20 	.word	0xe000ed20
 8002a4c:	2000000c 	.word	0x2000000c

08002a50 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a50:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a52:	f012 0f07 	tst.w	r2, #7
 8002a56:	d01e      	beq.n	8002a96 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a58:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a5a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a5e:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 8002a62:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a64:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a66:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <prvHeapInit+0x50>)
 8002a68:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a6e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002a70:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a72:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002a76:	480b      	ldr	r0, [pc, #44]	; (8002aa4 <prvHeapInit+0x54>)
 8002a78:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002a7a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a7c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a7e:	1a99      	subs	r1, r3, r2
 8002a80:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a82:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <prvHeapInit+0x58>)
 8002a86:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <prvHeapInit+0x5c>)
 8002a8a:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <prvHeapInit+0x60>)
 8002a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a9a:	e7e4      	b.n	8002a66 <prvHeapInit+0x16>
 8002a9c:	200003b4 	.word	0x200003b4
 8002aa0:	20000fc0 	.word	0x20000fc0
 8002aa4:	200003b0 	.word	0x200003b0
 8002aa8:	20000fbc 	.word	0x20000fbc
 8002aac:	20000fb8 	.word	0x20000fb8
 8002ab0:	20000fb4 	.word	0x20000fb4

08002ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002ab4:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <prvInsertBlockIntoFreeList+0x4c>)
 8002ab8:	461a      	mov	r2, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4283      	cmp	r3, r0
 8002abe:	d3fb      	bcc.n	8002ab8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ac0:	6851      	ldr	r1, [r2, #4]
 8002ac2:	1854      	adds	r4, r2, r1
 8002ac4:	4284      	cmp	r4, r0
 8002ac6:	d009      	beq.n	8002adc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ac8:	6841      	ldr	r1, [r0, #4]
 8002aca:	1844      	adds	r4, r0, r1
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	d00a      	beq.n	8002ae6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ad0:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ad2:	4290      	cmp	r0, r2
 8002ad4:	d000      	beq.n	8002ad8 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ad6:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ad8:	bc10      	pop	{r4}
 8002ada:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002adc:	6840      	ldr	r0, [r0, #4]
 8002ade:	4401      	add	r1, r0
 8002ae0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	e7f0      	b.n	8002ac8 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ae6:	4c07      	ldr	r4, [pc, #28]	; (8002b04 <prvInsertBlockIntoFreeList+0x50>)
 8002ae8:	6824      	ldr	r4, [r4, #0]
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	d006      	beq.n	8002afc <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4419      	add	r1, r3
 8002af2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6003      	str	r3, [r0, #0]
 8002afa:	e7ea      	b.n	8002ad2 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002afc:	6004      	str	r4, [r0, #0]
 8002afe:	e7e8      	b.n	8002ad2 <prvInsertBlockIntoFreeList+0x1e>
 8002b00:	20000fc0 	.word	0x20000fc0
 8002b04:	200003b0 	.word	0x200003b0

08002b08 <pvPortMalloc>:
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002b0c:	f7ff fbbc 	bl	8002288 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <pvPortMalloc+0xdc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	b1a3      	cbz	r3, 8002b40 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <pvPortMalloc+0xe0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	421c      	tst	r4, r3
 8002b1c:	d14a      	bne.n	8002bb4 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 8002b1e:	b134      	cbz	r4, 8002b2e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8002b20:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b22:	f014 0f07 	tst.w	r4, #7
 8002b26:	d002      	beq.n	8002b2e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b28:	f024 0407 	bic.w	r4, r4, #7
 8002b2c:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b2e:	2c00      	cmp	r4, #0
 8002b30:	d042      	beq.n	8002bb8 <pvPortMalloc+0xb0>
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <pvPortMalloc+0xe4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	42a3      	cmp	r3, r4
 8002b38:	d34d      	bcc.n	8002bd6 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <pvPortMalloc+0xe8>)
 8002b3c:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b3e:	e004      	b.n	8002b4a <pvPortMalloc+0x42>
			prvHeapInit();
 8002b40:	f7ff ff86 	bl	8002a50 <prvHeapInit>
 8002b44:	e7e7      	b.n	8002b16 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8002b46:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b48:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b4a:	686a      	ldr	r2, [r5, #4]
 8002b4c:	42a2      	cmp	r2, r4
 8002b4e:	d202      	bcs.n	8002b56 <pvPortMalloc+0x4e>
 8002b50:	682a      	ldr	r2, [r5, #0]
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d1f7      	bne.n	8002b46 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <pvPortMalloc+0xdc>)
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	42aa      	cmp	r2, r5
 8002b5c:	d03d      	beq.n	8002bda <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b5e:	681e      	ldr	r6, [r3, #0]
 8002b60:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b62:	682a      	ldr	r2, [r5, #0]
 8002b64:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b66:	686b      	ldr	r3, [r5, #4]
 8002b68:	1b1b      	subs	r3, r3, r4
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d910      	bls.n	8002b90 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b6e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b70:	f010 0f07 	tst.w	r0, #7
 8002b74:	d008      	beq.n	8002b88 <pvPortMalloc+0x80>
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	e7fe      	b.n	8002b86 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b88:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b8a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b8c:	f7ff ff92 	bl	8002ab4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b90:	686a      	ldr	r2, [r5, #4]
 8002b92:	4916      	ldr	r1, [pc, #88]	; (8002bec <pvPortMalloc+0xe4>)
 8002b94:	680b      	ldr	r3, [r1, #0]
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b9a:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <pvPortMalloc+0xec>)
 8002b9c:	6809      	ldr	r1, [r1, #0]
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	d201      	bcs.n	8002ba6 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ba2:	4914      	ldr	r1, [pc, #80]	; (8002bf4 <pvPortMalloc+0xec>)
 8002ba4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <pvPortMalloc+0xe0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	e002      	b.n	8002bba <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	e000      	b.n	8002bba <pvPortMalloc+0xb2>
 8002bb8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8002bba:	f7ff fbf9 	bl	80023b0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bbe:	f016 0f07 	tst.w	r6, #7
 8002bc2:	d00c      	beq.n	8002bde <pvPortMalloc+0xd6>
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	e7fe      	b.n	8002bd4 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	e7ef      	b.n	8002bba <pvPortMalloc+0xb2>
 8002bda:	2600      	movs	r6, #0
 8002bdc:	e7ed      	b.n	8002bba <pvPortMalloc+0xb2>
}
 8002bde:	4630      	mov	r0, r6
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	bf00      	nop
 8002be4:	200003b0 	.word	0x200003b0
 8002be8:	20000fb4 	.word	0x20000fb4
 8002bec:	20000fb8 	.word	0x20000fb8
 8002bf0:	20000fc0 	.word	0x20000fc0
 8002bf4:	20000fbc 	.word	0x20000fbc

08002bf8 <vPortFree>:
	if( pv != NULL )
 8002bf8:	b380      	cbz	r0, 8002c5c <vPortFree+0x64>
{
 8002bfa:	b538      	push	{r3, r4, r5, lr}
 8002bfc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002bfe:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c02:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <vPortFree+0x68>)
 8002c08:	6812      	ldr	r2, [r2, #0]
 8002c0a:	4213      	tst	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <vPortFree+0x28>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	e7fe      	b.n	8002c1e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c20:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002c24:	b141      	cbz	r1, 8002c38 <vPortFree+0x40>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	e7fe      	b.n	8002c36 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c38:	ea23 0302 	bic.w	r3, r3, r2
 8002c3c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002c40:	f7ff fb22 	bl	8002288 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c44:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002c48:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <vPortFree+0x6c>)
 8002c4a:	6813      	ldr	r3, [r2, #0]
 8002c4c:	440b      	add	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c50:	4628      	mov	r0, r5
 8002c52:	f7ff ff2f 	bl	8002ab4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002c56:	f7ff fbab 	bl	80023b0 <xTaskResumeAll>
}
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000fb4 	.word	0x20000fb4
 8002c64:	20000fb8 	.word	0x20000fb8

08002c68 <__libc_init_array>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ca0 <__libc_init_array+0x38>)
 8002c6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ca4 <__libc_init_array+0x3c>)
 8002c70:	1b64      	subs	r4, r4, r5
 8002c72:	10a4      	asrs	r4, r4, #2
 8002c74:	42a6      	cmp	r6, r4
 8002c76:	d109      	bne.n	8002c8c <__libc_init_array+0x24>
 8002c78:	f000 f830 	bl	8002cdc <_init>
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ca8 <__libc_init_array+0x40>)
 8002c80:	4c0a      	ldr	r4, [pc, #40]	; (8002cac <__libc_init_array+0x44>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	42a6      	cmp	r6, r4
 8002c88:	d105      	bne.n	8002c96 <__libc_init_array+0x2e>
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c90:	4798      	blx	r3
 8002c92:	3601      	adds	r6, #1
 8002c94:	e7ee      	b.n	8002c74 <__libc_init_array+0xc>
 8002c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9a:	4798      	blx	r3
 8002c9c:	3601      	adds	r6, #1
 8002c9e:	e7f2      	b.n	8002c86 <__libc_init_array+0x1e>
 8002ca0:	08002dbc 	.word	0x08002dbc
 8002ca4:	08002dbc 	.word	0x08002dbc
 8002ca8:	08002dbc 	.word	0x08002dbc
 8002cac:	08002dc0 	.word	0x08002dc0

08002cb0 <memcpy>:
 8002cb0:	440a      	add	r2, r1
 8002cb2:	4291      	cmp	r1, r2
 8002cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cb8:	d100      	bne.n	8002cbc <memcpy+0xc>
 8002cba:	4770      	bx	lr
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cc2:	4291      	cmp	r1, r2
 8002cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cc8:	d1f9      	bne.n	8002cbe <memcpy+0xe>
 8002cca:	bd10      	pop	{r4, pc}

08002ccc <memset>:
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4402      	add	r2, r0
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <memset+0xa>
 8002cd4:	4770      	bx	lr
 8002cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cda:	e7f9      	b.n	8002cd0 <memset+0x4>

08002cdc <_init>:
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cde:	bf00      	nop
 8002ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce2:	bc08      	pop	{r3}
 8002ce4:	469e      	mov	lr, r3
 8002ce6:	4770      	bx	lr

08002ce8 <_fini>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr
